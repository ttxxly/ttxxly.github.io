<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>Java 运行时异常</title>
      <link href="/2019/02/25/Java-%E8%BF%90%E8%A1%8C%E6%97%B6%E5%BC%82%E5%B8%B8/"/>
      <url>/2019/02/25/Java-%E8%BF%90%E8%A1%8C%E6%97%B6%E5%BC%82%E5%B8%B8/</url>
      
        <content type="html"><![CDATA[<p>RunTimeException 异常是程序运行过程中产生的异常。Java类库的每个包中都定义了异常类，所有这些类都是 Throwable 类的子类。</p><p>Throwable 类派生了两个子类，分别是 Exception 和 Error 类。Error 类及其子类用来描述 Java 运行系统中的内部错误以及资源耗尽的错误，这类错误比较严重。Exception 类称为非致命性类，可以通过捕获处理使程序继续执行。Exception 类又根据错误发生的原因分为 RuntimeException 异常和除 RuntimeException 之外的异常。</p><h3 id="常见的-RuntimeException-异常"><a href="#常见的-RuntimeException-异常" class="headerlink" title="常见的 RuntimeException 异常"></a>常见的 RuntimeException 异常</h3><table><thead><tr><th>种类</th><th>说明</th></tr></thead><tbody><tr><td>NullPointerException</td><td>空指针异常</td></tr><tr><td>ArrayIndexOutOfBoundsException</td><td>数组下标越界异常</td></tr><tr><td>ArithmeticException</td><td>算术异常</td></tr><tr><td>ArrayStoreException</td><td>数组中包含不兼容的值抛出异常</td></tr><tr><td>IilegalArgumentException</td><td>非法参数异常</td></tr><tr><td>SecurityException</td><td>安全性异常</td></tr><tr><td>NegativeArraySizeException</td><td>数组长度为负异常</td></tr></tbody></table>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Java 枚举类型</title>
      <link href="/2019/02/22/Java-%E6%9E%9A%E4%B8%BE%E7%B1%BB%E5%9E%8B/"/>
      <url>/2019/02/22/Java-%E6%9E%9A%E4%B8%BE%E7%B1%BB%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<p>使用枚举类型可以取代以往定义常量的方式，同时枚举类型还赋予程序在编译时进行检查的功能。</p><h3 id="使用枚举类型设置常量"><a href="#使用枚举类型设置常量" class="headerlink" title="使用枚举类型设置常量"></a>使用枚举类型设置常量</h3><p>以往设置常量，通常将常量放置在接口中，这样在程序中就可以直接使用，并且该常量不能被修改，因为在接口中定义常量时，该常量的修饰符为 final 与 static。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Java 使用 Annotation 功能</title>
      <link href="/2019/02/21/Java-%E4%BD%BF%E7%94%A8-Annotation-%E5%8A%9F%E8%83%BD/"/>
      <url>/2019/02/21/Java-%E4%BD%BF%E7%94%A8-Annotation-%E5%8A%9F%E8%83%BD/</url>
      
        <content type="html"><![CDATA[<p>Java 中提供了 Annotation 功能，该功能可用于类、构造方法、成员变量、方法、参数等的声明中。该功能并不影响程序的运行，但是会对编译器警告灯辅助工具产生影响。</p><h3 id="定义-Annotation-类型"><a href="#定义-Annotation-类型" class="headerlink" title="定义 Annotation 类型"></a>定义 Annotation 类型</h3><p>在定义 Annotation 类型时，也需要用到用来定义接口的 interface 关键字，但需要在 interface 关键字前加一个 <code>@</code>符号，即定义 Annotation 类型的关键字为 <code>@interface</code>，这个关键字的隐含意思是继承了 <code>ava.lang.annotation.Annotation</code>接口.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> NoMemberAnnotation &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Java Class 类与 Java 反射</title>
      <link href="/2019/02/20/Java-Class-%E7%B1%BB%E4%B8%8E-Java-%E5%8F%8D%E5%B0%84/"/>
      <url>/2019/02/20/Java-Class-%E7%B1%BB%E4%B8%8E-Java-%E5%8F%8D%E5%B0%84/</url>
      
        <content type="html"><![CDATA[<p>通过 java 反射机制，可以在程序中访问已经装载到 JVM 中的 Java 对象的描述，实现访问、检测和修改描述 Java 对象本身信息的功能。 java 反射机制的功能十分强大，在 <code>java.lang.reflect</code> 包中提供了对该功能的支持。</p><p>从所周知，所有 Java 类均继承了 Object 类，在 Object 类中定义了一个 getClass() 方法，该方法返回一个类型为 Class 的对象。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Class textFieldC = textField.getClass();</span><br></pre></td></tr></table></figure></p><p>利用 Class 类的对象 textFieldC，可以访问用来返回该对象的 textField 对象的描述信息。</p><p>描述信息如下表所示：</p><table><thead><tr><th>组成部分</th><th>访问方法</th><th>返回值类型</th><th>说明</th></tr></thead><tbody><tr><td>包路径</td><td>getPackage()</td><td>Package 对象</td><td>获得该类的存放路径</td></tr><tr><td>类名称</td><td>getName()</td><td>String 对象</td><td>获得该类的名称</td></tr><tr><td>继承类</td><td>getSuperClass()</td><td>Class 对象</td><td>获得该类继承的类</td></tr><tr><td>实现接口</td><td>getInterfaces()</td><td>Class 型数组</td><td>获得该类实现的所有接口</td></tr><tr><td>构造方法</td><td>getConstructors()</td><td>Constructor 型数组</td><td>获得所有权限为 public 的构造方法</td></tr><tr><td>构造方法</td><td>getConstructor(Class&lt;?&gt;…parameterTypes)</td><td>Constructor 对象</td><td>获得权限为 public 的指定构造方法</td></tr><tr><td>构造方法</td><td>getDeclaredConstructors()</td><td>Constructors 型数组</td><td>获得所有构造方法，按声明顺序返回</td></tr><tr><td>构造方法</td><td>getDeclaredConstructor(Class&lt;?&gt;…parameterTypes)</td><td>Constructor 对象</td><td>获得指定构造方法</td></tr><tr><td>方法</td><td>getMethods()</td><td>Method 型数组</td><td>获得所有权限为 public 的方法</td></tr><tr><td>方法</td><td>getMethod(String name, Class&lt;?&gt;…parameterTypes)</td><td>Method 对象</td><td>获得权限为 public 的指定方法</td></tr><tr><td>方法</td><td>getDeclaredMethods()</td><td>Method 数组</td><td>获得所有方法，按声明顺序返回</td></tr><tr><td>方法</td><td>getDeclaredMethod(String name, Class&lt;?&gt;…parameterTypes)</td><td>Method 对象</td><td>获得指定方法</td></tr><tr><td>成员变量</td><td>getFields()</td><td>Field 型数组</td><td>获得所有权限为 public 的成员变量</td></tr><tr><td>成员变量</td><td>getField(String name)</td><td>Field 对象</td><td>获得权限为 public 的指定成员变量</td></tr><tr><td>成员变量</td><td>getDeclaredFields()</td><td>Field 型数组</td><td>获得所有成员变量，按声明顺序返回</td></tr><tr><td>成员变量</td><td>getDeclaredField(String name)</td><td>Field 对象</td><td>获得指定成员变量</td></tr><tr><td>内部类</td><td>getClasses()</td><td>Class 型数组</td><td>获得所有权限为public的内部类</td></tr><tr><td>内部类</td><td>getDeclaredClasses()</td><td>Class 型数组</td><td>获得所有内部类</td></tr><tr><td>内部类的声明类</td><td>getDeclaringClass()</td><td>Class 对象</td><td>如果该类为内部类，则返回它的成员类，否则返回 null</td></tr></tbody></table>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Java 日期与时间</title>
      <link href="/2019/02/19/Java-%E6%97%A5%E6%9C%9F%E4%B8%8E%E6%97%B6%E9%97%B4/"/>
      <url>/2019/02/19/Java-%E6%97%A5%E6%9C%9F%E4%B8%8E%E6%97%B6%E9%97%B4/</url>
      
        <content type="html"><![CDATA[<p>java.util 包提供了 Date 类来封装当前的日期和时间。 Date 类提供两个构造函数来实例化 Date 对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">第一个构造函数使用当前日期和时间来初始化对象。</span><br><span class="line">Date( )</span><br><span class="line">    </span><br><span class="line">第二个构造函数接收一个参数，该参数是从<span class="number">1970</span>年<span class="number">1</span>月<span class="number">1</span>日起的毫秒数。</span><br><span class="line">Date(<span class="keyword">long</span> millisec)</span><br></pre></td></tr></table></figure><h3 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">after</span><span class="params">(Date date)</span></span></span><br><span class="line"><span class="function">若当调用此方法的Date对象在指定日期之后返回<span class="keyword">true</span>,否则返回<span class="keyword">false</span>。</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">before</span><span class="params">(Date date)</span></span></span><br><span class="line"><span class="function">若当调用此方法的Date对象在指定日期之前返回<span class="keyword">true</span>,否则返回<span class="keyword">false</span>。</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">Object <span class="title">clone</span><span class="params">( )</span></span></span><br><span class="line"><span class="function">返回此对象的副本。</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Date date)</span></span></span><br><span class="line"><span class="function">比较当调用此方法的Date对象和指定日期。两者相等时候返回0。</span></span><br><span class="line"><span class="function">调用对象在指定日期之前则返回负数。调用对象在指定日期之后则返回正数。</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Object obj)</span></span></span><br><span class="line"><span class="function">若obj是Date类型则操作等同于<span class="title">compareTo</span><span class="params">(Date)</span> 。否则它抛出ClassCastException。</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object date)</span></span></span><br><span class="line"><span class="function">当调用此方法的Date对象和指定日期相等时候返回<span class="keyword">true</span>,否则返回<span class="keyword">false</span>。</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="title">getTime</span><span class="params">( )</span></span></span><br><span class="line"><span class="function">返回自 1970 年 1 月 1 日 00:00:00 GMT 以来此 Date 对象表示的毫秒数。</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">hashCode</span><span class="params">( )</span></span></span><br><span class="line"><span class="function">返回此对象的哈希码值。</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setTime</span><span class="params">(<span class="keyword">long</span> time)</span></span></span><br><span class="line"><span class="function">用自1970年1月1日00:00:00 GMT以后time毫秒数设置时间和日期。</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">String <span class="title">toString</span><span class="params">( )</span></span></span><br><span class="line"><span class="function">把此 Date 对象转换为以下形式的 String： dow mon dd hh:mm:ss zzz yyyy </span></span><br><span class="line"><span class="function">其中： dow 是一周中的某一天 <span class="params">(Sun, Mon, Tue, Wed, Thu, Fri, Sat)</span>。</span></span><br></pre></td></tr></table></figure><h3 id="获取当前日期时间"><a href="#获取当前日期时间" class="headerlink" title="获取当前日期时间"></a>获取当前日期时间</h3><p>Java中获取当前日期和时间很简单，使用 Date 对象的 toString() 方法来打印当前日期和时间，如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DateDemo</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">       <span class="comment">// 初始化 Date 对象</span></span><br><span class="line">       Date date = <span class="keyword">new</span> Date();</span><br><span class="line">        </span><br><span class="line">       <span class="comment">// 使用 toString() 函数显示日期时间</span></span><br><span class="line">       System.out.println(date.toString());</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">编译结果如下：</span><br><span class="line">Mon May <span class="number">04</span> <span class="number">09</span>:<span class="number">51</span>:<span class="number">52</span> CDT <span class="number">2013</span></span><br></pre></td></tr></table></figure><h3 id="日期比较"><a href="#日期比较" class="headerlink" title="日期比较"></a>日期比较</h3><p>Java使用以下三种方法来比较两个日期：</p><ul><li>使用 getTime() 方法获取两个日期（自1970年1月1日经历的毫秒数值），然后比较这两个值。</li><li>使用方法 before()，after() 和 equals()。例如，一个月的12号比18号早，则 new Date(99, 2, 12).before(new Date (99, 2, 18)) 返回true。</li><li>使用 compareTo() 方法，它是由 Comparable 接口定义的，Date 类实现了这个接口。</li></ul><h3 id="使用-SimpleDateFormat-格式化日期"><a href="#使用-SimpleDateFormat-格式化日期" class="headerlink" title="使用 SimpleDateFormat 格式化日期"></a>使用 SimpleDateFormat 格式化日期</h3><p>SimpleDateFormat 是一个以语言环境敏感的方式来格式化和分析日期的类。SimpleDateFormat 允许你选择任何用户自定义日期时间格式来运行。例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">import</span> java.text.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DateDemo</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">      Date dNow = <span class="keyword">new</span> Date( );</span><br><span class="line">      SimpleDateFormat ft = </span><br><span class="line">      <span class="keyword">new</span> SimpleDateFormat (<span class="string">"E yyyy.MM.dd 'at' hh:mm:ss a zzz"</span>);</span><br><span class="line"></span><br><span class="line">      System.out.println(<span class="string">"Current Date: "</span> + ft.format(dNow));</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">结果：</span><br><span class="line">Current Date: Wed <span class="number">2016.11</span>.09 at <span class="number">08</span>:<span class="number">23</span>:<span class="number">19</span> AM UTC</span><br></pre></td></tr></table></figure><h3 id="日期和时间的格式化编码"><a href="#日期和时间的格式化编码" class="headerlink" title="日期和时间的格式化编码"></a>日期和时间的格式化编码</h3><p>时间模式字符串用来指定时间格式。在此模式中，所有的 ASCII 字母被保留为模式字母，定义如下：</p><table><thead><tr><th><strong>字母</strong></th><th><strong>描述</strong></th><th><strong>示例</strong></th></tr></thead><tbody><tr><td>G</td><td>纪元标记</td><td>AD</td></tr><tr><td>y</td><td>四位年份</td><td>2001</td></tr><tr><td>M</td><td>月份</td><td>July or 07</td></tr><tr><td>d</td><td>一个月的日期</td><td>10</td></tr><tr><td>h</td><td>A.M./P.M. (1~12)格式小时</td><td>12</td></tr><tr><td>H</td><td>一天中的小时 (0~23)</td><td>22</td></tr><tr><td>m</td><td>分钟数</td><td>30</td></tr><tr><td>s</td><td>秒数</td><td>55</td></tr><tr><td>S</td><td>毫秒数</td><td>234</td></tr><tr><td>E</td><td>星期几</td><td>Tuesday</td></tr><tr><td>D</td><td>一年中的日子</td><td>360</td></tr><tr><td>F</td><td>一个月中第几周的周几</td><td>2 (second Wed. in July)</td></tr><tr><td>w</td><td>一年中第几周</td><td>40</td></tr><tr><td>W</td><td>一个月中第几周</td><td>1</td></tr><tr><td>a</td><td>A.M./P.M. 标记</td><td>PM</td></tr><tr><td>k</td><td>一天中的小时(1~24)</td><td>24</td></tr><tr><td>K</td><td>A.M./P.M. (0~11)格式小时</td><td>10</td></tr><tr><td>z</td><td>时区</td><td>Eastern Standard Time</td></tr><tr><td>‘</td><td>文字定界符</td><td>Delimiter</td></tr><tr><td>“</td><td>单引号</td><td>`</td></tr></tbody></table><h3 id="使用printf格式化日期"><a href="#使用printf格式化日期" class="headerlink" title="使用printf格式化日期"></a>使用printf格式化日期</h3><p>printf 方法可以很轻松地格式化时间和日期。使用两个字母格式，它以 %t 开头并且以下面表格中的一个字母结尾。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DateDemo</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">     <span class="comment">// 初始化 Date 对象</span></span><br><span class="line">     Date date = <span class="keyword">new</span> Date();</span><br><span class="line"> </span><br><span class="line">     <span class="comment">//c的使用  </span></span><br><span class="line">    System.out.printf(<span class="string">"全部日期和时间信息：%tc%n"</span>,date);          </span><br><span class="line">    <span class="comment">//f的使用  </span></span><br><span class="line">    System.out.printf(<span class="string">"年-月-日格式：%tF%n"</span>,date);  </span><br><span class="line">    <span class="comment">//d的使用  </span></span><br><span class="line">    System.out.printf(<span class="string">"月/日/年格式：%tD%n"</span>,date);  </span><br><span class="line">    <span class="comment">//r的使用  </span></span><br><span class="line">    System.out.printf(<span class="string">"HH:MM:SS PM格式（12时制）：%tr%n"</span>,date);  </span><br><span class="line">    <span class="comment">//t的使用  </span></span><br><span class="line">    System.out.printf(<span class="string">"HH:MM:SS格式（24时制）：%tT%n"</span>,date);  </span><br><span class="line">    <span class="comment">//R的使用  </span></span><br><span class="line">    System.out.printf(<span class="string">"HH:MM格式（24时制）：%tR"</span>,date);  </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">结果：</span><br><span class="line"></span><br><span class="line">全部日期和时间信息：星期一 九月 <span class="number">10</span> <span class="number">10</span>:<span class="number">43</span>:<span class="number">36</span> CST <span class="number">2012</span>  </span><br><span class="line">年-月-日格式：<span class="number">2012</span>-<span class="number">09</span>-<span class="number">10</span>  </span><br><span class="line">月/日/年格式：<span class="number">09</span>/<span class="number">10</span>/<span class="number">12</span>  </span><br><span class="line">HH:MM:SS PM格式（<span class="number">12</span>时制）：<span class="number">10</span>:<span class="number">43</span>:<span class="number">36</span> 上午  </span><br><span class="line">HH:MM:SS格式（<span class="number">24</span>时制）：<span class="number">10</span>:<span class="number">43</span>:<span class="number">36</span>  </span><br><span class="line">HH:MM格式（<span class="number">24</span>时制）：<span class="number">10</span>:<span class="number">43</span></span><br></pre></td></tr></table></figure><h3 id="解析字符串为时间"><a href="#解析字符串为时间" class="headerlink" title="解析字符串为时间"></a>解析字符串为时间</h3><p>SimpleDateFormat 类有一些附加的方法，特别是parse()，它试图按照给定的SimpleDateFormat 对象的格式化存储来解析字符串。例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">import</span> java.text.*;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DateDemo</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">      SimpleDateFormat ft = <span class="keyword">new</span> SimpleDateFormat (<span class="string">"yyyy-MM-dd"</span>); </span><br><span class="line"> </span><br><span class="line">      String input = args.length == <span class="number">0</span> ? <span class="string">"1818-11-11"</span> : args[<span class="number">0</span>]; </span><br><span class="line"> </span><br><span class="line">      System.out.print(input + <span class="string">" Parses as "</span>); </span><br><span class="line"> </span><br><span class="line">      Date t; </span><br><span class="line"> </span><br><span class="line">      <span class="keyword">try</span> &#123; </span><br><span class="line">          t = ft.parse(input); </span><br><span class="line">          System.out.println(t); </span><br><span class="line">      &#125; <span class="keyword">catch</span> (ParseException e) &#123; </span><br><span class="line">          System.out.println(<span class="string">"Unparseable using "</span> + ft); </span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">result:</span><br><span class="line"></span><br><span class="line">$ java DateDemo</span><br><span class="line"><span class="number">1818</span>-<span class="number">11</span>-<span class="number">11</span> Parses as Wed Nov <span class="number">11</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> GMT <span class="number">1818</span></span><br><span class="line">$ java DateDemo <span class="number">2007</span>-<span class="number">12</span>-<span class="number">01</span></span><br><span class="line"><span class="number">2007</span>-<span class="number">12</span>-<span class="number">01</span> Parses as Sat Dec <span class="number">01</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> GMT <span class="number">2007</span></span><br></pre></td></tr></table></figure><h3 id="测量时间"><a href="#测量时间" class="headerlink" title="测量时间"></a>测量时间</h3><p>下面的一个例子表明如何测量时间间隔（以毫秒为单位）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DiffDemo</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">         <span class="keyword">long</span> start = System.currentTimeMillis( );</span><br><span class="line">         System.out.println(<span class="keyword">new</span> Date( ) + <span class="string">"\n"</span>);</span><br><span class="line">         Thread.sleep(<span class="number">5</span>*<span class="number">60</span>*<span class="number">10</span>);</span><br><span class="line">         System.out.println(<span class="keyword">new</span> Date( ) + <span class="string">"\n"</span>);</span><br><span class="line">         <span class="keyword">long</span> end = System.currentTimeMillis( );</span><br><span class="line">         <span class="keyword">long</span> diff = end - start;</span><br><span class="line">         System.out.println(<span class="string">"Difference is : "</span> + diff);</span><br><span class="line">      &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">         System.out.println(<span class="string">"Got an exception!"</span>);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">result:</span><br><span class="line"></span><br><span class="line">Fri Jan <span class="number">08</span> <span class="number">09</span>:<span class="number">48</span>:<span class="number">47</span> CST <span class="number">2016</span></span><br><span class="line"></span><br><span class="line">Fri Jan <span class="number">08</span> <span class="number">09</span>:<span class="number">48</span>:<span class="number">50</span> CST <span class="number">2016</span></span><br><span class="line"></span><br><span class="line">Difference is : <span class="number">3019</span></span><br></pre></td></tr></table></figure><h3 id="利用-Calendar-类在日期做加减"><a href="#利用-Calendar-类在日期做加减" class="headerlink" title="利用 Calendar 类在日期做加减"></a>利用 Calendar 类在日期做加减</h3><p>我们现在已经能够格式化并创建一个日期对象了，但是我们如何才能设置和获取日期数据的特定部分呢，比如说小时，日，或者分钟? 我们又如何在日期的这些部分加上或者减去值呢? 答案是使用Calendar 类。</p><p>Calendar类的功能要比Date类强大很多，而且在实现方式上也比Date类要复杂一些。</p><p>Calendar类是一个抽象类，在实际使用时实现特定的子类的对象，创建对象的过程对程序员来说是透明的，只需要使用getInstance方法创建即可。</p><h3 id="创建一个代表系统当前日期的Calendar对象"><a href="#创建一个代表系统当前日期的Calendar对象" class="headerlink" title="创建一个代表系统当前日期的Calendar对象"></a>创建一个代表系统当前日期的Calendar对象</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Calendar c = Calendar.getInstance();//默认是当前日期</span><br></pre></td></tr></table></figure><h4 id="创建一个指定日期的Calendar对象"><a href="#创建一个指定日期的Calendar对象" class="headerlink" title="创建一个指定日期的Calendar对象"></a>创建一个指定日期的Calendar对象</h4><p>使用Calendar类代表特定的时间，需要首先创建一个Calendar的对象，然后再设定该对象中的年月日参数来完成。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">//创建一个代表2009年6月12日的Calendar对象</span><br><span class="line">Calendar c1 = Calendar.getInstance();</span><br><span class="line">c1.set(2009, 6 - 1, 12);</span><br></pre></td></tr></table></figure><h4 id="Calendar类对象字段类型"><a href="#Calendar类对象字段类型" class="headerlink" title="Calendar类对象字段类型"></a>Calendar类对象字段类型</h4><p>Calendar类中用以下这些常量表示不同的意义，jdk内的很多类其实都是采用的这种思想</p><table><thead><tr><th>常量</th><th>描述</th></tr></thead><tbody><tr><td>Calendar.YEAR</td><td>年份</td></tr><tr><td>Calendar.MONTH</td><td>月份</td></tr><tr><td>Calendar.DATE</td><td>日期</td></tr><tr><td>Calendar.DAY_OF_MONTH</td><td>日期，和上面的字段意义完全相同</td></tr><tr><td>Calendar.HOUR</td><td>12小时制的小时</td></tr><tr><td>Calendar.HOUR_OF_DAY</td><td>24小时制的小时</td></tr><tr><td>Calendar.MINUTE</td><td>分钟</td></tr><tr><td>Calendar.SECOND</td><td>秒</td></tr><tr><td>Calendar.DAY_OF_WEEK</td><td>星期几</td></tr></tbody></table><h4 id="Calendar类对象信息的设置"><a href="#Calendar类对象信息的设置" class="headerlink" title="Calendar类对象信息的设置"></a>Calendar类对象信息的设置</h4><p><strong>Set设置</strong></p><p>如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Calendar c1 = Calendar.getInstance();</span><br></pre></td></tr></table></figure><p>调用：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">public final void set(int year,int month,int date)</span><br><span class="line">c1.set(2009, 6 - 1, 12);//把Calendar对象c1的年月日分别设这为：2009、6、12</span><br></pre></td></tr></table></figure><p>利用字段类型设置</p><p>如果只设定某个字段，例如日期的值，则可以使用如下set方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public void set(int field,int value)</span><br></pre></td></tr></table></figure><p>把 c1对象代表的日期设置为10号，其它所有的数值会被重新计算</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">c1.set(Calendar.DATE,10);</span><br></pre></td></tr></table></figure><p>把c1对象代表的年份设置为2008年，其他的所有数值会被重新计算</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">c1.set(Calendar.YEAR,2008);</span><br></pre></td></tr></table></figure><p>其他字段属性set的意义以此类推</p><p><strong>Add设置</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Calendar c1 = Calendar.getInstance();</span><br></pre></td></tr></table></figure><p>把c1对象的日期加上10，也就是c1也就表示为10天后的日期，其它所有的数值会被重新计算</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">c1.add(Calendar.DATE, 10);</span><br></pre></td></tr></table></figure><p>把c1对象的日期减去10，也就是c1也就表示为10天前的日期，其它所有的数值会被重新计算</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">c1.add(Calendar.DATE, -10);</span><br></pre></td></tr></table></figure><p>其他字段属性的add的意义以此类推</p><h4 id="Calendar类对象信息的获得"><a href="#Calendar类对象信息的获得" class="headerlink" title="Calendar类对象信息的获得"></a>Calendar类对象信息的获得</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Calendar c1 = Calendar.getInstance();</span><br><span class="line"><span class="comment">// 获得年份</span></span><br><span class="line"><span class="keyword">int</span> year = c1.get(Calendar.YEAR);</span><br><span class="line"><span class="comment">// 获得月份</span></span><br><span class="line"><span class="keyword">int</span> month = c1.get(Calendar.MONTH) + <span class="number">1</span>;</span><br><span class="line"><span class="comment">// 获得日期</span></span><br><span class="line"><span class="keyword">int</span> date = c1.get(Calendar.DATE);</span><br><span class="line"><span class="comment">// 获得小时</span></span><br><span class="line"><span class="keyword">int</span> hour = c1.get(Calendar.HOUR_OF_DAY);</span><br><span class="line"><span class="comment">// 获得分钟</span></span><br><span class="line"><span class="keyword">int</span> minute = c1.get(Calendar.MINUTE);</span><br><span class="line"><span class="comment">// 获得秒</span></span><br><span class="line"><span class="keyword">int</span> second = c1.get(Calendar.SECOND);</span><br><span class="line"><span class="comment">// 获得星期几（注意（这个与Date类是不同的）：1代表星期日、2代表星期1、3代表星期二，以此类推）</span></span><br><span class="line"><span class="keyword">int</span> day = c1.get(Calendar.DAY_OF_WEEK);</span><br></pre></td></tr></table></figure><h4 id="GregorianCalendar类"><a href="#GregorianCalendar类" class="headerlink" title="GregorianCalendar类"></a>GregorianCalendar类</h4><p>Calendar类实现了公历日历，GregorianCalendar是Calendar类的一个具体实现。</p><p>Calendar 的getInstance（）方法返回一个默认用当前的语言环境和时区初始化的GregorianCalendar对象。GregorianCalendar定义了两个字段：AD和BC。这是代表公历定义的两个时代。</p><p>下面列出GregorianCalendar对象的几个构造方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">GregorianCalendar() </span><br><span class="line">在具有默认语言环境的默认时区内使用当前时间构造一个默认的 GregorianCalendar。</span><br><span class="line"></span><br><span class="line">GregorianCalendar(<span class="keyword">int</span> year, <span class="keyword">int</span> month, <span class="keyword">int</span> date) </span><br><span class="line">在具有默认语言环境的默认时区内构造一个带有给定日期设置的 GregorianCalendar</span><br><span class="line"></span><br><span class="line">GregorianCalendar(<span class="keyword">int</span> year, <span class="keyword">int</span> month, <span class="keyword">int</span> date, <span class="keyword">int</span> hour, <span class="keyword">int</span> minute) </span><br><span class="line">为具有默认语言环境的默认时区构造一个具有给定日期和时间设置的 GregorianCalendar。</span><br><span class="line"></span><br><span class="line">GregorianCalendar(<span class="keyword">int</span> year, <span class="keyword">int</span> month, <span class="keyword">int</span> date, <span class="keyword">int</span> hour, <span class="keyword">int</span> minute, <span class="keyword">int</span> second) </span><br><span class="line">为具有默认语言环境的默认时区构造一个具有给定日期和时间设置的 GregorianCalendar。</span><br><span class="line"></span><br><span class="line">GregorianCalendar(Locale aLocale) </span><br><span class="line">在具有给定语言环境的默认时区内构造一个基于当前时间的 GregorianCalendar</span><br><span class="line"></span><br><span class="line">GregorianCalendar(TimeZone zone) </span><br><span class="line">在具有默认语言环境的给定时区内构造一个基于当前时间的 GregorianCalendar。</span><br><span class="line"></span><br><span class="line">GregorianCalendar(TimeZone zone, Locale aLocale) </span><br><span class="line">在具有给定语言环境的给定时区内构造一个基于当前时间的 GregorianCalendar。</span><br></pre></td></tr></table></figure><p>这里是GregorianCalendar 类提供的一些有用的方法列表：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> field, <span class="keyword">int</span> amount)</span> </span></span><br><span class="line"><span class="function">根据日历规则，将指定的（有符号的）时间量添加到给定的日历字段中。</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">computeFields</span><span class="params">()</span> </span></span><br><span class="line"><span class="function">转换UTC毫秒值为时间域值</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">computeTime</span><span class="params">()</span> </span></span><br><span class="line"><span class="function">覆盖Calendar ，转换时间域值为UTC毫秒值</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span> </span></span><br><span class="line"><span class="function">比较此 GregorianCalendar 与指定的 Object。</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> field)</span> </span></span><br><span class="line"><span class="function">获取指定字段的时间值</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getActualMaximum</span><span class="params">(<span class="keyword">int</span> field)</span> </span></span><br><span class="line"><span class="function">返回当前日期，给定字段的最大值</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getActualMinimum</span><span class="params">(<span class="keyword">int</span> field)</span> </span></span><br><span class="line"><span class="function">返回当前日期，给定字段的最小值</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getGreatestMinimum</span><span class="params">(<span class="keyword">int</span> field)</span> </span></span><br><span class="line"><span class="function"> 返回此 GregorianCalendar 实例给定日历字段的最高的最小值。</span></span><br><span class="line"><span class="function"> </span></span><br><span class="line"><span class="function">Date <span class="title">getGregorianChange</span><span class="params">()</span> </span></span><br><span class="line"><span class="function">获得格里高利历的更改日期。</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getLeastMaximum</span><span class="params">(<span class="keyword">int</span> field)</span> </span></span><br><span class="line"><span class="function">返回此 GregorianCalendar 实例给定日历字段的最低的最大值</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getMaximum</span><span class="params">(<span class="keyword">int</span> field)</span> </span></span><br><span class="line"><span class="function">返回此 GregorianCalendar 实例的给定日历字段的最大值。</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">Date <span class="title">getTime</span><span class="params">()</span></span></span><br><span class="line"><span class="function">获取日历当前时间。</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="title">getTimeInMillis</span><span class="params">()</span> </span></span><br><span class="line"><span class="function">获取用长整型表示的日历的当前时间</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">TimeZone <span class="title">getTimeZone</span><span class="params">()</span> </span></span><br><span class="line"><span class="function">获取时区。</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getMinimum</span><span class="params">(<span class="keyword">int</span> field)</span> </span></span><br><span class="line"><span class="function">返回给定字段的最小值。</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span></span><br><span class="line"><span class="function">重写hashCode.</span></span><br><span class="line"><span class="function">    </span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">isLeapYear</span><span class="params">(<span class="keyword">int</span> year)</span></span></span><br><span class="line"><span class="function">确定给定的年份是否为闰年。</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">roll</span><span class="params">(<span class="keyword">int</span> field, <span class="keyword">boolean</span> up)</span> </span></span><br><span class="line"><span class="function">在给定的时间字段上添加或减去（上/下）单个时间单元，不更改更大的字段。</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">set</span><span class="params">(<span class="keyword">int</span> field, <span class="keyword">int</span> value)</span> </span></span><br><span class="line"><span class="function">用给定的值设置时间字段。</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">set</span><span class="params">(<span class="keyword">int</span> year, <span class="keyword">int</span> month, <span class="keyword">int</span> date)</span> </span></span><br><span class="line"><span class="function">设置年、月、日的值。</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">set</span><span class="params">(<span class="keyword">int</span> year, <span class="keyword">int</span> month, <span class="keyword">int</span> date, <span class="keyword">int</span> hour, <span class="keyword">int</span> minute)</span> </span></span><br><span class="line"><span class="function">设置年、月、日、小时、分钟的值。</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">set</span><span class="params">(<span class="keyword">int</span> year, <span class="keyword">int</span> month, <span class="keyword">int</span> date, <span class="keyword">int</span> hour, <span class="keyword">int</span> minute, <span class="keyword">int</span> second)</span> </span></span><br><span class="line"><span class="function">设置年、月、日、小时、分钟、秒的值。</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setGregorianChange</span><span class="params">(Date date)</span> </span></span><br><span class="line"><span class="function">设置 GregorianCalendar 的更改日期。</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setTime</span><span class="params">(Date date)</span> </span></span><br><span class="line"><span class="function">用给定的日期设置Calendar的当前时间。</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setTimeInMillis</span><span class="params">(<span class="keyword">long</span> millis)</span> </span></span><br><span class="line"><span class="function">用给定的<span class="keyword">long</span>型毫秒数设置Calendar的当前时间。</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setTimeZone</span><span class="params">(TimeZone value)</span> </span></span><br><span class="line"><span class="function">用给定时区值设置当前时区。</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">String <span class="title">toString</span><span class="params">()</span> </span></span><br><span class="line"><span class="function">返回代表日历的字符串。</span></span><br></pre></td></tr></table></figure><h4 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GregorianCalendarDemo</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">      String months[] = &#123;</span><br><span class="line">      <span class="string">"Jan"</span>, <span class="string">"Feb"</span>, <span class="string">"Mar"</span>, <span class="string">"Apr"</span>,</span><br><span class="line">      <span class="string">"May"</span>, <span class="string">"Jun"</span>, <span class="string">"Jul"</span>, <span class="string">"Aug"</span>,</span><br><span class="line">      <span class="string">"Sep"</span>, <span class="string">"Oct"</span>, <span class="string">"Nov"</span>, <span class="string">"Dec"</span>&#125;;</span><br><span class="line">      </span><br><span class="line">      <span class="keyword">int</span> year;</span><br><span class="line">      <span class="comment">// 初始化 Gregorian 日历</span></span><br><span class="line">      <span class="comment">// 使用当前时间和日期</span></span><br><span class="line">      <span class="comment">// 默认为本地时间和时区</span></span><br><span class="line">      GregorianCalendar gcalendar = <span class="keyword">new</span> GregorianCalendar();</span><br><span class="line">      <span class="comment">// 显示当前时间和日期的信息</span></span><br><span class="line">      System.out.print(<span class="string">"Date: "</span>);</span><br><span class="line">      System.out.print(months[gcalendar.get(Calendar.MONTH)]);</span><br><span class="line">      System.out.print(<span class="string">" "</span> + gcalendar.get(Calendar.DATE) + <span class="string">" "</span>);</span><br><span class="line">      System.out.println(year = gcalendar.get(Calendar.YEAR));</span><br><span class="line">      System.out.print(<span class="string">"Time: "</span>);</span><br><span class="line">      System.out.print(gcalendar.get(Calendar.HOUR) + <span class="string">":"</span>);</span><br><span class="line">      System.out.print(gcalendar.get(Calendar.MINUTE) + <span class="string">":"</span>);</span><br><span class="line">      System.out.println(gcalendar.get(Calendar.SECOND));</span><br><span class="line">      </span><br><span class="line">      <span class="comment">// 测试当前年份是否为闰年</span></span><br><span class="line">      <span class="keyword">if</span>(gcalendar.isLeapYear(year)) &#123;</span><br><span class="line">         System.out.println(<span class="string">"当前年份是闰年"</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span> &#123;</span><br><span class="line">         System.out.println(<span class="string">"当前年份不是闰年"</span>);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Java 数组排序</title>
      <link href="/2019/02/18/Java-%E6%95%B0%E7%BB%84%E6%8E%92%E5%BA%8F/"/>
      <url>/2019/02/18/Java-%E6%95%B0%E7%BB%84%E6%8E%92%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<p>对数组进行排序的算法大致有冒泡、选择、插入和希尔排序。在这篇文章中我们将依次介绍这些算法的原理以及实现。</p><h3 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.idcn.jse;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SortAll</span> </span>&#123;  </span><br><span class="line">  </span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;  </span><br><span class="line">  <span class="keyword">int</span>[] i = &#123; <span class="number">1</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">12</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">3</span>, <span class="number">23</span>, <span class="number">39</span>, <span class="number">403</span>, <span class="number">596</span>, <span class="number">87</span> &#125;;  </span><br><span class="line">  System.out.println(<span class="string">"----冒泡排序的结果："</span>);  </span><br><span class="line">  maoPao(i);  </span><br><span class="line"> &#125;  </span><br><span class="line">  </span><br><span class="line"> <span class="comment">// 冒泡排序  </span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">maoPao</span><span class="params">(<span class="keyword">int</span>[] x)</span> </span>&#123;  </span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; x.length; i++) &#123;  </span><br><span class="line">   <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; x.length; j++) &#123;  </span><br><span class="line">    <span class="keyword">if</span> (x[i] &gt; x[j]) &#123;  </span><br><span class="line">     <span class="keyword">int</span> temp = x[i];  </span><br><span class="line">     x[i] = x[j];  </span><br><span class="line">     x[j] = temp;  </span><br><span class="line">    &#125;  </span><br><span class="line">   &#125;  </span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h3 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.idcn.jse;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SortAll</span> </span>&#123;  </span><br><span class="line">  </span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;  </span><br><span class="line">  <span class="keyword">int</span>[] i = &#123; <span class="number">1</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">12</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">3</span>, <span class="number">23</span>, <span class="number">39</span>, <span class="number">403</span>, <span class="number">596</span>, <span class="number">87</span> &#125;;  </span><br><span class="line">  </span><br><span class="line">  System.out.println(<span class="string">"----选择排序的结果："</span>);  </span><br><span class="line">  xuanZe(i); </span><br><span class="line"> &#125;  </span><br><span class="line"> </span><br><span class="line">  </span><br><span class="line"> <span class="comment">// 选择排序  </span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">xuanZe</span><span class="params">(<span class="keyword">int</span>[] x)</span> </span>&#123;  </span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; x.length; i++) &#123;  </span><br><span class="line">   <span class="keyword">int</span> lowerIndex = i;  </span><br><span class="line">   <span class="comment">// 找出最小的一个索引  </span></span><br><span class="line">   <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; x.length; j++) &#123;  </span><br><span class="line">    <span class="keyword">if</span> (x[j] &lt; x[lowerIndex]) &#123;  </span><br><span class="line">     lowerIndex = j;  </span><br><span class="line">    &#125;  </span><br><span class="line">   &#125;  </span><br><span class="line">   <span class="comment">// 交换  </span></span><br><span class="line">   <span class="keyword">int</span> temp = x[i];  </span><br><span class="line">   x[i] = x[lowerIndex];  </span><br><span class="line">   x[lowerIndex] = temp;  </span><br><span class="line">  &#125;  </span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i : x) &#123;  </span><br><span class="line">   System.out.print(i + <span class="string">" "</span>);  </span><br><span class="line">  &#125;  </span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h3 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.idcn.jse;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SortAll</span> </span>&#123;  </span><br><span class="line">    </span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;  </span><br><span class="line">  <span class="keyword">int</span>[] i = &#123; <span class="number">1</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">12</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">3</span>, <span class="number">23</span>, <span class="number">39</span>, <span class="number">403</span>, <span class="number">596</span>, <span class="number">87</span> &#125;;  </span><br><span class="line"> </span><br><span class="line">  System.out.println(<span class="string">"----插入排序的结果："</span>);  </span><br><span class="line">  chaRu(i);  </span><br><span class="line"> &#125;  </span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"> <span class="comment">// 插入排序  </span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">chaRu</span><span class="params">(<span class="keyword">int</span>[] x)</span> </span>&#123;  </span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; x.length; i++) &#123;<span class="comment">// i从一开始，因为第一个数已经是排好序的啦  </span></span><br><span class="line">   <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &gt; <span class="number">0</span>; j--) &#123;  </span><br><span class="line">    <span class="keyword">if</span> (x[j] &lt; x[j - <span class="number">1</span>]) &#123;  </span><br><span class="line">     <span class="keyword">int</span> temp = x[j];  </span><br><span class="line">     x[j] = x[j - <span class="number">1</span>];  </span><br><span class="line">     x[j - <span class="number">1</span>] = temp;  </span><br><span class="line">    &#125;  </span><br><span class="line">   &#125;  </span><br><span class="line">  &#125;  </span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i : x) &#123;  </span><br><span class="line">   System.out.print(i + <span class="string">" "</span>);  </span><br><span class="line">  &#125;  </span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h3 id="希尔排序"><a href="#希尔排序" class="headerlink" title="希尔排序"></a>希尔排序</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.idcn.jse;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SortAll</span> </span>&#123;  </span><br><span class="line">  </span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;  </span><br><span class="line">  <span class="keyword">int</span>[] i = &#123; <span class="number">1</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">12</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">3</span>, <span class="number">23</span>, <span class="number">39</span>, <span class="number">403</span>, <span class="number">596</span>, <span class="number">87</span> &#125;;  </span><br><span class="line">  System.out.println(<span class="string">"----希尔（Shell）排序的结果："</span>);  </span><br><span class="line">  shell(i);  </span><br><span class="line"> &#125;  </span><br><span class="line">  </span><br><span class="line"> <span class="comment">// 希尔排序  </span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">shell</span><span class="params">(<span class="keyword">int</span>[] x)</span> </span>&#123;  </span><br><span class="line">  <span class="comment">// 分组  </span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> increment = x.length / <span class="number">2</span>; increment &gt; <span class="number">0</span>; increment /= <span class="number">2</span>) &#123;  </span><br><span class="line">   <span class="comment">// 每个组内排序  </span></span><br><span class="line">   <span class="keyword">for</span> (<span class="keyword">int</span> i = increment; i &lt; x.length; i++) &#123;  </span><br><span class="line">    <span class="keyword">int</span> temp = x[i];  </span><br><span class="line">    <span class="keyword">int</span> j = <span class="number">0</span>;  </span><br><span class="line">    <span class="keyword">for</span> (j = i; j &gt;= increment; j -= increment) &#123;  </span><br><span class="line">     <span class="keyword">if</span> (temp &lt; x[j - increment]) &#123;  </span><br><span class="line">      x[j] = x[j - increment];  </span><br><span class="line">     &#125; <span class="keyword">else</span> &#123;  </span><br><span class="line">      <span class="keyword">break</span>;  </span><br><span class="line">     &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">    x[j] = temp;  </span><br><span class="line">   &#125;  </span><br><span class="line">  &#125;  </span><br><span class="line">  </span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i : x) &#123;  </span><br><span class="line">   System.out.print(i + <span class="string">" "</span>);  </span><br><span class="line">  &#125;  </span><br><span class="line"> &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Java 处理程序异常错误</title>
      <link href="/2019/02/15/Java-%E5%A4%84%E7%90%86%E7%A8%8B%E5%BA%8F%E5%BC%82%E5%B8%B8%E9%94%99%E8%AF%AF/"/>
      <url>/2019/02/15/Java-%E5%A4%84%E7%90%86%E7%A8%8B%E5%BA%8F%E5%BC%82%E5%B8%B8%E9%94%99%E8%AF%AF/</url>
      
        <content type="html"><![CDATA[<p>为了保证程序有效地执行，需要对发生的异常进行相应的处理。在 Java 中，如果某个方法抛出异常，即可以在当前方法中进行捕获，然后处理该异常，也可以将异常向上抛出，由方法调用者来处理。</p><h3 id="错误"><a href="#错误" class="headerlink" title="错误"></a>错误</h3><p>异常产生后，如果不做任何处理，程序就会被终止。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Thundering</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] agrs)</span> </span>&#123;</span><br><span class="line">        String str = <span class="string">"lili"</span>;</span><br><span class="line">        System.out.println(str + <span class="string">"年龄是："</span>);</span><br><span class="line">        <span class="keyword">int</span> age = Integer.parseInt(<span class="string">"20L"</span>);</span><br><span class="line">        System.out.println(age);</span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="捕获异常"><a href="#捕获异常" class="headerlink" title="捕获异常"></a>捕获异常</h3><p>Java 语言的异常捕获结构由 try、catch 以及 finally 3个部分组成。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;<span class="keyword">catch</span>(Exception e) &#123;</span><br><span class="line"></span><br><span class="line">&#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">    <span class="comment">//程序块</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Java 异常概述</title>
      <link href="/2019/02/14/Java-%E5%BC%82%E5%B8%B8%E6%A6%82%E8%BF%B0/"/>
      <url>/2019/02/14/Java-%E5%BC%82%E5%B8%B8%E6%A6%82%E8%BF%B0/</url>
      
        <content type="html"><![CDATA[<p>在程序中，错误可能产生于程序员没有预料到的各种情况，或者是超出了程序员可控范围的环境因素，如用户的坏数据、试图打开一个根本不存在的文件等。</p><p>在 Java 中这种在程序运行时可能出现的一些错误称为异常。异常是一个在程序执行期间发生的事件，它中断了正在执行的程序的正常指令流。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Java 内部类</title>
      <link href="/2019/02/13/Java-%E5%86%85%E9%83%A8%E7%B1%BB/"/>
      <url>/2019/02/13/Java-%E5%86%85%E9%83%A8%E7%B1%BB/</url>
      
        <content type="html"><![CDATA[<p>在类中再定义一个类，则 将在类中再定义的那个类称为内部类。内部类可分为成员内部类、局部内部类等。</p><h3 id="成员内部类"><a href="#成员内部类" class="headerlink" title="成员内部类"></a>成员内部类</h3><h4 id="成员内部类简介"><a href="#成员内部类简介" class="headerlink" title="成员内部类简介"></a>成员内部类简介</h4><p>在一个类中使用内部类，可以在内部类中直接存取其所在类的私有成员变量。</p><p>成员内部类的语法如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OuterClass</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">InnerClass</span></span>&#123;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="局部内部类"><a href="#局部内部类" class="headerlink" title="局部内部类"></a>局部内部类</h3><h3 id="匿名内部类"><a href="#匿名内部类" class="headerlink" title="匿名内部类"></a>匿名内部类</h3><h3 id="静态内部类"><a href="#静态内部类" class="headerlink" title="静态内部类"></a>静态内部类</h3><h3 id="内部类的继承"><a href="#内部类的继承" class="headerlink" title="内部类的继承"></a>内部类的继承</h3>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Java final 变量、方法与类</title>
      <link href="/2019/02/12/Java-final-%E5%8F%98%E9%87%8F%E3%80%81%E6%96%B9%E6%B3%95%E4%B8%8E%E7%B1%BB/"/>
      <url>/2019/02/12/Java-final-%E5%8F%98%E9%87%8F%E3%80%81%E6%96%B9%E6%B3%95%E4%B8%8E%E7%B1%BB/</url>
      
        <content type="html"><![CDATA[<p>final 关键字可用于变量声明，一旦该变量被设定，就不可以再改变该变量的值。通常，由 final 定义的变量为常量。例如，正在类中定义 PI 值。</p><h3 id="final-常量"><a href="#final-常量" class="headerlink" title="final 常量"></a>final 常量</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="keyword">double</span> PI = <span class="number">3.14</span>;</span><br></pre></td></tr></table></figure><p><strong>在 Java 中定义全局常量，通常使用 public static final 修饰，这样的常量只能在定义时被赋值</strong></p><h3 id="final-方法"><a href="#final-方法" class="headerlink" title="final 方法"></a>final 方法</h3><p>定义为 final 的方法不能被重写。</p><p>将方法定义为 final 类型可以防止子类修改该类的定义与实现方式，同时定义为 final 的方法的执行效率要高于非 final 方法。</p><h3 id="final-类"><a href="#final-类" class="headerlink" title="final 类"></a>final 类</h3><p>定义为 final 的类不能被继承。</p><p>如果希望一个类不允许任何类继承，并且不允许其他人对这个类进行任何改动，可以将这个类设置为 final 形式。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> 类名&#123;&#125;</span><br></pre></td></tr></table></figure><p>如果将某个类设置为 final 形式，则类中所有的方法都被隐式设置为 final 形式，但是 final 类中的成员变量可以被定义为 final 或非 final 形式。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Java 抽象类与接口</title>
      <link href="/2019/02/10/Java-%E6%8A%BD%E8%B1%A1%E7%B1%BB%E4%B8%8E%E6%8E%A5%E5%8F%A3/"/>
      <url>/2019/02/10/Java-%E6%8A%BD%E8%B1%A1%E7%B1%BB%E4%B8%8E%E6%8E%A5%E5%8F%A3/</url>
      
        <content type="html"><![CDATA[<p>在面向对象的概念中，所有的对象都是通过类来描绘的，但是反过来，并不是所有的类都是用来描绘对象的，如果一个类中没有包含足够的信息来描绘一个具体的对象，这样的类就是抽象类。</p><h3 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h3><p>一般将父类定义为抽象类，需要使用这个父类进行继承与多态处理。在继承树中越是在上方的类越抽象，如鸽子类继承鸟类、鸟类继承动物类等。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">testAbstract</span><span class="params">()</span></span>;   <span class="comment">//定义抽象方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用 abstract 关键字定义的类称为抽象类，使用这个关键字定义的方法称为抽象方法。抽象方法没有方法体，这个方法本身没有任何意义，除非它被重写，而承载这个抽象方法的抽象类必须被继承，实际上抽象类除了被继承之外没有任何意义。</p><h3 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h3><p>接口（英文：Interface），在JAVA编程语言中是一个抽象类型，是抽象方法的集合，接口通常以interface来声明。一个类通过继承接口的方式，从而来继承接口的抽象方法。</p><h4 id="接口简介"><a href="#接口简介" class="headerlink" title="接口简介"></a>接口简介</h4><p>接口是抽象类的延伸，可以看做是纯粹的抽象类，接口中的所有方法都没有方法体。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">drawTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span></span>;    <span class="comment">//接口内的方法，省略 abstract 关键字</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>在接口中定义的方法必须被定义为 public 或 abstract 形式，其他修饰权限不被 Java 编译器认可，即使不将该方法声明为 public 形式，它也是 public</strong></p><p><strong>在接口中定义的任何字段都自动是 static 和 final 的</strong></p><h4 id="接口与继承"><a href="#接口与继承" class="headerlink" title="接口与继承"></a>接口与继承</h4><p>在 Java 中不允许多重继承，但使用接口就可以实现多重继承，因为一个类可以同时实现多个接口，这样就可以将所有需要继承的接口放置在 implements 关键字后并使用逗号隔开，但这可能会在一个类中产生庞大的代码量，因为继承一个接口时需要实现接口中所有的方法。</p><p>多重继承的语法如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> 类名 <span class="keyword">implements</span> 接口1,接口2...</span></span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Java 多态</title>
      <link href="/2019/01/25/Java-%E5%A4%9A%E6%80%81/"/>
      <url>/2019/01/25/Java-%E5%A4%9A%E6%80%81/</url>
      
        <content type="html"><![CDATA[<p>多态是同一个行为具有多个不同表现形式或形态的能力。</p><p>动态就是同一个接口，使用不同的实例执行不同的操作。</p><h3 id="多态的优点"><a href="#多态的优点" class="headerlink" title="多态的优点"></a>多态的优点</h3><ul><li>消除类型之间的耦合关系</li><li>可替换性</li><li>可扩充性</li><li>接口性</li><li>灵活性</li><li>简化性</li></ul><h3 id="多态存在的三个必要条件"><a href="#多态存在的三个必要条件" class="headerlink" title="多态存在的三个必要条件"></a>多态存在的三个必要条件</h3><ul><li>继承</li><li>重写</li><li>父类引用指向子类对象<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Parent p = <span class="keyword">new</span> Child();</span><br></pre></td></tr></table></figure></li></ul><h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><p>当使用多态方式调用方法时，首先检查父类是否有该方法，如果没有，则编译错误；如果有，再去调用子类的同名方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.skm.demo.web.vo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        show(<span class="keyword">new</span> Cat());  <span class="comment">// 以 Cat 对象调用 show 方法</span></span><br><span class="line">        show(<span class="keyword">new</span> Dog());  <span class="comment">// 以 Dog 对象调用 show 方法</span></span><br><span class="line"></span><br><span class="line">        Animal a = <span class="keyword">new</span> Cat();  <span class="comment">// 向上转型</span></span><br><span class="line">        a.eat();               <span class="comment">// 调用的是 Cat 的 eat</span></span><br><span class="line">        Cat c = (Cat) a;        <span class="comment">// 向下转型</span></span><br><span class="line">        c.work();        <span class="comment">// 调用的是 Cat 的 work</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">(Animal a)</span> </span>&#123;</span><br><span class="line">        a.eat();</span><br><span class="line">        <span class="comment">// 类型判断</span></span><br><span class="line">        <span class="keyword">if</span> (a <span class="keyword">instanceof</span> Cat) &#123;  <span class="comment">// 猫做的事情</span></span><br><span class="line">            Cat c = (Cat) a;</span><br><span class="line">            c.work();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (a <span class="keyword">instanceof</span> Dog) &#123; <span class="comment">// 狗做的事情</span></span><br><span class="line">            Dog c = (Dog) a;</span><br><span class="line">            c.work();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"吃鱼"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">work</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"抓老鼠"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"吃骨头"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">work</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"看家"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//运行结果</span></span><br><span class="line">吃鱼</span><br><span class="line">抓老鼠</span><br><span class="line">吃骨头</span><br><span class="line">看家</span><br><span class="line">吃鱼</span><br><span class="line">抓老鼠</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Java 重载与重写</title>
      <link href="/2019/01/24/Java-%E9%87%8D%E8%BD%BD%E4%B8%8E%E9%87%8D%E5%86%99/"/>
      <url>/2019/01/24/Java-%E9%87%8D%E8%BD%BD%E4%B8%8E%E9%87%8D%E5%86%99/</url>
      
        <content type="html"><![CDATA[<p>方法的重载就是在同一类中允许同时存在一个以上的同名方法，只要这些方法的参数个数或类型不同计即可。</p><p>初学java的时候容易将两者弄错，对两者的概念不是很清楚，这篇文章主要来讲讲两者的区别。</p><h3 id="方法重载（Overload）"><a href="#方法重载（Overload）" class="headerlink" title="方法重载（Overload）"></a>方法重载（Overload）</h3><p>方法重载指的是在一个类中可以创建多个方法，方法名字相同，而参数列表不同。</p><p>重载规则：</p><ol><li>参数列表不同（参数的个数、类型或顺序不同）</li><li>不能以返回值类型作为重载函数的区分标准。</li></ol><h3 id="方法重写（Override）"><a href="#方法重写（Override）" class="headerlink" title="方法重写（Override）"></a>方法重写（Override）</h3><p>重写是子类对父类的允许访问的方法的实现过程重新编写，返回值和形参都不能改变。</p><p>重写的好处在于子类可以根据需要定义特定于自己的行为，子类可以根据需要实现父类的方法。</p><p>重写规则：</p><ol><li>参数列表必须完全和被重写的方法相同。</li><li>返回值类型必须相同。</li><li>访问权限不能比父类中被重写方法的访问权限更低。（父类的一个方法为public，子类重写该方法就不能声明为protected）</li><li>声明为final的方法不能被重写</li><li>声明为static的方法不能被重写，但是能够被再次声明。</li></ol><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OverLoadTest</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a + b;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//定义与第一个方法相同名称、参数类型不同的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">add</span><span class="params">(<span class="keyword">double</span> a, <span class="keyword">double</span> b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a + b;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">double</span> b)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//这个方法与前一个方法的参数次序不同</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">double</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"调用 add(int,int)方法"</span>+add(<span class="number">1</span>,<span class="number">2</span>));</span><br><span class="line">        System.out.println(<span class="string">"调用 add(double,double)方法："</span>+add(<span class="number">2.1</span>,<span class="number">3.3</span>));</span><br><span class="line">        System.out.println(<span class="string">"调用 add(int)方法："</span>+add(<span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Java 使用 instanceof 操作符判断对象类型</title>
      <link href="/2019/01/23/Java-%E4%BD%BF%E7%94%A8-instanceof-%E6%93%8D%E4%BD%9C%E7%AC%A6%E5%88%A4%E6%96%AD%E5%AF%B9%E8%B1%A1%E7%B1%BB%E5%9E%8B/"/>
      <url>/2019/01/23/Java-%E4%BD%BF%E7%94%A8-instanceof-%E6%93%8D%E4%BD%9C%E7%AC%A6%E5%88%A4%E6%96%AD%E5%AF%B9%E8%B1%A1%E7%B1%BB%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<p>当程序中执行向下转型操作时，如果父类对象不是子类对象的实例，就会发生 <code>ClassCastExcepion</code>异常，所以在执行向下转型之前需要判断父类对象是否为子类对象的实例。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">myobject <span class="keyword">instanceof</span> ExampleClass</span><br></pre></td></tr></table></figure><p><strong>例子</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Quadrangle</span></span>&#123;   <span class="comment">//四边形类</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">(Quadrangle q)</span> </span>&#123;<span class="comment">//四边形类方法</span></span><br><span class="line">        <span class="comment">//SomeSentence</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Square</span> <span class="keyword">extends</span> <span class="title">Quadrangle</span></span>&#123;</span><br><span class="line">    <span class="comment">//SomeSentence</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Anything</span></span>&#123;</span><br><span class="line">    <span class="comment">//SomeSentence</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Parallelogram</span> <span class="keyword">extends</span> <span class="title">Quadrangle</span> </span>&#123;<span class="comment">//平行四边形类</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">       Quadrangle q = <span class="keyword">new</span> Parallelogram();</span><br><span class="line">       <span class="comment">//判断父类对象是否为 Parallelogram 子类的一个实例</span></span><br><span class="line">       <span class="keyword">if</span> (q <span class="keyword">instanceof</span> Parallelogram)&#123;</span><br><span class="line">            Parallelogram p = (Parallelogram)q;<span class="comment">//向下转型操作</span></span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">//判断父类对象是否为 Square 子类的一个实例</span></span><br><span class="line">       <span class="keyword">if</span> (q <span class="keyword">instanceof</span> Square) &#123;</span><br><span class="line">            Square s = (Square)q;</span><br><span class="line">       &#125;</span><br><span class="line">       </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Java 对象类型的转换</title>
      <link href="/2019/01/22/Java-%E5%AF%B9%E8%B1%A1%E7%B1%BB%E5%9E%8B%E7%9A%84%E8%BD%AC%E6%8D%A2/"/>
      <url>/2019/01/22/Java-%E5%AF%B9%E8%B1%A1%E7%B1%BB%E5%9E%8B%E7%9A%84%E8%BD%AC%E6%8D%A2/</url>
      
        <content type="html"><![CDATA[<p>对象类型的转换在 Java 编程中经常遇到，主要包括向上转型与向下转型操作。</p><h3 id="向上转型"><a href="#向上转型" class="headerlink" title="向上转型"></a>向上转型</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Quadrangle</span></span>&#123;   <span class="comment">//四边形类</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">(Quadrangle q)</span> </span>&#123;<span class="comment">//四边形类方法</span></span><br><span class="line">        <span class="comment">//SomeSentence</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Parallelogram</span> <span class="keyword">extends</span> <span class="title">Quadrangle</span> </span>&#123;<span class="comment">//平行四边形类</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Parallelogram p = <span class="keyword">new</span> Parallelogram();<span class="comment">//实例化平行四边形类对象引用</span></span><br><span class="line">        draw(p);<span class="comment">//调用父类方法</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>平行四边形类继承了四边形类，将子类对象看做是父类对象被称为“向上转型”。</p><h3 id="向下转型"><a href="#向下转型" class="headerlink" title="向下转型"></a>向下转型</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Quadrangle</span></span>&#123;   <span class="comment">//四边形类</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">(Quadrangle q)</span> </span>&#123;<span class="comment">//四边形类方法</span></span><br><span class="line">        <span class="comment">//SomeSentence</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Parallelogram</span> <span class="keyword">extends</span> <span class="title">Quadrangle</span> </span>&#123;<span class="comment">//平行四边形类</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">       draw(<span class="keyword">new</span> Parallelogram());</span><br><span class="line">       <span class="comment">//将平行四边形类对象看作是四边形对象，称为向上转型操作</span></span><br><span class="line">       Quadrangle q = <span class="keyword">new</span> Parallelogram();</span><br><span class="line">       Parallelogram p = Parallelogram(q);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Java Object 类</title>
      <link href="/2019/01/21/Java-Object-%E7%B1%BB/"/>
      <url>/2019/01/21/Java-Object-%E7%B1%BB/</url>
      
        <content type="html"><![CDATA[<p>在 Java 中，所有的类都直接或间接继承了<code>java.lang.Object</code> 类。Object 类是比较特殊的类，它是所有类的父类，是 Java 类层中的最高层类。当创建一个类时，总是在继承，除非某个类已经指定要从其他类继承，否则它就是从 <code>java.lang.Object</code>类继承而来的。</p><h3 id="Object类-方法详解"><a href="#Object类-方法详解" class="headerlink" title="Object类 方法详解"></a>Object类 方法详解</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">clone():Object</span><br><span class="line">equals(Object):<span class="keyword">boolean</span></span><br><span class="line">finalize():<span class="keyword">void</span></span><br><span class="line">getClass():Class&lt;?&gt;</span><br><span class="line">hashCode():<span class="keyword">int</span></span><br><span class="line">notify():<span class="keyword">void</span></span><br><span class="line">notifyAll():<span class="keyword">void</span></span><br><span class="line">registerNatives():<span class="keyword">void</span></span><br><span class="line">toString():String</span><br><span class="line">wait():<span class="keyword">void</span></span><br><span class="line">wait(<span class="keyword">long</span>):<span class="keyword">void</span></span><br><span class="line">wait(<span class="keyword">long</span>, <span class="keyword">int</span>):<span class="keyword">void</span></span><br></pre></td></tr></table></figure><h4 id="getClass-方法"><a href="#getClass-方法" class="headerlink" title="getClass() 方法"></a>getClass() 方法</h4><p>getClass() 方法是 Object 类定义的方法，它会返回对象执行的 Class 实例，然后使用此实例调用 getName() 方法可以取得类的名称。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">getClass().getName();</span><br></pre></td></tr></table></figure></p><h4 id="toString-方法"><a href="#toString-方法" class="headerlink" title="toString() 方法"></a>toString() 方法</h4><p>toString() 方法的功能是将一个对象返回为字符串形式，它会返回一个 String 实例。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ObjectInstance</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"在"</span>+getClass().getName()+<span class="string">"类中重写 toString() 方法"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="keyword">new</span> ObjectInstance());<span class="comment">//打印本类对象</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="equals-方法"><a href="#equals-方法" class="headerlink" title="equals()方法"></a>equals()方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">V</span></span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OverWriteEquals</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String s1 = <span class="string">"123"</span>;</span><br><span class="line">        String s2 = <span class="string">"123"</span>;</span><br><span class="line">        System.out.println(s1.equals(s2));</span><br><span class="line">        V v1 = <span class="keyword">new</span> V();</span><br><span class="line">        V v2 = <span class="keyword">new</span> V();</span><br><span class="line">        System.out.println(v1.equals(v2));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Java 类的继承</title>
      <link href="/2019/01/16/Java-%E7%B1%BB%E7%9A%84%E7%BB%A7%E6%89%BF/"/>
      <url>/2019/01/16/Java-%E7%B1%BB%E7%9A%84%E7%BB%A7%E6%89%BF/</url>
      
        <content type="html"><![CDATA[<p>继承在面向对象开发思想中是一个非常重要的概念，它使整个程序架构具有一定的弹性，在程序中复用一些已经定义完善的类不仅可以减少软件开发周期，也可以提高软件的可维护性和扩展性。</p><p>其基本思想是基于某个父类的扩展，制定出一个新的子类，子类可以继承父类原有的属性和方法，也可以增加原来父类所不具备的属性和方法，或者直接重写父类中的某些方法。</p><h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Test</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//SomeSentence</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doSomething</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//SomeSentence</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Test <span class="title">dolt</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Test();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test2</span> <span class="keyword">extends</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        <span class="keyword">super</span>.doSomething();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSomethingnew</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//SomeSentence</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSomething</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//SomeSentence</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Test2 <span class="title">dolt</span><span class="params">()</span>  </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Test2();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><p>当重写父类方法时，修改方法的修饰权限只能从小的范围到大的范围改变，例如，父类中的 doSomething() 方法的修饰权限为 protected，继承后子类中的方法 doSomething() 的修饰权限只能修改为 public，不能修改为 private。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Java 大数字运算</title>
      <link href="/2019/01/15/Java-%E5%A4%A7%E6%95%B0%E5%AD%97%E8%BF%90%E7%AE%97/"/>
      <url>/2019/01/15/Java-%E5%A4%A7%E6%95%B0%E5%AD%97%E8%BF%90%E7%AE%97/</url>
      
        <content type="html"><![CDATA[<p>在 java中提供了大数字的操作类，即 Java.math.BigInteger 类与 java.math.BigDecimal 类。这两个类用于高精度计算，其中BigInteger 类是针对大整数的处理，而BigDecimal 类则是针对大小数的处理类。</p><h3 id="BigInteger"><a href="#BigInteger" class="headerlink" title="BigInteger"></a>BigInteger</h3><p>BigInteger 类型的数字范围较 Integer 类型的数字范围要大得多。BigInteger 支持任意精度的整数。</p><p>在 BigInteger 类中封装了多种操作，除了基本的加、减、乘、除操作之外，还提供了绝对值、相反数、最大公约数以及判断是否为质数等操作。</p><p>使用 BigInteger 类，可以实例化一个 BigInteger 对象，彬自动调用相应的构造函数。BigInteger 类具有很多构造函数，但最直接的一种是参数以字符串形式代表要处理的数字。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">BigInteger</span><span class="params">(String val)</span></span>;</span><br><span class="line"></span><br><span class="line">val 是十进制数字符串</span><br><span class="line"></span><br><span class="line">BigInteger twoInstance = <span class="keyword">new</span> BigInteger(<span class="string">"2"</span>);</span><br></pre></td></tr></table></figure><p>下面列举了 BigInteger 类中常用的几种运算方法<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> BigInteger <span class="title">add</span><span class="params">(BigInteger val)</span></span>;<span class="comment">//做加法运算</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> BigInteger <span class="title">subftract</span><span class="params">(BigInteger val)</span></span>;<span class="comment">//做减法运算</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> BigInteger <span class="title">multiply</span><span class="params">(BigInteger val)</span></span>;<span class="comment">//做乘法运算</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> BigInteger <span class="title">divide</span><span class="params">(BigInteger val)</span></span>;<span class="comment">//做除法运算</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> BigInteger <span class="title">remainder</span><span class="params">(BigInteger val)</span></span>;<span class="comment">//做取余运算</span></span><br><span class="line"><span class="keyword">public</span> BigInteger[] divideAndReainder(BigInteger val);<span class="comment">//用数组返回余数和商，结果数组中第一个值为商，第二个值为余数</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> BigInteger <span class="title">pow</span><span class="params">(<span class="keyword">int</span> exponent)</span></span>;<span class="comment">//取参数的 exponent 次方操作</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> BigInteger <span class="title">negate</span><span class="params">()</span></span>;<span class="comment">//取相反数</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> BigInteger <span class="title">shiftLeft</span><span class="params">(<span class="keyword">int</span> n)</span></span>;<span class="comment">//将数字左移 n 位，如果 n 为负数，做右移操作</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> BigInteger <span class="title">shiftRight</span><span class="params">(<span class="keyword">int</span> n)</span></span>;<span class="comment">//将数字右移 n 位，如果 n 为负数，做左移操作</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> BigInteger <span class="title">and</span><span class="params">(BigInteger val)</span></span>;<span class="comment">//与操作</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> BigInteger <span class="title">or</span><span class="params">(BigInteger val)</span></span>;<span class="comment">//或操作</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(BigInteger val)</span></span>;<span class="comment">//数字比较操作</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object x)</span></span>;<span class="comment">//当参数x是BigInteger类型的珠子并且数值相等时，返回true</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> BigInteger <span class="title">min</span><span class="params">(BigInteger val)</span></span>;<span class="comment">//返回较小的数字</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> BigInteger <span class="title">max</span><span class="params">(BigInteger val)</span></span>;<span class="comment">//返回较大的数字</span></span><br></pre></td></tr></table></figure></p><p><strong>例子：实现大数的各种运算操作</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.math.BigInteger;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BigIntegerDemo</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        BigInteger bigInstance = <span class="keyword">new</span> BigInteger(<span class="string">"4"</span>);、、实例化一个大数字</span><br><span class="line">        <span class="comment">//取该大数字 加 2 的操作</span></span><br><span class="line">        System.out.println(<span class="string">"加法操作："</span>+bigInstance.add(<span class="keyword">new</span> BigInteger(<span class="string">"2"</span>)));</span><br><span class="line">         <span class="comment">//取该大数字 减 2 的操作</span></span><br><span class="line">        System.out.println(<span class="string">"减法操作："</span>+bigInstance.subtract(<span class="keyword">new</span> BigInteger(<span class="string">"2"</span>)));</span><br><span class="line">         <span class="comment">//取该大数字 乘 2 的操作</span></span><br><span class="line">        System.out.println(<span class="string">"乘法操作："</span>+bigInstance.multiply(<span class="keyword">new</span> BigInteger(<span class="string">"2"</span>)));</span><br><span class="line">         <span class="comment">//取该大数字 除 2 的操作</span></span><br><span class="line">        System.out.println(<span class="string">"除法操作："</span>+bigInstance.divide(<span class="keyword">new</span> BigInteger(<span class="string">"2"</span>)));</span><br><span class="line">         <span class="comment">//取该大数字 除以 3 的商</span></span><br><span class="line">        System.out.println(<span class="string">"取商："</span>+bigInstance.divideAndReainder(<span class="keyword">new</span> BigInteger(<span class="string">"2"</span>))[<span class="number">0</span>]);</span><br><span class="line">          <span class="comment">//取该大数字 除以 3 的余数</span></span><br><span class="line">        System.out.println(<span class="string">"取商："</span>+bigInstance.divideAndReainder(<span class="keyword">new</span> BigInteger(<span class="string">"2"</span>))[<span class="number">1</span>]);</span><br><span class="line">         <span class="comment">//取该大数字的 2 次方</span></span><br><span class="line">        System.out.println(<span class="string">"做 2 次方的操作："</span>+bigInstance.pow(<span class="number">2</span>));</span><br><span class="line">         <span class="comment">//取该大数字的相反数</span></span><br><span class="line">        System.out.println(<span class="string">"取相反数操作："</span>+bigInstance.negate());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="BigDecimal"><a href="#BigDecimal" class="headerlink" title="BigDecimal"></a>BigDecimal</h3><p>一般的 float 型和 double 型数据只可以用来做科学计算或工程计算，但由于在商业计算中要求数字精度比较高，所以要用到 java.math.BigDecimal 类。BigDecimal 类支持任何精度的定点数，可以用它来精确计算货币值。</p><h4 id="两个常用的构造方法"><a href="#两个常用的构造方法" class="headerlink" title="两个常用的构造方法"></a>两个常用的构造方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">publilc <span class="title">BigDecimal</span><span class="params">(<span class="keyword">double</span> val)</span></span>;<span class="comment">//将双精度型转换为 BigDecimal 类型</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">BigDecimal</span><span class="params">(String val)</span></span>;<span class="comment">//将字符串转换为 BigDecimal 类型</span></span><br></pre></td></tr></table></figure><p><strong>例子：高精度大小运算操作</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.math.BigDecimal;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BigDecimalDemo</span></span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> location = <span class="number">10</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">        加法运算</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> BigDecimal <span class="title">add</span><span class="params">(<span class="keyword">double</span> value1, <span class="keyword">double</span> value2)</span></span>&#123;</span><br><span class="line">        BigDecimal b1 = <span class="keyword">new</span> BigDecimal(<span class="keyword">double</span>.toString(value1));</span><br><span class="line">        BigDecimal b2 = <span class="keyword">new</span> BigDecimal(<span class="keyword">double</span>.toString(value2));</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> b1.add(b2);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">     <span class="comment">/**</span></span><br><span class="line"><span class="comment">        减法运算</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> BigDecimal <span class="title">add</span><span class="params">(<span class="keyword">double</span> value1, <span class="keyword">double</span> value2)</span></span>&#123;</span><br><span class="line">        BigDecimal b1 = <span class="keyword">new</span> BigDecimal(<span class="keyword">double</span>.toString(value1));</span><br><span class="line">        BigDecimal b2 = <span class="keyword">new</span> BigDecimal(<span class="keyword">double</span>.toString(value2));</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> b1.subtract(b2);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">     <span class="comment">/**</span></span><br><span class="line"><span class="comment">        乘法运算</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> BigDecimal <span class="title">add</span><span class="params">(<span class="keyword">double</span> value1, <span class="keyword">double</span> value2)</span></span>&#123;</span><br><span class="line">        BigDecimal b1 = <span class="keyword">new</span> BigDecimal(<span class="keyword">double</span>.toString(value1));</span><br><span class="line">        BigDecimal b2 = <span class="keyword">new</span> BigDecimal(<span class="keyword">double</span>.toString(value2));</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> b1.multiply(b2);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">     <span class="comment">/**</span></span><br><span class="line"><span class="comment">        除法运算</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> BigDecimal <span class="title">add</span><span class="params">(<span class="keyword">double</span> value1, <span class="keyword">double</span> value2)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> div(value1, value2, location);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//定义除法方法，参数分别为除数与被除数以及商小数点后的余数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">div</span><span class="params">(<span class="keyword">double</span> value1, <span class="keyword">double</span> value2, <span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (b &lt;  <span class="number">0</span>) &#123;</span><br><span class="line">            System.out.printn(<span class="string">"b 值必须大于等于 0 "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">         BigDecimal b1 = <span class="keyword">new</span> BigDecimal(<span class="keyword">double</span>.toString(value1));</span><br><span class="line">        BigDecimal b2 = <span class="keyword">new</span> BigDecimal(<span class="keyword">double</span>.toString(value2));</span><br><span class="line">        <span class="keyword">return</span> b1.divide(b2, b, BigDecimal.ROUND_HALF_UP);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h3><h4 id="下列程序的输出结果是什么？"><a href="#下列程序的输出结果是什么？" class="headerlink" title="下列程序的输出结果是什么？"></a>下列程序的输出结果是什么？</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.＊;</span><br><span class="line"><span class="keyword">import</span> java.math.BigInteger;</span><br><span class="line"><span class="keyword">import</span> java.lang.＊;</span><br><span class="line"><span class="keyword">public</span>   <span class="class"><span class="keyword">class</span>   <span class="title">Test</span>   </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span>   <span class="keyword">static</span>   <span class="keyword">void</span>   <span class="title">main</span><span class="params">(String[]   args)</span>  <span class="keyword">throws</span> NumberFormatException </span>&#123;</span><br><span class="line">      BigInteger   one=<span class="keyword">new</span>     BigInteger(<span class="string">"1"</span>);</span><br><span class="line">      BigInteger   two=<span class="keyword">new</span>     BigInteger(<span class="string">"2"</span>);</span><br><span class="line">      BigInteger   three=<span class="keyword">new</span>   BigInteger(<span class="string">"3"</span>);</span><br><span class="line">      BigInteger   sum=<span class="keyword">new</span>     BigInteger(<span class="string">"0"</span>);</span><br><span class="line">      sum.add(one);</span><br><span class="line">      sum.add(two);</span><br><span class="line">      sum.add(three);</span><br><span class="line">      System.out.println(sum.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>A. 6</li><li>B. 0</li><li>C. 1 </li><li>D. 3</li></ul><p><strong>解析：</strong> 本题考的是Java中的大数类。<br>（1）BigInteger属于java.math.BigInteger，因此，在每次使用前都要import（输入）这个类，否则会提示找不到提示符。<br>（2）BigInteger构造方法有很多，如：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">BigInteger(String val)</span><br><span class="line"><span class="comment">//将BigInteger的十进制字符串表示形式转换为BigInteger</span></span><br><span class="line">BigInteger(String val，<span class="keyword">int</span> radix)</span><br><span class="line"><span class="comment">//将指定基数的BigInteger的字符串表示形式转换为BigInteger</span></span><br><span class="line">如要将<span class="keyword">int</span>型的<span class="number">2</span>转换为BigInteger型，要写为：</span><br><span class="line">BigInteger two=<span class="keyword">new</span> BigInteger(<span class="string">"2"</span>); <span class="comment">//注意2的双引号不能省略</span></span><br></pre></td></tr></table></figure></p><p>（3）BigInteger类模拟了所有的int型数学操作，如add()==+，divide()==-等，但注意进行数学运算时，不能直接使用数学运算符进行运算，必须使用其内部方法，而且其操作数也必须为BigInteger型。<br>如：two.add(2)就是一种错误的操作，因为2没有改为BigInteger型。<br>对本题而言，sum返回一个biginteger的值并不改变原来的变量，所以sum的值始终为0。如果想得到6的结果，必须显式地返回，代码如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.＊;</span><br><span class="line"><span class="keyword">import</span> java.math.BigInteger;</span><br><span class="line"><span class="keyword">import</span> java.lang.＊;</span><br><span class="line"><span class="keyword">public</span>   <span class="class"><span class="keyword">class</span>   <span class="title">Test</span>   </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span>   <span class="keyword">static</span>   <span class="keyword">void</span>   <span class="title">main</span><span class="params">(String[]   args)</span>  <span class="keyword">throws</span> NumberFormatException </span>&#123;</span><br><span class="line">      BigInteger   one=<span class="keyword">new</span>     BigInteger(<span class="string">"1"</span>);</span><br><span class="line">      BigInteger   two=<span class="keyword">new</span>     BigInteger(<span class="string">"2"</span>);</span><br><span class="line">      BigInteger   three=<span class="keyword">new</span>   BigInteger(<span class="string">"3"</span>);</span><br><span class="line">      BigInteger   sum=<span class="keyword">new</span>     BigInteger(<span class="string">"0"</span>);</span><br><span class="line">      sum = sum.add(one);</span><br><span class="line">      sum = sum.add(two);</span><br><span class="line">      sum = sum.add(three);</span><br><span class="line">      System.out.println(sum.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>答案：</strong> B</p>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Java 随机数</title>
      <link href="/2019/01/14/Java-%E9%9A%8F%E6%9C%BA%E6%95%B0/"/>
      <url>/2019/01/14/Java-%E9%9A%8F%E6%9C%BA%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<p>在实际开发中产生随机数的使用是很普遍的，所以在程序中进行随机数操作也是很重要的。</p><p>在 Java 中主要提供了两种方式产生随机数，分别是 Math 类的 random() 方法和 Random 类提供的产生各种数据类型随机数的方法。</p><h3 id="Math-random-方法"><a href="#Math-random-方法" class="headerlink" title="Math.random() 方法"></a>Math.random() 方法</h3><p>在 Math 类中存在一个 random() 方法，用于产生随机数字，这个方法默认生成大于等于 0.0 且小于 1.0 的 double 型随机数, 即 0 &lt;= Math.random() &lt; 1.0.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MathRandom</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">GetAnyNum</span><span class="params">(<span class="keyword">double</span> num1, <span class="keyword">double</span> num2)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//产生 num1 ~ num2 之间的随机数</span></span><br><span class="line">        <span class="keyword">int</span> s = (<span class="keyword">int</span>)num1 + (<span class="keyword">int</span>)(Math.random() *(num2-num1));</span><br><span class="line">        <span class="keyword">if</span>(s % <span class="number">2</span> == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> s;</span><br><span class="line">        &#125;<span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> s + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//调用产生随机数方法</span></span><br><span class="line">        System.out.println(<span class="string">"任意一个 2-32 之间的偶数："</span>+ getAnyNum(<span class="number">2</span>, <span class="number">32</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Random-类"><a href="#Random-类" class="headerlink" title="Random 类"></a>Random 类</h3><p>除了 Math 类的 random() 方法可以获取谁随机数之外，Java 还提供了一种获取随机数的方式，那就是 Java.util.Random 类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RandomDemo</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Random r =  <span class="keyword">new</span> Random();<span class="comment">//实例化一个 Random 类</span></span><br><span class="line">        <span class="comment">//随机产生一个整数</span></span><br><span class="line">        System.out.println(<span class="string">"随机产生一个整数："</span>+r.nextInt());</span><br><span class="line">        <span class="comment">//随机产生一个大于等于0且小于10的整数</span></span><br><span class="line">        System.out.println(<span class="string">"随机产生一个大于等于0且小于10的整数："</span>+r.nextInt(<span class="number">10</span>));</span><br><span class="line">        <span class="comment">//随机产生一个布尔型的值</span></span><br><span class="line">        System.out.println(<span class="string">"随机产生一个布尔型的值："</span>+r.nextBoolean());</span><br><span class="line">        <span class="comment">//随机产生一个双精度的值</span></span><br><span class="line">        System.out.println(<span class="string">"随机产生一个双精度的值："</span>+r.nextDouble());</span><br><span class="line">        <span class="comment">//随机产生一个浮点型的值</span></span><br><span class="line">        System.out.println(<span class="string">"随机产生一个浮点型的值："</span>+r.nextFloat());</span><br><span class="line">        <span class="comment">//随机产生一个概率密度为高斯分布的双精度值</span></span><br><span class="line">        System.out.println(<span class="string">"随机产生一个概率密度为高斯分布的双精度值："</span>+r.nextGaussian());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Java 数学运算</title>
      <link href="/2019/01/11/Java-%E6%95%B0%E5%AD%A6%E8%BF%90%E7%AE%97/"/>
      <url>/2019/01/11/Java-%E6%95%B0%E5%AD%A6%E8%BF%90%E7%AE%97/</url>
      
        <content type="html"><![CDATA[<p>在 Java 语言中提供了一个执行数学基本运算的 Math 类，该类包括常用的数学运算方法，如三角函数方法、指数函数方法、对数函数方法、平方根函数方法等一些常用数学函数，初次之外还提供了一些常用的数学常量，如PI、E等。</p><h3 id="Math-类"><a href="#Math-类" class="headerlink" title="Math 类"></a>Math 类</h3><p>在 Math 类中提供了众多数学函数方法，主要包括三角函数方法、指数函数方法、取整函数方法、取最大值、最小值和平均值函数方法，这些方法都被定义成 static 形式，方便调用。</p><h3 id="常用数学运算方法"><a href="#常用数学运算方法" class="headerlink" title="常用数学运算方法"></a>常用数学运算方法</h3><p>在 Math 类中的常用数学运算方法较多，大致可以将其分为 4 大类别。分别为 三角函数方法、指数函数方法、取整函数方法以及取最大值、最小值好绝对值函数方法。</p><ol><li>三角函数方法<br>在 Math 类中包含的三角函数方法如下：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">sin</span><span class="params">(<span class="keyword">double</span> a)</span></span>; 返回角的三角正弦</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">cos</span><span class="params">(<span class="keyword">double</span> a)</span></span>; 返回角的三角余弦</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">tan</span><span class="params">(<span class="keyword">double</span> a)</span></span>; 返回角的三角正切</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">asin</span><span class="params">(<span class="keyword">double</span> a)</span></span>; 返回一个值的反正弦</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">acos</span><span class="params">(<span class="keyword">double</span> a)</span></span>; 返回一个值的反余弦</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">atan</span><span class="params">(<span class="keyword">double</span> a)</span></span>; 返回一个值的反正切</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">toRadians</span><span class="params">(<span class="keyword">double</span> angdeg)</span></span>; 将角度转换为弧度</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">toDegrees</span><span class="params">(<span class="keyword">double</span> angrad)</span></span>; 将弧度转换为角度</span><br></pre></td></tr></table></figure></li></ol><p><strong>特别注意的是：角度和弧度转换通常是不精确地</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TrigonometricFunction</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//取 90 °的正弦</span></span><br><span class="line">        System.out.println(<span class="string">"90度的正弦值："</span>+Math.sin(Math.PI/<span class="number">2</span>))；</span><br><span class="line">        <span class="comment">//取 0 ° 的余弦</span></span><br><span class="line">        System.out.println(<span class="string">"0度的余弦值："</span>+Math.cos(<span class="number">0</span>));</span><br><span class="line">        <span class="comment">//取 60 ° 的 正切</span></span><br><span class="line">        System.out.println(<span class="string">"60 度的正切值:"</span> + Math.tan(Math.PI / <span class="number">3</span>));</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>指数函数方法</li></ol><p>Math 类中与指数相关的函数方法如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">exp</span><span class="params">(<span class="keyword">double</span> a)</span></span>; <span class="comment">//用于获取 e 的 a 次方</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">log</span><span class="params">(<span class="keyword">double</span> a)</span></span>; <span class="comment">//用于取自然对数</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">log10</span><span class="params">(<span class="keyword">double</span> a )</span></span>; <span class="comment">//用于取底数为10的对数</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">sqrt</span><span class="params">(<span class="keyword">double</span> a )</span></span>;<span class="comment">//用于取 a 的平方根，其中 a 不能为负值</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">cbrt</span><span class="params">(<span class="keyword">double</span> a )</span></span>;   <span class="comment">//用于取 a 的立方根</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">pow</span><span class="params">(<span class="keyword">double</span> a, <span class="keyword">double</span> b)</span></span>;<span class="comment">//用于取  a 的 b 次方</span></span><br></pre></td></tr></table></figure></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExponentFunction</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"e 的平方值："</span> + Math.exp(<span class="number">2</span>));</span><br><span class="line">        <span class="comment">//取以 e 为底 2 的对数</span></span><br><span class="line">        System.out.println(<span class="string">"以e为底2的对数："</span>+ Math.log(<span class="number">2</span>));</span><br><span class="line">        <span class="comment">//取以10 为底 2 的对数</span></span><br><span class="line">        System.out.println(<span class="string">"以10为底 2 的对数值："</span>+Math.log10(<span class="number">2</span>));</span><br><span class="line">        System.out.println(<span class="string">"4 的平方根值："</span> + Math.sqrt(<span class="number">4</span>));</span><br><span class="line">        System.out.println(<span class="string">"8 的立方根值："</span>+Math.cbrt(<span class="number">8</span>));</span><br><span class="line">        System.out.println(<span class="string">"2 的 2 次方值："</span> + Math.pow(<span class="number">2</span>,<span class="number">2</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>取整函数方法<br>在具体的问题中，取整操作使用也很普遍。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">ceil</span><span class="params">(<span class="keyword">double</span> a)</span></span>;<span class="comment">//返回大于等于参数的最小整数 </span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">floor</span><span class="params">(<span class="keyword">double</span> a)</span></span>;   <span class="comment">//返回小于等于参数的最大整数</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">rint</span><span class="params">(<span class="keyword">double</span> a)</span></span>;<span class="comment">//返回与参数最接近的整数，如果两个同为整数且童颜接近，则结果取整数、</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">round</span><span class="params">(<span class="keyword">float</span> a)</span></span>;<span class="comment">//将参数加上0.5后返回与参数最近的整数</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">long</span> <span class="title">round</span><span class="params">(<span class="keyword">double</span> a )</span></span>;<span class="comment">//将参数加上0.5之后返回与参数最近的整数，然后强制转换为长整型</span></span><br></pre></td></tr></table></figure></li></ol><p><strong>由于数 1.0和 数 2.0 距离数 1.5 都是0.5个单位长度，因此返回偶数 2.0</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">intFunction</span></span>&#123;</span><br><span class="line">    <span class="comment">//返回第一个大于等于参数的整数</span></span><br><span class="line">    System.out.println(<span class="string">"使用 ceil() 方法取整："</span>+Math.ceil(<span class="number">5.2</span>));</span><br><span class="line">    <span class="comment">//返回第一个小于等于参数的整数</span></span><br><span class="line">    System.out.println(<span class="string">"使用 floor 方法取整："</span>+ Math.floor(<span class="number">2.5</span>));</span><br><span class="line">    <span class="comment">//返回与参数最接近的整数</span></span><br><span class="line">    System.out.println(<span class="string">"使用 rint() 方法取整："</span>+Math.rint(<span class="number">2.7</span>));</span><br><span class="line">    <span class="comment">//返回与参数最接近的整数</span></span><br><span class="line">    System.out.println(<span class="string">"使用 rint 方法取整："</span>+ Math.rint(<span class="number">2.5</span>));</span><br><span class="line">    <span class="comment">//将参数加上 0.5 之后返回最接近的整数</span></span><br><span class="line">    System.out.println(使用 round方法取整：<span class="string">"+Math.round(3.4f));</span></span><br><span class="line"><span class="string">    //将参数加上 0.5 之后返回最接近的整数，并将结果强制转换为长整型</span></span><br><span class="line"><span class="string">    System.out.println("</span>使用 round 方法取整：<span class="string">"+Math.round(2.5));</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure></p><ol start="4"><li>取最大值、最小值、绝对值函数方法</li></ol><p>在程序中最常用的方法就是取最大值、最小值、绝对值等，在 Math 类中包括这些操作方法<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">max</span><span class="params">(<span class="keyword">double</span> a, <span class="keyword">double</span> b)</span></span>;<span class="comment">//取a与b之间的最大值</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">min</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>;<span class="comment">//取a与b之间的最小值，参数是整型</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">long</span> <span class="title">min</span><span class="params">(<span class="keyword">long</span> a, <span class="keyword">long</span> b)</span></span>;<span class="comment">//取a与b之间的最小值，参数是长整型</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">float</span> <span class="title">min</span><span class="params">(<span class="keyword">float</span> a, <span class="keyword">float</span> b)</span></span>;<span class="comment">//取a与b之间的最小值，参数是浮点型</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">min</span><span class="params">(duble a, <span class="keyword">double</span> b)</span></span>;<span class="comment">//取a与b之间的最小值，参数是双精度型</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">abs</span><span class="params">(<span class="keyword">int</span> a)</span></span>;<span class="comment">//返回整形参数的绝对值</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">long</span> <span class="title">abs</span><span class="params">(<span class="keyword">long</span> a)</span></span>;<span class="comment">//返回长整型参数的绝对值</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">float</span> <span class="title">abs</span><span class="params">(<span class="keyword">float</span> a)</span></span>;<span class="comment">//返回浮点型参数的绝对值</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">abs</span><span class="params">(<span class="keyword">double</span> a)</span></span>;<span class="comment">//返回双精度型参数的绝对值</span></span><br></pre></td></tr></table></figure></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AnyFunction</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"4 和 8 较大者："</span>+ Math.max(<span class="number">4</span>,<span class="number">8</span>));</span><br><span class="line">        <span class="comment">//取两个参数的最小值</span></span><br><span class="line">        System.out.println(<span class="string">"4.4 和 4 较小者："</span>+Math.min(<span class="number">4.4</span>, <span class="number">4</span>));</span><br><span class="line">        <span class="comment">//取参数的绝对值</span></span><br><span class="line">        System.out.println(<span class="string">"-7 的绝对值："</span>+ Math.abs(-<span class="number">7</span>));</span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Java 数字格式化</title>
      <link href="/2019/01/10/Java-%E6%95%B0%E5%AD%97%E6%A0%BC%E5%BC%8F%E5%8C%96/"/>
      <url>/2019/01/10/Java-%E6%95%B0%E5%AD%97%E6%A0%BC%E5%BC%8F%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<p>数字的格式化在解决实际问题时使用非常普遍，如表示某超市的商品价格，不要八六两位有效数字。Java 主要对浮点型数据进行数字格式化操作，其中浮点型数据包括 double 和 float 型数据，在 java 中使用 <code>Java.text.DecimalFormat</code>格式化数字。</p><p>DecimalFormat 是 NumberFormat 的一个子类，用于格式化十进制数字。他可以将一些数字格式化为整数、浮点数、百分数等。通过使用该类可以为要输出的数字加上单位或控制数字的精度。</p><p>DecimalFormat 类中特殊字符说明</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/2019-1-10/1.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p><strong>格式化数字的例子</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.text.DecimalFormat;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DecimalFormatSimpleDemo</span> </span>&#123;</span><br><span class="line">    <span class="comment">//使用实例化对象时设置格式化模式</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SimpleFormat</span><span class="params">(String pattern, <span class="keyword">double</span> value)</span>   </span>&#123;</span><br><span class="line">        <span class="comment">//实例化 DecimalFormat 对象</span></span><br><span class="line">        DecimalFormat myFormat = <span class="keyword">new</span> DecimalFormat(pattern);</span><br><span class="line">        String output = myFormat.format(value);<span class="comment">//将数字格式化</span></span><br><span class="line">        System.out.println(value+<span class="string">" "</span>+pattern+<span class="string">" "</span>+output):</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//使用 applyPattern() 方法对数字进行格式化</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">UseApplyPatternMethodFormat</span><span class="params">(String pattern, <span class="keyword">double</span> value)</span> </span>&#123;</span><br><span class="line">        DecimalFormat myFormat = <span class="keyword">new</span> DecimalFormat();</span><br><span class="line">        myFormat.applyPattern(pattern);</span><br><span class="line">        System.out.println(value+<span class="string">" "</span>+pattern+<span class="string">" "</span>+myFormat.format(value));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SimpleFormat(<span class="string">"###,###.###"</span>, <span class="number">123456.789</span>);</span><br><span class="line">        SImpleFormat(<span class="string">"00000000.###kg"</span>, <span class="number">123456.789</span>);</span><br><span class="line">        <span class="comment">//按照格式模式格式化数字，不存在的位以 0 显示</span></span><br><span class="line">        SimpleFormat(<span class="string">"000000.000"</span>, <span class="number">123.78</span>);</span><br><span class="line">        <span class="comment">//调用静态 UseApplyPatternMethodDormat()方法</span></span><br><span class="line">        UseApplyPatternMethodFormat(<span class="string">"#.###%"</span>, <span class="number">0.789</span>);</span><br><span class="line">        <span class="comment">//将小数点够格式化为两位</span></span><br><span class="line">        UseApplyPatternMethodFormat(<span class="string">"###.##"</span>, <span class="number">123456.789</span>);</span><br><span class="line">        <span class="comment">//将数字格式为 千分数形式</span></span><br><span class="line">        UseApplyPatternMethodFormat(<span class="string">"0.00\u2030"</span>, <span class="number">0.789</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 DecimalFormat 类中除了可以设置格式化模式来格式化数字之外，还可以使用一些特殊方法对数字进行格式化设置。<br>例如分组。。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Import java.text.DecimalFormat;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DecimalMethod</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        DecimalFormat myFormat = <span class="keyword">new</span> DecimalFormat();</span><br><span class="line">        myFormat.setGroupingSize(<span class="number">2</span>);<span class="comment">//设置将数字每两个分一组</span></span><br><span class="line">        String output = myFormat.format(<span class="number">123456.789</span>);</span><br><span class="line">        System.out.println(<span class="string">"将数字以每两个数字分组"</span>+ output );</span><br><span class="line">        myFormat.setGroupingSize(<span class="keyword">false</span>);<span class="comment">//设置不允许分组</span></span><br><span class="line">        String output = myFormat.format(<span class="number">123456.789</span>);</span><br><span class="line">        System.out.println(<span class="string">"不允许数字分组"</span>+ output );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>java 包装类</title>
      <link href="/2019/01/09/java-%E5%8C%85%E8%A3%85%E7%B1%BB/"/>
      <url>/2019/01/09/java-%E5%8C%85%E8%A3%85%E7%B1%BB/</url>
      
        <content type="html"><![CDATA[<p>Java 是一个面向对象的语言，但是 Java 中的基本数据类型却是不面向对象的，这在实际使用时存在很多的不便，为了解决这个不足，在设计类时为每个基本数据类型设计了一个对应的类进行代表，这样的八个和基本数据类型对应的类统称为包装类（wrapper class）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">基本类型 大小 包装器类型</span><br><span class="line"><span class="keyword">boolean</span> /  Boolean</span><br><span class="line"><span class="keyword">char</span> <span class="number">16</span>bit Character </span><br><span class="line"><span class="keyword">byte</span> <span class="number">8</span>bit Byte </span><br><span class="line"><span class="keyword">short</span> <span class="number">16</span>bit Short </span><br><span class="line"><span class="keyword">int</span> <span class="number">32</span>bit Integer </span><br><span class="line"><span class="keyword">long</span> <span class="number">64</span>bit Long </span><br><span class="line"><span class="keyword">float</span> <span class="number">32</span>bit Float </span><br><span class="line"><span class="keyword">double</span> <span class="number">64</span>bit Double</span><br><span class="line"><span class="keyword">void</span> / Void</span><br></pre></td></tr></table></figure><p>Java中的包装器类有两个主要的目的：</p><ol><li>提供一种机制，将基本值“包装”到对象中，从而使基本值能够包含在为对象而保留的操作中，比如添加到Collections 中，或者从带对象返回值的方法中返回。注意，java5增加了自动装箱和拆箱，程序员过去需手工执行的许多包装操作，现在可以由java自动处理了。</li><li>为基本值提供分类功能。这些功能大多数于各种转换有关：在基本值和String对象间相互转换，在基本值和String对象之间按不同基数转换，如二进制、八进制和十六进制.</li></ol><h3 id="自动装箱和拆箱"><a href="#自动装箱和拆箱" class="headerlink" title="自动装箱和拆箱"></a>自动装箱和拆箱</h3><p>自动装箱和拆箱问题是Java中一个老生常谈的问题了，今天就来一些看一下装箱和拆箱中的若干问题。本文先讲述装箱和拆箱最基本的东西，再来看一下面试笔试中经常遇到的与装箱、拆箱相关的问题。</p><h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><p>在前面的文章中提到，Java为每种基本数据类型都提供了对应的包装器类型，至于为什么会为每种基本数据类型提供包装器类型在此不进行阐述，有兴趣的朋友可以查阅相关资料。在Java SE5之前，如果要生成一个数值为10的Integer对象，必须这样进行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Integer i = new Integer(100);</span><br></pre></td></tr></table></figure><p>而在从Java SE5开始就提供了自动装箱的特性，如果要生成一个数值为10的Integer对象，只需要这样就可以了：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">int i = 100;</span><br></pre></td></tr></table></figure><p>这个过程中会自动根据数值创建对应的 Integer对象，这就是装箱。<br>那什么是拆箱呢？顾名思义，跟装箱对应，就是自动将包装器类型转换为基本数据类型：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Integer i = 10; //装箱</span><br><span class="line">int index = i;  //拆箱</span><br></pre></td></tr></table></figure><p>简单一点说，装箱就是自动将基本数据类型转换为包装器类型；拆箱就是自动将包装器类型转换为基本数据类型。</p><p>注意：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Integer test = null;</span><br><span class="line">int f = test.intValue();</span><br></pre></td></tr></table></figure><p>上面的代码编写时不会报错，但编译是通不过的。</p><h4 id="实现机制"><a href="#实现机制" class="headerlink" title="实现机制"></a>实现机制</h4><p>我们就以Interger类为例，下面看一段代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String[] args)&#123;</span><br><span class="line">    Integer i = 10; //装箱</span><br><span class="line">    int index = i;  //拆箱</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>反编译class文件之后得到如下内容：</p><p>从反编译得到的字节码内容可以看出，在装箱的时候自动调用的是Integer的<code>valueOf(int)</code>方法。而在拆箱的时候自动调用的是Integer的<code>intValue</code>方法。</p><p>其他的也类似，比如Double、Character，不相信的朋友可以自己手动尝试一下。</p><p>因此可以用一句话总结装箱和拆箱的实现过程：</p><p><strong>装箱过程是通过调用包装器的valueOf方法实现的，而拆箱过程是通过调用包装器的xxxValue方法实现的。（xxx代表对应的基本数据类型）。</strong></p><hr><h4 id="面试问题"><a href="#面试问题" class="headerlink" title="面试问题"></a>面试问题</h4><p>虽然大多数人对装箱和拆箱的概念都清楚，但是在面试和笔试中遇到了与装箱和拆箱的问题却不一定会答得上来。下面列举一些常见的与装箱/拆箱有关的面试题，建议先自己尝试编译看源码做做。</p><ul><li>下面这段代码的输出结果是什么？</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">public class Main &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        Integer i1 = 100;</span><br><span class="line">        Integer i2 = 100;</span><br><span class="line">        Integer i3 = 200;</span><br><span class="line">        Integer i4 = 200;</span><br><span class="line">        </span><br><span class="line">        System.out.println(i1==i2);</span><br><span class="line">        System.out.println(i3==i4);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也许有些朋友会说都会输出false，或者也有朋友会说都会输出true。这里注意“==”和“equal”的区别：</p><table><thead><tr><th>基本类型</th><th>==</th><th>equals</th></tr></thead><tbody><tr><td>字符串变量</td><td>对象在内存中的首地址</td><td>字符串内容</td></tr><tr><td>非字符串变量</td><td>对象在内存中的首地址</td><td>对象在内存中的首地址</td></tr><tr><td>基本类型</td><td>值</td><td>不可用</td></tr><tr><td>包装类</td><td>地址</td><td>内容</td></tr></tbody></table><p>结果：<br>true<br>false</p><p>为什么会出现这样的结果？输出结果表明 i1 和 i2 指向的是同一个对象，而 i3 和 i4 指向的是不同的对象。此时只需一看源码便知究竟，下面这段代码是Integer的<code>valueOf</code>方法的具体实现：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public static Integer valueOf(int i) &#123;</span><br><span class="line">        if(i &gt;= -128 &amp;&amp; i &lt;= IntegerCache.high)</span><br><span class="line">            return IntegerCache.cache[i + 128];</span><br><span class="line">        else</span><br><span class="line">            return new Integer(i);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>从这2段代码可以看出，在通过valueOf方法创建Integer对象的时候，如果数值在 [-128,127] 之间，便返回指向IntegerCache.cache中已经存在的对象的引用；否则创建一个新的Integer对象。</p><p>上面的代码中 i1 和 i2 的数值为100，因此会直接从cache中取已经存在的对象，所以 i1 和 i2 指向的是同一个对象，而 i3 和 i4 则是分别指向不同的对象。</p><ul><li>下面这段代码的输出结果是什么？</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">public class Main &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        Double i1 = 100.0;</span><br><span class="line">        Double i2 = 100.0;</span><br><span class="line">        Double i3 = 200.0;</span><br><span class="line">        Double i4 = 200.0;</span><br><span class="line">        </span><br><span class="line">        System.out.println(i1==i2);</span><br><span class="line">        System.out.println(i3==i4);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也许有的朋友会认为跟上面一道题目的输出结果相同，但是事实上却不是。实际输出结果为：<br>false<br>false<br>至于具体为什么，读者可以去查看Double类的<code>valueOf</code>的实现。</p><p>在这里只解释一下为什么Double类的valueOf方法会采用与Integer类的valueOf方法不同的实现。很简单：在某个范围内的整型数值的个数是有限的，而浮点数却不是。</p><p>注意，Integer、Short、Byte、Character、Long这几个类的valueOf方法的实现是类似的，Double、Float的valueOf方法的实现是类似的。</p><ul><li>下面这段代码的输出结果是什么？</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">public class Main &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        Boolean i1 = false;</span><br><span class="line">        Boolean i2 = false;</span><br><span class="line">        Boolean i3 = true;</span><br><span class="line">        Boolean i4 = true;</span><br><span class="line">         </span><br><span class="line">        System.out.println(i1==i2);</span><br><span class="line">        System.out.println(i3==i4);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果为：<br>true<br>true<br>至于为什么是这个结果，同样地，看了Boolean类的源码也会一目了然。下面是Boolean的valueOf方法的具体实现：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public static Boolean valueOf(boolean b) &#123;</span><br><span class="line">        return (b ? TRUE : FALSE);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>至于TRUE和FALSE的定义：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">     * The &#123;@code Boolean&#125; object corresponding to the primitive</span><br><span class="line">     * value &#123;@code true&#125;.</span><br><span class="line">     */</span><br><span class="line">    public static final Boolean TRUE = new Boolean(true);</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * The &#123;@code Boolean&#125; object corresponding to the primitive</span><br><span class="line">     * value &#123;@code false&#125;.</span><br><span class="line">     */</span><br><span class="line">    public static final Boolean FALSE = new Boolean(false);</span><br></pre></td></tr></table></figure><ul><li>谈谈Integer i = new Integer(xxx)和Integer i =xxx;这两种方式的区别。<br>当然，这个题目属于比较宽泛类型的。但是要点一定要答上，我总结一下主要有以下这两点区别：</li></ul><p>1）第一种方式不会触发自动装箱的过程；而第二种方式会触发；</p><p>2）在执行效率和资源占用上的区别。第二种方式的执行效率和资源占用在一般性情况下要优于第一种情况（注意这并不是绝对的）。</p><ul><li>下面这段代码的输出结果是什么？</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">public class Main &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        Integer a = 1;</span><br><span class="line">        Integer b = 2;</span><br><span class="line">        Integer c = 3;</span><br><span class="line">        Integer d = 3;</span><br><span class="line">        Integer e = 321;</span><br><span class="line">        Integer f = 321;</span><br><span class="line">        Long g = 3L;</span><br><span class="line">        Long h = 2L;</span><br><span class="line">         </span><br><span class="line">        System.out.println(c==d);</span><br><span class="line">        System.out.println(e==f);</span><br><span class="line">        System.out.println(c==(a+b));</span><br><span class="line">        System.out.println(c.equals(a+b));</span><br><span class="line">        System.out.println(g==(a+b));</span><br><span class="line">        System.out.println(g.equals(a+b));</span><br><span class="line">        System.out.println(g.equals(a+h));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>先别看输出结果，读者自己想一下这段代码的输出结果是什么。这里面需要注意的是：当 “==” 运算符的两个操作数都是 包装器类型的引用，则是比较指向的是否是同一个对象，而如果其中有一个操作数是表达式（即包含算术运算）则比较的是数值（即会触发自动拆箱的过程）。另外，对于包装器类型，equals方法并不会进行类型转换。明白了这2点之后，上面的输出结果便一目了然：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">true</span><br><span class="line">false</span><br><span class="line">true</span><br><span class="line">true</span><br><span class="line">true</span><br><span class="line">false</span><br><span class="line">true</span><br></pre></td></tr></table></figure><p>第一个和第二个输出结果没有什么疑问。第三句由于 a+b 包含了算术运算，因此会触发自动拆箱过程（会调用intValue方法），因此它们比较的是数值是否相等。<br>而对于c.equals(a+b)会先触发自动拆箱过程，再触发自动装箱过程，也就是说a+b，会先各自调用intValue方法，得到了加法运算后的数值之后，便调用Integer.valueOf方法，再进行equals比较。<br>同理对于后面的也是这样，不过要注意倒数第二个和最后一个输出的结果（如果数值是int类型的，装箱过程调用的是Integer.valueOf；如果是long类型的，装箱调用的Long.valueOf方法）。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Java 对象的创建、引用、比较与销毁</title>
      <link href="/2019/01/08/Java-%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%88%9B%E5%BB%BA%E3%80%81%E5%BC%95%E7%94%A8%E3%80%81%E6%AF%94%E8%BE%83%E4%B8%8E%E9%94%80%E6%AF%81/"/>
      <url>/2019/01/08/Java-%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%88%9B%E5%BB%BA%E3%80%81%E5%BC%95%E7%94%A8%E3%80%81%E6%AF%94%E8%BE%83%E4%B8%8E%E9%94%80%E6%AF%81/</url>
      
        <content type="html"><![CDATA[<p>Java 是一门面向对象的程序设计语言，对象是由类抽象出来的，所有的问题都通过对象来处理，对象可以操作类的属性和方法解决相应的问题。，所以了解对象的产生、操作和消亡是十分必要的。</p><h3 id="对象的创建"><a href="#对象的创建" class="headerlink" title="对象的创建"></a>对象的创建</h3><p>对象可以认为是在一类事物中抽象某一个特例可以通过这个特例来处理这类事物出现的问题。在 Java 语言中通过 new 操作符来创建对象。 准确地说可以在 java 语言中使用 new 操作符调用构造方法创建对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Test test = <span class="keyword">new</span> Test();</span><br><span class="line">Test test = <span class="keyword">new</span> test(<span class="string">"a"</span>);</span><br></pre></td></tr></table></figure><h3 id="访问对象的属性和行为"><a href="#访问对象的属性和行为" class="headerlink" title="访问对象的属性和行为"></a>访问对象的属性和行为</h3><p>用户使用 new 操作符创建一个对象后，可以使用 “对象.类成员”来获取对象的属性和行为。对象的属性和行为在类中是通过类成员变量和成员方法的形式来表示的，所以当对象获取类成员时，也相应地获取了兑现的属性和行为。</p><p><strong>例子：展示对象是如何调用类成员的</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TransferProperty</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i  = <span class="number">47</span>;    <span class="comment">//定义成员变量</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">class</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"调用 call 方法"</span>);</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;<span class="number">3</span>; i++)&#123;</span><br><span class="line">            System.out.println(i + <span class="string">""</span>);</span><br><span class="line">            <span class="keyword">if</span> ( i == <span class="number">2</span>)  &#123;</span><br><span class="line">                System.out.println(<span class="string">"\n"</span>);</span><br><span class="line">            )</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TransferProperty</span><span class="params">()</span> </span>&#123;&#125;<span class="comment">//定义构造方法</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        TransferProperty t1  = <span class="keyword">new</span> TransferProperty();  <span class="comment">//创建一个对象</span></span><br><span class="line">        TransferProperty t2 = <span class="keyword">new</span> TransferProperty();   <span class="comment">//创建另一个对象</span></span><br><span class="line">        t2.i = <span class="number">60</span>;  <span class="comment">//将类成员变量赋值为 60</span></span><br><span class="line">        <span class="comment">//使用第一个对象调用类成员变量</span></span><br><span class="line">        System.out.println(<span class="string">"第一个实例对象调用变量 i 的结果："</span>+ t1.i++);</span><br><span class="line">        t1.call();</span><br><span class="line">        <span class="comment">//使用第二个兑现调用类成员变量</span></span><br><span class="line">        System.out.println(<span class="string">"第二个实例对象调用变量 i 的结果："</span>+t2.i);</span><br><span class="line">        t2.call();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="对象的引用"><a href="#对象的引用" class="headerlink" title="对象的引用"></a>对象的引用</h3><p>在 Java 语言中尽管一切都可以看做对象，但真正操作标识符实质上是一个引用，那么引用在 Java 中应该如何体现？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">类名 对象引用名称</span><br></pre></td></tr></table></figure><p>如一个 Book 类的引用可以使用一下代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Book book;</span><br></pre></td></tr></table></figure></p><p>通常一个引用不一定需要有一个对象相关联。引用于对象相关联的语法如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Book book = <span class="keyword">new</span> Book();</span><br></pre></td></tr></table></figure></p><h3 id="对象的比较"><a href="#对象的比较" class="headerlink" title="对象的比较"></a>对象的比较</h3><p>在 Java 语言中有两种对象的比较方式，分别为“==”运算符和 equals() 方法。实质上这两种方式有着本质的区别。</p><p><strong>说明 == 和 equals 方法的区别</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Compare</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String c1 = <span class="keyword">new</span> String(<span class="string">"abc"</span>);</span><br><span class="line">        String c2 = <span class="keyword">new</span> String(<span class="string">"abc"</span>);</span><br><span class="line">        String c3 = c1 ;</span><br><span class="line">        <span class="comment">//使用“==”运算符比较 c2 和 c3</span></span><br><span class="line">        System,out.println(<span class="string">"c2==c3的运算结果为："</span>+(c2 == c3));</span><br><span class="line">        <span class="comment">//使用 </span></span><br><span class="line">            </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="对象的销毁"><a href="#对象的销毁" class="headerlink" title="对象的销毁"></a>对象的销毁</h3><p>每个对象都有生命周期，当对象的生命周期结束时，分配给该对象的内存地址将会被回收。在其他语言中需要手动回收废弃的对象，但是 Java 拥有一套完整的垃圾回收机制，用户不必担心废弃的对象占用内存，垃圾回收期将回收无用的但占用内存的资源。</p><p>在谈到垃圾回收机制之前，首先需要了解何种对象会被Java虚拟机视为垃圾。主要包括以下两种情况。</p><ul><li>对象引用超过其作用范围，这个对象将被视为垃圾。</li><li>将对象赋值为 null</li></ul><p>虽然垃圾回收机制已经很完善，但垃圾回收期只能回收那些由 new 操作符创建的对象。如果某些对象不是通过 new 操作符在内存中获取一块内存区域，这种对象可能不能被垃圾回收机制所识别，所以在 Java 中提供了一个 finalize() 方法。</p><p>这个方法是 Object 类的方法，它被声明为 protected，用户可以在自己的类中定义这个方法。如果用户在类中定义了 finalize() 方法，在垃圾回收时会搜狐先调用该方法，在下一次垃圾回收动作发生时，才能真正回收被对象占用的内存。</p><p><strong>有一点需要明确的是，垃圾回收 或 finalize() 方法不保证一定会发生，如 Java 虚拟机内存损耗殆尽时，它是不会执行垃圾回收的。</strong> </p>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Java 类的主方法</title>
      <link href="/2019/01/08/Java-%E7%B1%BB%E7%9A%84%E4%B8%BB%E6%96%B9%E6%B3%95/"/>
      <url>/2019/01/08/Java-%E7%B1%BB%E7%9A%84%E4%B8%BB%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>主方法是类的入口点，它定义了程序从何处开始；主方法提供对程序流向的控制，Java 编译器通过主方法来执行程序。主方法的语法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//方法体</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在主方法的定义中可以看到其具有以下特性：</p><ul><li>主方法是静态的，所以如要直接在主方法中调用其他方法，则该方法必须也是静态的。</li><li>主方法没有返回值</li><li>主方法的形参为数组。其中 args[0] ~ args[n]分别代表程序的第一个参数到第n个参数，可以使用 args.length 获取参数的个数。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestMain</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;args.length; i++) &#123;  <span class="comment">//根据参数个数做循环操作</span></span><br><span class="line">            System.out.println(args[i]);    <span class="comment">//循环打印参数内容</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Java 静态变量、常量与方法</title>
      <link href="/2019/01/01/Java-%E9%9D%99%E6%80%81%E5%8F%98%E9%87%8F%E3%80%81%E5%B8%B8%E9%87%8F%E4%B8%8E%E6%96%B9%E6%B3%95/"/>
      <url>/2019/01/01/Java-%E9%9D%99%E6%80%81%E5%8F%98%E9%87%8F%E3%80%81%E5%B8%B8%E9%87%8F%E4%B8%8E%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>由 static 修饰的变量、常量和方法被称做静态变量、常量和方法。</p><p>有时，在处理问题时会需要两个类在同一个内存区域共享一个数据。例如，在球类中使用 PI 这个常量，可能出了本类需要这个常量之外，在另外一个圆类中也需要使用这个常量。这时没有必要在两个类中同时创建 PI 常量，因为这样系统会将这两个不在同一个类中定义的常量分配到不同的内存空间中。为了解决这个问题，可以将这个常量设置为静态的。</p><p>被声明为 static 的变量、常量和方法被称为静态成员。静态成员属于类所有，区别于个别对象，可以在本类或其他类使用类名和 “.” 运算符调用静态成员。</p><h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StaticTest</span></span>&#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">double</span> PI = <span class="number">3.1415</span>;    <span class="comment">//在类中定义静态常量</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> id;      <span class="comment">//在类中定义静态变量</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method1</span><span class="params">()</span></span>&#123;   <span class="comment">//在类中定义静态方法</span></span><br><span class="line">        <span class="comment">//do something</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(StaticTest.PI);  <span class="comment">//调用静态常量</span></span><br><span class="line">        System.out.println(StaticTest.id);  <span class="comment">//调用静态变量</span></span><br><span class="line">        StaticTest.method1();   <span class="comment">//调用静态方法</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>在 Java 中规定不能讲方法体内的局部变量声明为 static 的。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">example</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span>    </span>&#123;</span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">int</span> i = <span class="number">0</span>;   <span class="comment">//这句是错误的。</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="技巧"><a href="#技巧" class="headerlink" title="技巧"></a>技巧</h3><p>如果在执行类时，希望先执行类的初始化操作，可以使用 static 定义一个静态区域。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">example</span></span>&#123;</span><br><span class="line">    <span class="keyword">static</span>&#123;</span><br><span class="line">        <span class="comment">//some</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Java 类构造方法</title>
      <link href="/2019/01/01/Java-%E7%B1%BB%E6%9E%84%E9%80%A0%E6%96%B9%E6%B3%95/"/>
      <url>/2019/01/01/Java-%E7%B1%BB%E6%9E%84%E9%80%A0%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>在 类 中除了成员方法之外，还存在一种特殊类型的方法，那就是构造方法。构造方法是一个与类同名的方法，对象的创建就是通过构造方法完成的。每当类实例化一个对象时，类都会自动覅用构造方法。</p><p>构造方法的特点如下：</p><ul><li>构造方法没有返回值</li><li>构造方法的名称要与本类的名称相同</li></ul><blockquote><p>在定义构造方法时，构造方法没有返回值，但这与普通美哦与返回值的方法不同，普通没有返回值的方法使用 public void methodEx() 这种形式进行定义，但构造方法并不需要使用 void 关键字进行修饰。</p></blockquote><p>构造方法的定义语法格式如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">book</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ...<span class="comment">//构造方法体</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AnyThting</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AnyThting</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(<span class="string">"this 调用有参构造方法"</span>);</span><br><span class="line">        System.out.println(<span class="string">"无参构造方法"</span>)；</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AnyThting</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"有参构造方法"</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h3><h4 id="下面哪个选项的说法是正确的？"><a href="#下面哪个选项的说法是正确的？" class="headerlink" title="下面哪个选项的说法是正确的？"></a>下面哪个选项的说法是正确的？</h4><p>A. 构造函数不能被重载<br>B. 构造函数不能被覆盖<br>C. 一个构造函数可以返回一个私有的或一个对象的引用<br>D. 构造函数代码执行时是从当前的类层级到它祖先的类</p><p><strong>解析：</strong><br>重载构造函数是一个主要的技术，可以允许多种方式初始化一个类。<br>通过定义，构造函数是没有返回值的。所以选项C是错误的，这种说法并没有任何意义。<br>选项D中构造函数代码的执行是从它最老的祖先类开始向下执行调用。可以写一个继承一个基类的类来测试，当创建一个子类的时候，会发现它的祖先类的构造函数先被调用。<br><strong>答案：</strong> B</p><h4 id="下列有关派生类调用父类构造函数的描述中正确的是哪个？"><a href="#下列有关派生类调用父类构造函数的描述中正确的是哪个？" class="headerlink" title="下列有关派生类调用父类构造函数的描述中正确的是哪个？"></a>下列有关派生类调用父类构造函数的描述中正确的是哪个？</h4><p>A.派生类定义了自己的构造函数，就不会调用父类的构造函数<br>B.派生类必须通过super调用父类的含有参数的构造函数<br>C.派生类将会继承父类中所有的构造函数<br>D.创建派生类对象时，先调用派生类自己的构造函数，然后调用父类的构造函数</p><p><strong>解析：</strong><br>派生类被构造时一定会先调用父类的构造函数，排除选项A、D。<br>你可以选择调用哪个构造函数，可以决定调用哪一个，但不能都不调用（至少必选一个），排除选项C。<br>若不指定，就会调用无参数的构造函数，以下代码调用的是无参构造函数，得到 <code>A without any parameter B with a parameter</code>的结果。代码如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">A</span><span class="params">()</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">  System.out.println(<span class="string">"A without any parameter  "</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">A</span><span class="params">(<span class="keyword">int</span> i)</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">  System.out.println(<span class="string">"A with a parameter"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">B</span><span class="params">()</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">  System.out.println(<span class="string">"B without any parameters.  "</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">B</span> <span class="params">(<span class="keyword">int</span> i)</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">  System.out.println(<span class="string">"B with a parameter"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">  B a =<span class="keyword">new</span> B(<span class="number">100</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>如果选定调用A(int i)，则会得到A with a parameter B with a parameter的结果，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">A</span><span class="params">()</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">  System.out.println(<span class="string">"A without any parameter  "</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">A</span><span class="params">(<span class="keyword">int</span> i)</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">  System.out.println(<span class="string">"A with a parameter"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">B</span><span class="params">()</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">  System.out.println(<span class="string">"B without any parameters.  "</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">B</span> <span class="params">(<span class="keyword">int</span> i)</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">  <span class="keyword">super</span>(i);</span><br><span class="line">  System.out.println(<span class="string">"B with a parameter"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">  B a =<span class="keyword">new</span> B(<span class="number">100</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>答案：</strong> B</p>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Java this 和 super 关键字</title>
      <link href="/2019/01/01/Java-this-%E5%92%8C-super-%E5%85%B3%E9%94%AE%E5%AD%97/"/>
      <url>/2019/01/01/Java-this-%E5%92%8C-super-%E5%85%B3%E9%94%AE%E5%AD%97/</url>
      
        <content type="html"><![CDATA[<p>本文大致介绍了 java 中的两个关键字，它们分别是 this 和 super。</p><h3 id="this-关键字"><a href="#this-关键字" class="headerlink" title="this 关键字"></a>this 关键字</h3><p>this 是指向对象本身的一个指针。this 只能在类中的非静态方法中使用，静态方法 和静态代码中绝对不能出现 this 关键字。</p><h4 id="调用本类的构造方法"><a href="#调用本类的构造方法" class="headerlink" title="调用本类的构造方法"></a>调用本类的构造方法</h4><p>仅仅在类的构造函数中调用本类的其他构造函数。用法是 <code>this(参数列表)</code>,这一句必须处于构造函数的第一句，同时一个构造函数内部只能调用另一个构造函数。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> string name;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">A</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.print(<span class="string">"无参数构造函数！"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">A</span><span class="params">(<span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">        System.out.print(b);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">A</span><span class="params">(String s)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(<span class="number">1</span>);<span class="comment">//调用参数为int型的构造函数</span></span><br><span class="line">        name = s;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="表示类中属性和方法"><a href="#表示类中属性和方法" class="headerlink" title="表示类中属性和方法"></a>表示类中属性和方法</h4><p>用this来访问类中的属性和方法。比如函数参数或者参数中的局部变量和成员变量同名的情况下，成员变量被屏蔽，此时要访问成员变量则需要用”this.成员变量名”来访问成员变量。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> x = <span class="number">1</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">out</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> x = <span class="number">2</span>;</span><br><span class="line">        System.out.print(x);<span class="comment">//打印2</span></span><br><span class="line">        System.out.print(<span class="keyword">this</span>.x);<span class="comment">//打印1</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="表示当前对象"><a href="#表示当前对象" class="headerlink" title="表示当前对象"></a>表示当前对象</h4><p>在函数中，需要引用该函数所属类的当前对象时候，直接使用this。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        C c1 = <span class="keyword">new</span> C();</span><br><span class="line">        c1.tell();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">tell</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.print(<span class="keyword">this</span>);<span class="comment">//打印当前对象的字符串表示</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="匿名类和内部类"><a href="#匿名类和内部类" class="headerlink" title="匿名类和内部类"></a>匿名类和内部类</h4><p>在匿名类或者内部类中用this时，这个this指的是匿名类或内部类本身。这是如果我们要使用外部类的方法和变量的话，则应该加上外部类的类名。</p><p><strong>例子</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hello</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Hello</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Thread thread = <span class="keyword">new</span> Thread()&#123;<span class="comment">//匿名类</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">                Hello.<span class="keyword">this</span>.run();<span class="comment">//调用外部类的方法</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;<span class="comment">//这里有分号</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="super-关键字"><a href="#super-关键字" class="headerlink" title="super 关键字"></a>super 关键字</h3><blockquote><p>super关键和this作用类似，是使被屏蔽的成员变量或者成员方法变为可见，或者说用来引用被屏蔽的成员变量和成员成员方法。不过super是用在子类中，目的是访问直接父类中被屏蔽的成员，注意是直接父类（就是类之上最近的超类）。</p></blockquote><h4 id="在子类构造方法中调用父类的构造方法"><a href="#在子类构造方法中调用父类的构造方法" class="headerlink" title="在子类构造方法中调用父类的构造方法"></a>在子类构造方法中调用父类的构造方法</h4><p>用super(参数列表)的方式调用，参数不是必须的。同时，还要注意super(参数列表)这条语句只能在子类构造方法中的第一行 。</p><p><strong>例子</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">A</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.print(<span class="string">"A"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">B</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();<span class="comment">//调用父类构造方法，打印A</span></span><br><span class="line">        System.out.print(<span class="string">"B"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="访问父类中被覆盖的同名变量或者方法"><a href="#访问父类中被覆盖的同名变量或者方法" class="headerlink" title="访问父类中被覆盖的同名变量或者方法"></a>访问父类中被覆盖的同名变量或者方法</h4><p>当子类方法中的局部变量或者子类的成员变量与父类成员变量同名时，也就是子类变量覆盖同名父类变量时，可以使用super.成员变量名引用父类成员变量。同时，若子类的成员方法覆盖了父类的成员方法时，也可以使用super.方法名(参数列表)的方式访问父类的方法。</p><p><strong>例子</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> a = <span class="number">1</span>;<span class="comment">//可以直接赋值，不用通过构造函数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">say</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.print(a);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> a = <span class="number">2</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">say</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.print(<span class="keyword">super</span>.a);<span class="comment">//访问父类的a变量，前提是父类的a变量是公有的</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">tell</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.say();<span class="comment">//调用父类的say()方法而不是子类的say()方法</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Java 局部变量以及它的有效范围</title>
      <link href="/2019/01/01/Java-%E5%B1%80%E9%83%A8%E5%8F%98%E9%87%8F%E4%BB%A5%E5%8F%8A%E5%AE%83%E7%9A%84%E6%9C%89%E6%95%88%E8%8C%83%E5%9B%B4/"/>
      <url>/2019/01/01/Java-%E5%B1%80%E9%83%A8%E5%8F%98%E9%87%8F%E4%BB%A5%E5%8F%8A%E5%AE%83%E7%9A%84%E6%9C%89%E6%95%88%E8%8C%83%E5%9B%B4/</url>
      
        <content type="html"><![CDATA[<p>局部变量是在方法被执行时创建，在方法执行结束时被销毁。局部变量在使用时必须进行赋值操作或被初始化，否则会出现编译错误。</p><h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> id = <span class="number">0</span> ;    <span class="comment">//局部变量</span></span><br><span class="line">    setName(<span class="string">"Java"</span>);</span><br><span class="line">    <span class="keyword">return</span> id + <span class="keyword">this</span>.name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果将 id 这个局部变量的初始值去掉，编译器将出现错误。</p><h3 id="局部变量的有效范围"><a href="#局部变量的有效范围" class="headerlink" title="局部变量的有效范围"></a>局部变量的有效范围</h3><p>可以将局部变量的有效范围称为变量的作用域，局部变量的有效范围从该变量的声明开始到该变量的结束为止。</p><p><strong>在作用范围外使用局部变量是一个常见的错误，因为在作用域外没有声明局部变量的代码</strong> </p>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Java 修饰符</title>
      <link href="/2019/01/01/Java-%E4%BF%AE%E9%A5%B0%E7%AC%A6/"/>
      <url>/2019/01/01/Java-%E4%BF%AE%E9%A5%B0%E7%AC%A6/</url>
      
        <content type="html"><![CDATA[<p>Java 语言提供了很多修饰符，主要分为以下两类：</p><ul><li>访问修饰符</li><li>非访问修饰符</li></ul><h3 id="访问修饰符"><a href="#访问修饰符" class="headerlink" title="访问修饰符"></a>访问修饰符</h3><p>在 Java 中有以下四种访问修饰符。</p><ul><li><code>public</code></li><li><code>protected</code></li><li><code>default</code></li><li><code>private</code></li></ul><h4 id="public-公有访问修饰符"><a href="#public-公有访问修饰符" class="headerlink" title="public - 公有访问修饰符"></a><code>public</code> - 公有访问修饰符</h4><p>被声明为 public 的类、方法、构造方法和接口能够被任何其他类访问。</p><p>如果几个相互访问的 public 类分布在不同的包中，则需要导入相应 public 类所在的包。</p><p>由于类的继承性，类所有的公有方法和变量都能被其子类继承。</p><p>以下函数使用了公有访问控制：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] arguments)</span> </span>&#123;</span><br><span class="line"><span class="comment">// ... </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>java 程序的 <code>main()</code> 方法必须设置成公有的，否则 java 解释器将不能运行该类。</p><h4 id="protected-受保护的访问修饰符"><a href="#protected-受保护的访问修饰符" class="headerlink" title="protected - 受保护的访问修饰符"></a><code>protected</code> - 受保护的访问修饰符</h4><p><code>protected</code> 需要从以下两个点来分析说明</p><ul><li><p>子类与基类在同一包中：被声明为 <code>protected</code> 的变量、方法和构造器能被同一个包中的任何其他类访问。</p></li><li><p>子类与基类不在同一包中：子类实例可以访问其从基类继承而来的 <code>protected</code> 方法，而不能访问基类实例的 <code>protected</code> 方法。</p></li></ul><p><code>protected</code> 可以修饰数据成员、构造方法、方法成员，<strong>不能修饰类（内部类除外）</strong></p><p><strong>接口以及接口的成员变量和成员方法不能声明为 <code>protected</code></strong></p><h4 id="默认访问修饰符-不使用关键字"><a href="#默认访问修饰符-不使用关键字" class="headerlink" title="默认访问修饰符 - 不使用关键字"></a>默认访问修饰符 - 不使用关键字</h4><p>使用默认访问修饰符声明的变量和方法，对同一个包的类是可见的。</p><p>接口里的变量都隐式声明为 <code>public static final</code> ，而接口里的方法默认情况下访问权限为 <code>public</code>.</p><h4 id="private-私有访问修饰符"><a href="#private-私有访问修饰符" class="headerlink" title="private - 私有访问修饰符"></a><code>private</code> - 私有访问修饰符</h4><p>私有访问修饰符是最严格的访问级别，被声明为 private 的方法、变量和构造方法只能被所属类访问，并且类和接口不能声明为 private。</p><p>声明为私有访问类型的变量只能通过类中公共的 getter 方法被外部类访问。</p><p>Private 访问修饰符的使用主要用来隐藏类的实现细节和保护类的数据。</p><h4 id="访问控制和继承"><a href="#访问控制和继承" class="headerlink" title="访问控制和继承"></a>访问控制和继承</h4><p>方法继承规则：</p><ul><li>父类中声明为 public 的方法在子类中也必须为 public。</li><li>父类中声明为 protected 的方法在子类中要么声明为 protected，要么声明为 public，不能声明为 private。</li><li>父类中声明为 private 的方法，不能够被继承。</li></ul><h3 id="非访问修饰符"><a href="#非访问修饰符" class="headerlink" title="非访问修饰符"></a>非访问修饰符</h3><p>为了实现一些其他的功能， java 也提供了许多非访问修饰符。</p><ul><li><code>static</code> 修饰符</li><li><code>final</code> 修饰符</li><li><code>abstract</code> 修饰符</li><li><code>synchronized</code> 修饰符</li><li><code>volatile</code> 修饰符</li><li>….</li></ul><h4 id="static-修饰符"><a href="#static-修饰符" class="headerlink" title="static 修饰符"></a><code>static</code> 修饰符</h4><ul><li>静态变量：<br>  static 关键字用来声明独立于对象的静态变量，无论一个类实例化多少对象，它的静态变量只有一份拷贝。静态变量也被称为类变量。局部变量不能被声明为 static 变量</li><li>静态方法<br>  static 关键字用来声明独立于对象的静态方法。静态方法不能使用类的非静态变量。</li></ul><h4 id="final-修饰符"><a href="#final-修饰符" class="headerlink" title="final 修饰符"></a>final 修饰符</h4><ul><li>final 变量：<br>  变量一旦赋值后，不能被重新赋值。被 final 修饰的实例变量必须显式指定初始值。</li><li>final 方法：<br>  类中的 final 方法可以被子类继承，但是不能被子类修改。<br>  声明 final 方法的主要目的是防止该方法的内容被修改。</li><li>final 类：<br>  final 类不能被继承，没有类能够继承 final 类的任何特性。</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Android 简介</title>
      <link href="/2018/10/28/Android-%E7%AE%80%E4%BB%8B/"/>
      <url>/2018/10/28/Android-%E7%AE%80%E4%BB%8B/</url>
      
        <content type="html"><![CDATA[<p>Android 从面世以来到现在已经发布了二十几个版本了。在这几年的发展过程中，谷歌为Android 王国建立了一个完整的生态系统。手机厂商、开发者、用户之间相互依存，共同推进着Android的蓬勃发展。</p><h3 id="Android-系统架构"><a href="#Android-系统架构" class="headerlink" title="Android 系统架构"></a>Android 系统架构</h3><p>为了更好的理解 Android 系统是怎么工作的，我们先来看一下它的系统架构。Android 大致可以分为四层架构：Linux 内核层、系统运行库层、应用框架层和应用层。</p><h4 id="Linux-内核层"><a href="#Linux-内核层" class="headerlink" title="Linux 内核层"></a>Linux 内核层</h4><p>Android 系统是基于 Linux内核的，这一层为 Android 设备的各种硬件提供了底层的驱动，如显示驱动、音频驱动、照相机驱动、蓝牙驱动、Wi-Fi驱动、电源管理等。</p><h4 id="系统运行库层"><a href="#系统运行库层" class="headerlink" title="系统运行库层"></a>系统运行库层</h4><p>这一层通过一些 C/C++ 库来为 Android 系统提供了主要的特性支持。如SQLite 库提供了数据库的支持，OpenGL/ES 库提供了 3D 绘图的支持，WebKit 库提供了浏览器内核的支持等。</p><p>同样在这一层还有 Android 运行时库，它主要提供了一些核心库，能够允许开发者使用 Java 语言来编写 Android 应用。另外，Android 运行时库中还包含了 Dalvik 虚拟机（5.0 系统之后改为 ART 运行环境），它使得每一个 Android 应用都能运行在独立的进程当中，并且拥有一个自己的 Dalvik 虚拟机实例。相较于 Java 虚拟机，Dalvik 时专门为移动设备定制的，它针对手机内存、CPU性能有限等情况做了优化处理。</p><h4 id="应用框架层"><a href="#应用框架层" class="headerlink" title="应用框架层"></a>应用框架层</h4><p>这一层主要提供了构建应用程序时可能用到的各种 API， Android 自带的一些核心应用就是使用这些 APi 完成的，开发者也可以通过使用这些 API 来构建自己的应用城固县。</p><h4 id="应用层"><a href="#应用层" class="headerlink" title="应用层"></a>应用层</h4><p>所有安装在手机上的应用程序都是属于这一层的，比如系统自带的联系人、短信等程序，或者是你从 GooGle Play 上下载的小游戏，当然还包括你自己开发的程序等。</p><h3 id="Android-已发布的版本"><a href="#Android-已发布的版本" class="headerlink" title="Android 已发布的版本"></a>Android 已发布的版本</h3><p>2008 年 9 月，谷歌正式发布了 Android 1.0 系统，这也是 Android 系统最早的版本。随后的几年，谷歌以惊人的速度不断地更新 Android 系统。<br>具体如下图所示：</p><p>数据来源：<a href="https://developer.android.com/about/dashboards/" target="_blank" rel="noopener">戳我</a></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/2018-10-28/2.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h3 id="Android-应用开发特色"><a href="#Android-应用开发特色" class="headerlink" title="Android 应用开发特色"></a>Android 应用开发特色</h3><ul><li>四大组件：活动（Activity）、服务（Service）、广播接收器（Broadcast Receiver）和内容提供器（Content Provider）。</li><li>丰富的系统控件</li><li>SQLite 数据库</li><li>强大的多媒体</li><li>地理位置定位</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>HTML 简介</title>
      <link href="/2018/10/28/HTML-%E7%AE%80%E4%BB%8B/"/>
      <url>/2018/10/28/HTML-%E7%AE%80%E4%BB%8B/</url>
      
        <content type="html"><![CDATA[<p>超文本标记语言（HyperText Markup Language，简称：HTML）是一种用于创建网页的标准标记语言。<br>您可以使用 HTML 来建立自己的 WEB 站点， HTML 运行在浏览器上，由浏览器来解析。</p><h3 id="什么是-HTML-？"><a href="#什么是-HTML-？" class="headerlink" title="什么是 HTML ？"></a>什么是 HTML ？</h3><p>HTML 是用来描述网页的一种语言。</p><ul><li>HTML 指的是超文本标记语言：HyperText Markup Language</li><li>HTML 不是一种编程语言，而是一种标记语言。</li><li>标记语言是一套标记标签（Markup tag）</li><li>HTML 使用标记标签来描网页。</li><li>HTML 文档包含了 HTML 标签以及文本内容</li><li>HTMl 文档也叫做 WEB 页面</li></ul><h3 id="HTML-标签"><a href="#HTML-标签" class="headerlink" title="HTML 标签"></a>HTML 标签</h3><p>HTML 标记标签通常被称为 HTML 标签（HTML tag）</p><ul><li>HTML 标签是由尖括号包围的关键词，比如 <code>&lt;html&gt;</code></li><li>HTML 标签通常是成队出现的，比如 <code>&lt;b&gt;</code> 和 <code>&lt;/b&gt;</code></li><li>标签对中的第一个标签是开始标签，第二个标签是结束标签。</li><li>开始和结束标签也被称为开放标签和闭合标签</li></ul><h3 id="lt-DOCTYPE-gt-声明"><a href="#lt-DOCTYPE-gt-声明" class="headerlink" title="&lt;!DOCTYPE&gt; 声明"></a><code>&lt;!DOCTYPE&gt;</code> 声明</h3><p>&lt;!DOCTYPE&gt;声明有助于浏览器中正确显示网页。</p><p>网络上有很多不同的文件，如果能够正确声明HTML的版本，浏览器就能正确显示网页内容。</p><p>doctype 声明是不区分大小写的，以下方式均可：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span> </span><br><span class="line"><span class="meta">&lt;!DOCTYPE HTML&gt;</span> </span><br><span class="line"><span class="meta">&lt;!doctype html&gt;</span> </span><br><span class="line"><span class="meta">&lt;!Doctype Html&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Java 变量与常量</title>
      <link href="/2018/10/28/Java-%E5%8F%98%E9%87%8F%E4%B8%8E%E5%B8%B8%E9%87%8F/"/>
      <url>/2018/10/28/Java-%E5%8F%98%E9%87%8F%E4%B8%8E%E5%B8%B8%E9%87%8F/</url>
      
        <content type="html"><![CDATA[<p>在程序执行过程中，其值不能被改变的量称为常量，其值能被改变的量被称为变量。变量与常量的命名都必须使用合法的标识符。</p><h3 id="标识符和关键字"><a href="#标识符和关键字" class="headerlink" title="标识符和关键字"></a>标识符和关键字</h3><h4 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h4><p>标识符可以简单地理解为一个名字，用来标识类名、方法名、数组名、文件名的有效字符序列。</p><p><strong>Java 语言规定标识符由任意顺序的字母、下划线、美元符号和数字组成，并且第一个字符不能是数字。</strong><br><strong>标识符不能是 Java 中的保留字，并且在 Java 语言中的字母是严格区分大小写的。</strong></p><h4 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h4><p>关键字是 Java 语言中已经被赋予特定意义的一些单词，不可以把这些字作为标识符来使用。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/2018-10-28/1.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h3 id="声明变量"><a href="#声明变量" class="headerlink" title="声明变量"></a>声明变量</h3><p>变量饿使用是程序谁中一个十分重要的环；。定义变量就是要告诉编译器（compiler）这个变量的数据类型，这样编译器才知道许哟啊配置多少空间给它，以及它能够存储怎样的数据。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> age;</span><br><span class="line"><span class="keyword">char</span> char1 = <span class="string">'Y'</span>;</span><br></pre></td></tr></table></figure><p><strong>对变量的命名，应该遵循下面的规则</strong></p><ul><li>变量名必须是一个有效的标识符</li><li>变量名不能重复</li><li>变量名应该是有意义的</li></ul><p><em>注：在 Java 语言中是允许使用汉字或其他语言文字作为变量名，但不建议这样做。</em></p><h3 id="声明常量"><a href="#声明常量" class="headerlink" title="声明常量"></a>声明常量</h3><p>在程序运行过程中一直不会改变的量称为常量（constant），通常也称为 “final 变量”。常量在整个程序中通常只能被赋值一次。在为所有的对象共享值时，常量时非常有用的。</p><h4 id="声明常量的标准语言以及例子"><a href="#声明常量的标准语言以及例子" class="headerlink" title="声明常量的标准语言以及例子"></a>声明常量的标准语言以及例子</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> 数据类型 常量名称[=值];</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> <span class="keyword">double</span> p1 = <span class="number">3.1415926</span>;</span><br><span class="line"><span class="keyword">final</span> <span class="keyword">boolean</span> b1 = <span class="keyword">true</span>;</span><br></pre></td></tr></table></figure><h3 id="变量的有效范围"><a href="#变量的有效范围" class="headerlink" title="变量的有效范围"></a>变量的有效范围</h3><p>由于变量被定义出来后只是暂存在内存中，等到程序执行到某一个点，该变量会被释放掉，也就是说变量有它的生命周期。</p><p>按照变量的有效范围将变量分为成员变量和局部变量。</p><h4 id="成员变量"><a href="#成员变量" class="headerlink" title="成员变量"></a>成员变量</h4><p>在类体中定义的变量被称为成员变量，成员变量在整个类中都有效。类的成员变量又可以分为静态变量和实例变量。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">var</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x = <span class="number">45</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> y = <span class="number">90</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在成员变量的类型前面加上关键字 static 后，这样的变量就被称为静态变量。对于静态变量，除了能在定义它的类存取，还可以以“类名.静态变量”的方式在其他类中使用。</p><h4 id="局部变量"><a href="#局部变量" class="headerlink" title="局部变量"></a>局部变量</h4><p>在类的方体中定义的变量称为局部变量。布局变量只在当前代码块中有效。</p><p>在类的方法中声明的变量，包括方法的参数，都属于局部变量。局部变量的生命周期取决于方法，当单发被调用时，Java 虚拟机为方法中的局部变量分配内存空间，当该方法的调用结束后，则会释放方法中局部变量占用的内存空间，局部变量也将会销毁。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">val</span></span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> times = <span class="number">3</span>;<span class="comment">//定义成员变量</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> times = <span class="number">4</span>;<span class="comment">//定义局部变量</span></span><br><span class="line">        System.out.println(<span class="string">"Times 的值为："</span>+times);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Python 简介</title>
      <link href="/2018/10/28/Python-%E7%AE%80%E4%BB%8B/"/>
      <url>/2018/10/28/Python-%E7%AE%80%E4%BB%8B/</url>
      
        <content type="html"><![CDATA[<p>Python 是一个高层次的结合了解释性、编译性、互动性和面向对象的脚本语言。</p><p>Python 的设计具有很强的可读性，相比其他语言经常使用英文关键字，其他语言的一些标点符号，它具有比其他语言更有特色语法结构。</p><ul><li><strong>Python 是一种解释型语言：</strong> 这意味着开发过程中没有了编译这个环节。类似于PHP和Perl语言。</li><li><strong>Python 是交互式语言：</strong> 这意味着，您可以在一个Python提示符，直接互动执行写你的程序。</li><li><strong>Python 是面向对象语言:</strong> 这意味着Python支持面向对象的风格或代码封装在对象的编程技术。</li><li><strong>Python 是初学者的语言：</strong>Python 对初级程序员而言，是一种伟大的语言，它支持广泛的应用程序开发，从简单的文字处理到 WWW 浏览器再到游戏。</li></ul><hr><h3 id="Python-发展历史"><a href="#Python-发展历史" class="headerlink" title="Python 发展历史"></a>Python 发展历史</h3><p>Python 是由 Guido van Rossum 在八十年代末和九十年代初，在荷兰国家数学和计算机科学研究所设计出来的。</p><p>Python 本身也是由诸多其他语言发展而来的,这包括 ABC、Modula-3、C、C++、Algol-68、SmallTalk、Unix shell 和其他的脚本语言等等。</p><p>像 Perl 语言一样，Python 源代码同样遵循 GPL(GNU General Public License)协议。</p><p>现在 Python 是由一个核心开发团队在维护，Guido van Rossum 仍然占据着至关重要的作用，指导其进展。</p><hr><h3 id="Python-特点"><a href="#Python-特点" class="headerlink" title="Python 特点"></a>Python 特点</h3><ul><li><strong>1.易于学习：</strong>Python有相对较少的关键字，结构简单，和一个明确定义的语法，学习起来更加简单。</li><li><strong>2.易于阅读：</strong>Python代码定义的更清晰。</li><li><strong>3.易于维护：</strong>Python的成功在于它的源代码是相当容易维护的。</li><li><strong>4.一个广泛的标准库：</strong>Python的最大的优势之一是丰富的库，跨平台的，在UNIX，Windows和Macintosh兼容很好。</li><li><strong>5.互动模式：</strong>互动模式的支持，您可以从终端输入执行代码并获得结果的语言，互动的测试和调试代码片断。</li><li><strong>6.可移植：</strong>基于其开放源代码的特性，Python已经被移植（也就是使其工作）到许多平台。</li><li><strong>7.可扩展：</strong>如果你需要一段运行很快的关键代码，或者是想要编写一些不愿开放的算法，你可以使用C或C++完成那部分程序，然后从你的Python程序中调用。</li><li><strong>8.数据库：</strong>Python提供所有主要的商业数据库的接口。</li><li><strong>9.GUI编程：</strong>Python支持GUI可以创建和移植到许多系统调用。</li><li><strong>10.可嵌入:</strong> 你可以将Python嵌入到C/C++程序，让你的程序的用户获得”脚本化”的能力。</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Java 基本数据类型</title>
      <link href="/2018/10/26/Java-%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
      <url>/2018/10/26/Java-%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<p>在 Java 中有 8 种基本数据类型来存储数值、字符和布尔值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">数值型：</span><br><span class="line">    整数类型：<span class="keyword">byte</span>、<span class="keyword">short</span>、<span class="keyword">int</span>、<span class="keyword">long</span></span><br><span class="line">    浮点类型：<span class="keyword">float</span>、<span class="keyword">double</span></span><br><span class="line">字符型：<span class="keyword">char</span></span><br><span class="line">布尔型：<span class="keyword">boolean</span></span><br></pre></td></tr></table></figure><h3 id="整数类型"><a href="#整数类型" class="headerlink" title="整数类型"></a>整数类型</h3><p>整数类型用来存储整数数值，即没有小数部分的数值。可以是正数，也可以是负数。整数数据在<br>Java 程序中有 3 种表示方式，分别为 十进制、八进制和十六进制。</p><h4 id="十进制"><a href="#十进制" class="headerlink" title="十进制"></a>十进制</h4><p>十进制的表现形式是最常见的，如 120、0、-127.</p><p><em>注意：不能以 0 作为十进制数的开头（0 除外）</em></p><h4 id="八进制"><a href="#八进制" class="headerlink" title="八进制"></a>八进制</h4><p>如 0123（转换成十进制就是 83）、-0123（转换成十进制是 -83）。</p><p><em>注意：八进制必须以 0 开头</em></p><h4 id="十六进制"><a href="#十六进制" class="headerlink" title="十六进制"></a>十六进制</h4><p>如 0x25（转换成十进制数是 37）、0Xb1e（转换成十进制是 45086）</p><p><em>注意： 十六进制必须以 0X 或 0x 开头</em></p><p>整型数据根据它所占内存大小的不同，可分为 byte、short、int、long 4种类型，他们具有不同的取值范围，如下表所示。</p><table><thead><tr><th>数据类型</th><th>内存空间（8位=1字节）</th><th>取值范围</th></tr></thead><tbody><tr><td>byte</td><td>8位</td><td>-128～127</td></tr><tr><td>short</td><td>16位</td><td>-32768～32767</td></tr><tr><td>int</td><td>32位</td><td>-2147483648～2147483647</td></tr><tr><td>long</td><td>64位</td><td>-9223372036854775808～9223372036854775807</td></tr></tbody></table><p>下面以 int 型变量为例讲解整型变量的定义。</p><h4 id="定义-int-型变量，示例代码如下："><a href="#定义-int-型变量，示例代码如下：" class="headerlink" title="定义 int 型变量，示例代码如下："></a>定义 int 型变量，示例代码如下：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> x; <span class="comment">//定义 int 型变量 x</span></span><br><span class="line"><span class="keyword">int</span> x,y;<span class="comment">//定义 int 型变量 x、y</span></span><br><span class="line"><span class="keyword">int</span> x = <span class="number">450</span>, y = -<span class="number">463</span>; <span class="comment">//定义 int 型变量 x、y 并赋初值</span></span><br></pre></td></tr></table></figure><p><em>注意1：定义以上 4 种类型变量时，需要注意变量的取值范围，超出相应范围就会出错。</em><br><em>注意2: 对于 long 型数值，若赋的初值大于 int 型的最大值或小于 int 型的最小值，则需要在数值后加 L 或 l，表示该值是长整型，如 <code>long num = 2147483650L</code>。</em></p><h4 id="运算操作，输出和"><a href="#运算操作，输出和" class="headerlink" title="运算操作，输出和"></a>运算操作，输出和</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Number</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">byte</span> mybyte = <span class="number">124</span>;</span><br><span class="line">        <span class="keyword">short</span> myshort = <span class="number">32564</span>;</span><br><span class="line">        <span class="keyword">int</span> myint = <span class="number">45784612</span>;</span><br><span class="line">        <span class="keyword">long</span> mylong = <span class="number">4678951</span>;</span><br><span class="line">        <span class="keyword">long</span> result = mybyte + myshort + myint + mylong;</span><br><span class="line">        System.out.println(<span class="string">"结果为："</span>+ result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">程序运行结果为：</span><br><span class="line"></span><br><span class="line">结果为：<span class="number">92606751</span></span><br></pre></td></tr></table></figure><h3 id="浮点类型"><a href="#浮点类型" class="headerlink" title="浮点类型"></a>浮点类型</h3><p>浮点类型表示有小数部分的数字。Java 语言中浮点类型可分为单精度浮点类型（float）和双精度浮点型（double），它们具有不同的取值范围，如下表所示。</p><table><thead><tr><th>数据类型</th><th>内存空间（8位=1字节）</th><th>取值范围</th></tr></thead><tbody><tr><td>float</td><td>32位</td><td>1.4E-45～3.4028235E38</td></tr><tr><td>double</td><td>64位</td><td>4.9E-324～1.797693234862315E308</td></tr></tbody></table><p>在默认情况下，小数都被看作是 double 型，若使用 float 型小数，则需要在小数后面加上F或f。</p><h4 id="定义浮点类型变量，示例代码如下："><a href="#定义浮点类型变量，示例代码如下：" class="headerlink" title="定义浮点类型变量，示例代码如下："></a>定义浮点类型变量，示例代码如下：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">float</span> f1 = <span class="number">13.23f</span>;</span><br><span class="line"><span class="keyword">double</span> d1 = <span class="number">354.12</span>d;</span><br><span class="line"><span class="keyword">double</span> d2 = <span class="number">23456.2345</span>;</span><br></pre></td></tr></table></figure><h3 id="字符类型"><a href="#字符类型" class="headerlink" title="字符类型"></a>字符类型</h3><h4 id="char-型"><a href="#char-型" class="headerlink" title="char 型"></a>char 型</h4><p>字符类型（char）用于存储单个字符，占用 16 位（两个字节）的内存空间。在定义字符型变量时，要以单引号表示，如 <code>&#39;s&#39;</code> 表示一个字符，而 <code>&quot;s&quot;</code>则表示一个字符串。</p><p>使用 <code>char</code> 关键字可定义字符变量，下面举例说明。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> x = <span class="string">'a'</span>;</span><br><span class="line"></span><br><span class="line">注意：字符 a 在 unicode 表中的排序位置是 <span class="number">97</span> ，所以上面的语句等同于：</span><br><span class="line"><span class="keyword">char</span> x = <span class="number">97</span>;</span><br></pre></td></tr></table></figure><p>同 c 和 C++ 语言一样，Java 语言也可以把字符作为整数对待。由于unicode 编码采用无符号编码，可以存储 65536 个字符（0x0000 ～ 0xffff），所以 Java 中的字符几乎可以处理所有国家的语言文字。</p><p><strong>在控制台输出 unicode 表中的字符以及在表中字符对应的位置</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">gess</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">char</span> word = <span class="string">'d'</span>, word2 = <span class="string">'@'</span>;</span><br><span class="line">        <span class="keyword">int</span> p = <span class="number">23045</span>, p2 = <span class="number">45213</span>;</span><br><span class="line">        System.out.println(<span class="string">"d 在 unicode 表中的顺序位置是："</span>+(<span class="keyword">int</span>)word);</span><br><span class="line">        System.out.println(<span class="string">"@ 在 unicode 表中的顺序位置是："</span>+(<span class="keyword">int</span>)word2);</span><br><span class="line">        System.out.println(<span class="string">"unicode 表中的第 23045 位是："</span>+(<span class="keyword">char</span>)p);</span><br><span class="line">        System.out.println(<span class="string">"unicode 表中的第 45213 位是："</span>+(<span class="keyword">char</span>)p2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">输出结果为：</span><br><span class="line">d 在 unicode 表中的顺序位置是：<span class="number">100</span></span><br><span class="line">@ 在 unicode 表中的顺序位置是：<span class="number">64</span></span><br><span class="line">unicode 表中的第 <span class="number">23045</span> 位是：娅</span><br><span class="line">unicode 表中的第 <span class="number">45213</span> 位是： ?</span><br></pre></td></tr></table></figure><h4 id="转义字符"><a href="#转义字符" class="headerlink" title="转义字符"></a>转义字符</h4><p>转义字符是一种特殊的字符变量，它以反斜杠 <code>&quot;\&quot;</code> 开头，后跟一个或多个字符。转义字符具有特殊的含义，不同于字符原有的意义，故称 “转义”。Java 中的转义字符如下表所示：</p><table><thead><tr><th>转义字符</th><th>含义</th></tr></thead><tbody><tr><td>\ddd</td><td>1～3位八进制数所表示的字符，如\123</td></tr><tr><td>\uxxxx</td><td>4 位十六进制数所表示的字符，如 \u0052</td></tr><tr><td>\’</td><td>单引号字符</td></tr><tr><td>\</td><td>反斜杠字符</td></tr><tr><td>\t</td><td>垂直制表符，将光标移动下一个制表符的位置</td></tr><tr><td>\r</td><td>回车</td></tr><tr><td>\n</td><td>换行</td></tr><tr><td>\b</td><td>退格</td></tr><tr><td>\f</td><td>换页</td></tr></tbody></table><p>将转义字符赋值给字符变量时，与字符常量值一样需要使用单引号。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> c1 = <span class="string">'\\'</span>;</span><br><span class="line"><span class="keyword">char</span> char1 = <span class="string">"\u2605"</span>;</span><br><span class="line">System.out.println(c1);</span><br><span class="line">System.out.println(char1);</span><br></pre></td></tr></table></figure><h3 id="布尔类型"><a href="#布尔类型" class="headerlink" title="布尔类型"></a>布尔类型</h3><p>布尔类型又称逻辑类型，通过关键值 boolean 来定义布尔类型变量。只有 true 和 false 两个值，它们分别代表布尔逻辑中的 真 和 假。</p><p>布尔类型不能与整数类型进行转换。布尔类型通常被用在流程控制中作为判断条件。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">boolean</span> b;</span><br><span class="line"><span class="keyword">boolean</span> b1,b2;</span><br><span class="line"><span class="keyword">boolean</span> b = <span class="keyword">true</span>;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Java 面试题系列篇-编程大题</title>
      <link href="/2018/10/20/Java-%E9%9D%A2%E8%AF%95%E9%A2%98%E7%B3%BB%E5%88%97%E7%AF%87-%E7%BC%96%E7%A8%8B%E5%A4%A7%E9%A2%98/"/>
      <url>/2018/10/20/Java-%E9%9D%A2%E8%AF%95%E9%A2%98%E7%B3%BB%E5%88%97%E7%AF%87-%E7%BC%96%E7%A8%8B%E5%A4%A7%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h2 id="Java-编程题"><a href="#Java-编程题" class="headerlink" title="Java 编程题"></a>Java 编程题</h2><h3 id="如何读取eclipse中-src目录下的文件？至少两种"><a href="#如何读取eclipse中-src目录下的文件？至少两种" class="headerlink" title="如何读取eclipse中 src目录下的文件？至少两种"></a>如何读取eclipse中 src目录下的文件？至少两种</h3><p><a href="http://note.youdao.com/noteshare?id=f60ff6c6169c0f5211410a8ff3350000&amp;sub=8CA55EE3DA474C98A6C33F1988387FC6" target="_blank" rel="noopener">http://note.youdao.com/noteshare?id=f60ff6c6169c0f5211410a8ff3350000&amp;sub=8CA55EE3DA474C98A6C33F1988387FC6</a></p><h3 id="有两个list-集合怎么取无重复并集？"><a href="#有两个list-集合怎么取无重复并集？" class="headerlink" title="有两个list 集合怎么取无重复并集？"></a>有两个list 集合怎么取无重复并集？</h3><h3 id="如何将系统时间转化为-2017-5-28-格式？"><a href="#如何将系统时间转化为-2017-5-28-格式？" class="headerlink" title="如何将系统时间转化为 2017/5/28 格式？"></a>如何将系统时间转化为 2017/5/28 格式？</h3><p><a href="http://note.youdao.com/noteshare?id=b634c901a7b2739d3d9c439c57ce99b8&amp;sub=34424049F77F421E9249AE3622E4A8DE" target="_blank" rel="noopener">http://note.youdao.com/noteshare?id=b634c901a7b2739d3d9c439c57ce99b8&amp;sub=34424049F77F421E9249AE3622E4A8DE</a></p><h3 id="页面二级级联菜单如何实现？如-第一个下拉列表为省，第二个下拉列表为市。"><a href="#页面二级级联菜单如何实现？如-第一个下拉列表为省，第二个下拉列表为市。" class="headerlink" title="页面二级级联菜单如何实现？如 第一个下拉列表为省，第二个下拉列表为市。"></a>页面二级级联菜单如何实现？如 第一个下拉列表为省，第二个下拉列表为市。</h3><h3 id="请简述如何模拟实现-IOC-和-DI？-代码或者具体细节步骤？"><a href="#请简述如何模拟实现-IOC-和-DI？-代码或者具体细节步骤？" class="headerlink" title="请简述如何模拟实现 IOC 和 DI？ 代码或者具体细节步骤？"></a>请简述如何模拟实现 IOC 和 DI？ 代码或者具体细节步骤？</h3>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Java 面试题系列篇-虚拟机</title>
      <link href="/2018/10/20/Java-%E9%9D%A2%E8%AF%95%E9%A2%98%E7%B3%BB%E5%88%97%E7%AF%87-%E8%99%9A%E6%8B%9F%E6%9C%BA/"/>
      <url>/2018/10/20/Java-%E9%9D%A2%E8%AF%95%E9%A2%98%E7%B3%BB%E5%88%97%E7%AF%87-%E8%99%9A%E6%8B%9F%E6%9C%BA/</url>
      
        <content type="html"><![CDATA[<h2 id="虚拟机-（JVM）"><a href="#虚拟机-（JVM）" class="headerlink" title="虚拟机 （JVM）"></a>虚拟机 （JVM）</h2><h3 id="【JVM】你知道哪些或者你们线上使⽤什么GC策略？它有什么优势，适⽤于什么场景？"><a href="#【JVM】你知道哪些或者你们线上使⽤什么GC策略？它有什么优势，适⽤于什么场景？" class="headerlink" title="【JVM】你知道哪些或者你们线上使⽤什么GC策略？它有什么优势，适⽤于什么场景？"></a>【JVM】<strong>你知道哪些或者你们线上使⽤什么GC策略？它有什么优势，适⽤于什么场景？</strong></h3><p><a href="https://blog.csdn.net/chenleixing/article/details/46706039/" target="_blank" rel="noopener">https://blog.csdn.net/chenleixing/article/details/46706039/</a></p><h3 id="【JVM】Java类加载器包括⼏种？它们之间的⽗⼦关系是怎么样的？双亲委派机制是什么意思？有什么好处？"><a href="#【JVM】Java类加载器包括⼏种？它们之间的⽗⼦关系是怎么样的？双亲委派机制是什么意思？有什么好处？" class="headerlink" title="【JVM】Java类加载器包括⼏种？它们之间的⽗⼦关系是怎么样的？双亲委派机制是什么意思？有什么好处？"></a>【JVM】<strong>Java类加载器包括⼏种？它们之间的⽗⼦关系是怎么样的？双亲委派机制是什么意思？有什么好处？</strong></h3><p>启动Bootstrap类加载、扩展Extension类加载、系统System类加载。</p><p>父子关系如下：</p><p>启动类加载器 ，由C++ 实现，没有父类；</p><p>扩展类加载器，由Java语言实现，父类加载器为null；</p><p>系统类加载器，由Java语言实现，父类加载器为扩展类加载器；</p><p>自定义类加载器，父类加载器肯定为AppClassLoader。</p><p>双亲委派机制：类加载器收到类加载请求，自己不加载，向上委托给父类加载，父类加载不了，再自己加载。</p><p>优势避免Java核心API篡改。</p><p><a href="https://blog.csdn.net/javazejian/article/details/73413292/" target="_blank" rel="noopener">https://blog.csdn.net/javazejian/article/details/73413292/</a></p><h3 id="【JVM】如何⾃定义⼀个类加载器？你使⽤过哪些或者你在什么场景下需要⼀个⾃定义的类加载器吗？"><a href="#【JVM】如何⾃定义⼀个类加载器？你使⽤过哪些或者你在什么场景下需要⼀个⾃定义的类加载器吗？" class="headerlink" title="【JVM】如何⾃定义⼀个类加载器？你使⽤过哪些或者你在什么场景下需要⼀个⾃定义的类加载器吗？"></a>【JVM】<strong>如何⾃定义⼀个类加载器？你使⽤过哪些或者你在什么场景下需要⼀个⾃定义的类加载器吗？</strong></h3><p>自定义类加载的意义：</p><p>加载特定路径的class文件</p><p>加载一个加密的网络class文件</p><p>热部署加载class文件</p><h3 id="【JVM】jstack-是⼲什么的-jstat-呢？如果线上程序周期性地出现卡顿，你怀疑可-能是-GC-导致的，你会怎么来排查这个问题？线程⽇志⼀般你会看其中的什么-部分？"><a href="#【JVM】jstack-是⼲什么的-jstat-呢？如果线上程序周期性地出现卡顿，你怀疑可-能是-GC-导致的，你会怎么来排查这个问题？线程⽇志⼀般你会看其中的什么-部分？" class="headerlink" title="【JVM】jstack 是⼲什么的? jstat 呢？如果线上程序周期性地出现卡顿，你怀疑可 能是 GC 导致的，你会怎么来排查这个问题？线程⽇志⼀般你会看其中的什么 部分？"></a>【JVM】<strong>jstack 是⼲什么的? jstat 呢？如果线上程序周期性地出现卡顿，你怀疑可 能是 GC 导致的，你会怎么来排查这个问题？线程⽇志⼀般你会看其中的什么 部分？</strong></h3><p>jstack 用来查询 Java 进程的堆栈信息。</p><p>jvisualvm 监控内存泄露，跟踪垃圾回收、执行时内存、cpu分析、线程分析。</p><p>详见Java jvisualvm简要说明，可参考 线上FullGC频繁的排查。</p><p>Java jvisualvm简要说明</p><p><a href="https://blog.csdn.net/a19881029/article/details/8432368/" target="_blank" rel="noopener">https://blog.csdn.net/a19881029/article/details/8432368/</a></p><p>线上FullGC频繁的排查</p><p><a href="https://blog.csdn.net/wilsonpeng3/article/details/70064336/" target="_blank" rel="noopener">https://blog.csdn.net/wilsonpeng3/article/details/70064336/</a></p><h3 id="【JVM】StackOverflow异常有没有遇到过？⼀般你猜测会在什么情况下被触发？如何指定⼀个线程的堆栈⼤⼩？⼀般你们写多少？"><a href="#【JVM】StackOverflow异常有没有遇到过？⼀般你猜测会在什么情况下被触发？如何指定⼀个线程的堆栈⼤⼩？⼀般你们写多少？" class="headerlink" title="【JVM】StackOverflow异常有没有遇到过？⼀般你猜测会在什么情况下被触发？如何指定⼀个线程的堆栈⼤⼩？⼀般你们写多少？"></a>【JVM】<strong>StackOverflow异常有没有遇到过？⼀般你猜测会在什么情况下被触发？如何指定⼀个线程的堆栈⼤⼩？⼀般你们写多少？</strong></h3><p>栈内存溢出，一般由栈内存的局部变量过爆了，导致内存溢出。出现在递归方法，参数个数过多，递归过深，递归没有出口。</p><h3 id="什么是垃圾回收？"><a href="#什么是垃圾回收？" class="headerlink" title="什么是垃圾回收？"></a>什么是垃圾回收？</h3><p>垃圾回收是Java中自动内存管理的另一种叫法。垃圾回收的目的是为程序保持尽可能多的可用堆（heap）。 JVM会删除堆上不再需要从堆引用的对象。</p><h3 id="用一个例子解释垃圾回收？"><a href="#用一个例子解释垃圾回收？" class="headerlink" title="用一个例子解释垃圾回收？"></a>用一个例子解释垃圾回收？</h3><p>比方说，下面这个方法就会从函数调用。</p><p>void method(){</p><p>​    Calendar calendar = new GregorianCalendar(2000,10,30);</p><p>​    System.out.println(calendar);</p><p>}</p><p>通过函数第一行代码中参考变量calendar，在堆上创建了GregorianCalendar类的一个对象。</p><p>函数结束执行后，引用变量calendar不再有效。因此，在方法中没有创建引用到对象。</p><p>JVM认识到这一点，会从堆中删除对象。这就是所谓的垃圾回收。</p><h3 id="什么时候运行垃圾回收？"><a href="#什么时候运行垃圾回收？" class="headerlink" title="什么时候运行垃圾回收？"></a>什么时候运行垃圾回收？</h3><p>垃圾回收在JVM突发奇想和心血来潮时运行（没有那么糟糕）。运行垃圾收集的可能情况是：</p><p>堆可用内存不足</p><p>CPU空闲</p><h3 id="垃圾回收的最佳做法？"><a href="#垃圾回收的最佳做法？" class="headerlink" title="垃圾回收的最佳做法？"></a>垃圾回收的最佳做法？</h3><p>用编程的方式，我们可以要求（记住这只是一个请求——不是一个命令）JVM通过调用System.gc()方法来运行垃圾回收。</p><p>当内存已满，且堆上没有对象可用于垃圾回收时，JVM可能会抛出OutOfMemoryException。</p><p>对象在被垃圾回收从堆上删除之前，会运行finalize()方法。我们建议不要用finalize()方法写任何代码。</p><h3 id="Java-中会存在内存泄漏吗，请简单描述。"><a href="#Java-中会存在内存泄漏吗，请简单描述。" class="headerlink" title="Java 中会存在内存泄漏吗，请简单描述。"></a>Java 中会存在内存泄漏吗，请简单描述。</h3><p>答：理论上Java因为有垃圾回收机制（GC）不会存在内存泄露问题（这也是Java被广泛使用于服务器端编程的一个重要原因）；然而在实际开发中，可能会存在无用但可达的对象，这些对象不能被GC回收，因此也会导致内存泄露的发生。例如Hibernate的Session（一级缓存）中的对象属于持久态，垃圾回收器是不会回收这些对象的，然而这些对象中可能存在无用的垃圾对象，如果不及时关闭（close）或清空（flush）一级缓存就可能导致内存泄露。下面例子中的代码也会导致内存泄露。</p><p>import java.util.Arrays;</p><p>import java.util.EmptyStackException;</p><p>public class MyStack<t> {</t></p><p>​    private T[] elements;</p><p>​    private int size = 0;</p><p>​    private static final int INIT_CAPACITY = 16;</p><p>​    public MyStack() {</p><p>​        elements = (T[]) new Object[INIT_CAPACITY];</p><p>​    }</p><p>​    public void push(T elem) {</p><p>​        ensureCapacity();</p><p>​        elements[size++] = elem;</p><p>​    }</p><p>​    public T pop() {</p><p>​        if(size == 0) </p><p>​            throw new EmptyStackException();</p><p>​        return elements[–size];</p><p>​    }</p><p>​    private void ensureCapacity() {</p><p>​        if(elements.length == size) {</p><p>​            elements = Arrays.copyOf(elements, 2 * size + 1);</p><p>​        }</p><p>​    }</p><p>}</p><p>上面的代码实现了一个栈（先进后出（FILO））结构，乍看之下似乎没有什么明显的问题，它甚至可以通过你编写的各种单元测试。然而其中的pop方法却存在内存泄露的问题，当我们用pop方法弹出栈中的对象时，该对象不会被当作垃圾回收，即使使用栈的程序不再引用这些对象，因为栈内部维护着对这些对象的过期引用（obsolete reference）。在支持垃圾回收的语言中，内存泄露是很隐蔽的，这种内存泄露其实就是无意识的对象保持。如果一个对象引用被无意识的保留起来了，那么垃圾回收器不会处理这个对象，也不会处理该对象引用的其他对象，即使这样的对象只有少数几个，也可能会导致很多的对象被排除在垃圾回收之外，从而对性能造成重大影响，极端情况下会引发Disk Paging（物理内存与硬盘的虚拟内存交换数据），甚至造成OutOfMemoryError。</p><h3 id="GC是什么？为什么要有GC？"><a href="#GC是什么？为什么要有GC？" class="headerlink" title="GC是什么？为什么要有GC？"></a>GC是什么？为什么要有GC？</h3><p>答：GC是垃圾收集的意思，内存处理是编程人员容易出现问题的地方，忘记或者错误的内存回收会导致程序或系统的不稳定甚至崩溃，Java提供的GC功能可以自动监测对象是否超过作用域从而达到自动回收内存的目的，Java语言没有提供释放已分配内存的显示操作方法。Java程序员不用担心内存管理，因为垃圾收集器会自动进行管理。要请求垃圾收集，可以调用下面的方法之一：System.gc() 或Runtime.getRuntime().gc() ，但JVM可以屏蔽掉显示的垃圾回收调用。<br>垃圾回收可以有效的防止内存泄露，有效的使用可以使用的内存。垃圾回收器通常是作为一个单独的低优先级的线程运行，不可预知的情况下对内存堆中已经死亡的或者长时间没有使用的对象进行清除和回收，程序员不能实时的调用垃圾回收器对某个对象或所有对象进行垃圾回收。在Java诞生初期，垃圾回收是Java最大的亮点之一，因为服务器端的编程需要有效的防止内存泄露问题，然而时过境迁，如今Java的垃圾回收机制已经成为被诟病的东西。移动智能终端用户通常觉得iOS的系统比Android系统有更好的用户体验，其中一个深层次的原因就在于Android系统中垃圾回收的不可预知性。</p><p>补充：垃圾回收机制有很多种，包括：分代复制垃圾回收、标记垃圾回收、增量垃圾回收等方式。标准的Java进程既有栈又有堆。栈保存了原始型局部变量，堆保存了要创建的对象。Java平台对堆内存回收和再利用的基本算法被称为标记和清除，但是Java对其进行了改进，采用“分代式垃圾收集”。这种方法会跟Java对象的生命周期将堆内存划分为不同的区域，在垃圾收集过程中，可能会将对象移动到不同区域： </p><ul><li>伊甸园（Eden）：这是对象最初诞生的区域，并且对大多数对象来说，这里是它们唯一存在过的区域。 </li><li>幸存者乐园（Survivor）：从伊甸园幸存下来的对象会被挪到这里。 </li><li>终身颐养园（Tenured）：这是足够老的幸存对象的归宿。年轻代收集（Minor-GC）过程是不会触及这个地方的。当年轻代收集不能把对象放进终身颐养园时，就会触发一次完全收集（Major-GC），这里可能还会牵扯到压缩，以便为大对象腾出足够的空间。</li></ul><p>与垃圾回收相关的JVM参数：</p><p>-Xms / -Xmx — 堆的初始大小 / 堆的最大大小</p><p>-Xmn — 堆中年轻代的大小</p><p>-XX:-DisableExplicitGC — 让System.gc()不产生任何作用</p><p>-XX:+PrintGCDetails — 打印GC的细节</p><p>-XX:+PrintGCDateStamps — 打印GC操作的时间戳</p><p>-XX:NewSize / XX:MaxNewSize — 设置新生代大小/新生代最大大小</p><p>-XX:NewRatio — 可以设置老生代和新生代的比例</p><p>-XX:PrintTenuringDistribution — 设置每次新生代GC后输出幸存者乐园中对象年龄的分布</p><p>-XX:InitialTenuringThreshold / -XX:MaxTenuringThreshold：设置老年代阀值的初始值和最大值</p><p>-XX:TargetSurvivorRatio：设置幸存区的目标使用率</p>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Java 面试题系列篇-SpringMVC 框架</title>
      <link href="/2018/10/20/Java-%E9%9D%A2%E8%AF%95%E9%A2%98%E7%B3%BB%E5%88%97%E7%AF%87-SpringMVC-%E6%A1%86%E6%9E%B6/"/>
      <url>/2018/10/20/Java-%E9%9D%A2%E8%AF%95%E9%A2%98%E7%B3%BB%E5%88%97%E7%AF%87-SpringMVC-%E6%A1%86%E6%9E%B6/</url>
      
        <content type="html"><![CDATA[<h2 id="SpringMVC-框架"><a href="#SpringMVC-框架" class="headerlink" title="SpringMVC 框架"></a>SpringMVC 框架</h2><h3 id="如何在Web项目中配置Spring-MVC？"><a href="#如何在Web项目中配置Spring-MVC？" class="headerlink" title="如何在Web项目中配置Spring MVC？"></a>如何在Web项目中配置Spring MVC？</h3><p>答：要使用Spring MVC需要在Web项目配置文件中配置其前端控制器DispatcherServlet，如下所示：</p><p><web-app></web-app></p><p>​    <servlet></servlet></p><p>​        <servlet-name>example</servlet-name></p><p>​        <servlet-class></servlet-class></p><p>​            org.springframework.web.servlet.DispatcherServlet</p><p>​        </p><p>​        <load-on-startup>1</load-on-startup></p><p>​    </p><p>​    <servlet-mapping></servlet-mapping></p><p>​        <servlet-name>example</servlet-name></p><p>​        <url-pattern>*.html</url-pattern></p><p>​    </p><p></p><p>说明：上面的配置中使用了*.html的后缀映射，这样做一方面不能够通过URL推断采用了何种服务器端的技术，另一方面可以欺骗搜索引擎，因为搜索引擎不会搜索动态页面，这种做法称为伪静态化。</p><h3 id="Spring-MVC的工作原理是怎样的？"><a href="#Spring-MVC的工作原理是怎样的？" class="headerlink" title="Spring MVC的工作原理是怎样的？"></a>Spring MVC的工作原理是怎样的？</h3><p>答：Spring MVC的工作原理如下图所示：<br>① 客户端的所有请求都交给前端控制器DispatcherServlet来处理，它会负责调用系统的其他模块来真正处理用户的请求。<br>② DispatcherServlet收到请求后，将根据请求的信息（包括URL、HTTP协议方法、请求头、请求参数、Cookie等）以及HandlerMapping的配置找到处理该请求的Handler（任何一个对象都可以作为请求的Handler）。<br>③在这个地方Spring会通过HandlerAdapter对该处理器进行封装。<br>④ HandlerAdapter是一个适配器，它用统一的接口对各种Handler中的方法进行调用。<br>⑤ Handler完成对用户请求的处理后，会返回一个ModelAndView对象给DispatcherServlet，ModelAndView顾名思义，包含了数据模型以及相应的视图的信息。<br>⑥ ModelAndView的视图是逻辑视图，DispatcherServlet还要借助ViewResolver完成从逻辑视图到真实视图对象的解析工作。<br>⑦ 当得到真正的视图对象后，DispatcherServlet会利用视图对象对模型数据进行渲染。<br>⑧ 客户端得到响应，可能是一个普通的HTML页面，也可以是XML或JSON字符串，还可以是一张图片或者一个PDF文件。</p><h3 id="大型网站在架构上应当考虑哪些问题？"><a href="#大型网站在架构上应当考虑哪些问题？" class="headerlink" title="大型网站在架构上应当考虑哪些问题？"></a>大型网站在架构上应当考虑哪些问题？</h3><p>答： </p><ul><li>分层：分层是处理任何复杂系统最常见的手段之一，将系统横向切分成若干个层面，每个层面只承担单一的职责，然后通过下层为上层提供的基础设施和服务以及上层对下层的调用来形成一个完整的复杂的系统。计算机网络的开放系统互联参考模型（OSI/RM）和Internet的TCP/IP模型都是分层结构，大型网站的软件系统也可以使用分层的理念将其分为持久层（提供数据存储和访问服务）、业务层（处理业务逻辑，系统中最核心的部分）和表示层（系统交互、视图展示）。需要指出的是：（1）分层是逻辑上的划分，在物理上可以位于同一设备上也可以在不同的设备上部署不同的功能模块，这样可以使用更多的计算资源来应对用户的并发访问；（2）层与层之间应当有清晰的边界，这样分层才有意义，才更利于软件的开发和维护。 </li><li>分割：分割是对软件的纵向切分。我们可以将大型网站的不同功能和服务分割开，形成高内聚低耦合的功能模块（单元）。在设计初期可以做一个粗粒度的分割，将网站分割为若干个功能模块，后期还可以进一步对每个模块进行细粒度的分割，这样一方面有助于软件的开发和维护，另一方面有助于分布式的部署，提供网站的并发处理能力和功能的扩展。 </li><li>分布式：除了上面提到的内容，网站的静态资源（JavaScript、CSS、图片等）也可以采用独立分布式部署并采用独立的域名，这样可以减轻应用服务器的负载压力，也使得浏览器对资源的加载更快。数据的存取也应该是分布式的，传统的商业级关系型数据库产品基本上都支持分布式部署，而新生的NoSQL产品几乎都是分布式的。当然，网站后台的业务处理也要使用分布式技术，例如查询索引的构建、数据分析等，这些业务计算规模庞大，可以使用Hadoop以及MapReduce分布式计算框架来处理。 </li><li>集群：集群使得有更多的服务器提供相同的服务，可以更好的提供对并发的支持。 </li><li>缓存：所谓缓存就是用空间换取时间的技术，将数据尽可能放在距离计算最近的位置。使用缓存是网站优化的第一定律。我们通常说的CDN、反向代理、热点数据都是对缓存技术的使用。 </li><li>异步：异步是实现软件实体之间解耦合的又一重要手段。异步架构是典型的生产者消费者模式，二者之间没有直接的调用关系，只要保持数据结构不变，彼此功能实现可以随意变化而不互相影响，这对网站的扩展非常有利。使用异步处理还可以提高系统可用性，加快网站的响应速度（用Ajax加载数据就是一种异步技术），同时还可以起到削峰作用（应对瞬时高并发）。”；能推迟处理的都要推迟处理”是网站优化的第二定律，而异步是践行网站优化第二定律的重要手段。 </li><li>冗余：各种服务器都要提供相应的冗余服务器以便在某台或某些服务器宕机时还能保证网站可以正常工作，同时也提供了灾难恢复的可能性。冗余是网站高可用性的重要保证。</li></ul><h3 id="你用过的网站前端优化的技术有哪些？"><a href="#你用过的网站前端优化的技术有哪些？" class="headerlink" title="你用过的网站前端优化的技术有哪些？"></a>你用过的网站前端优化的技术有哪些？</h3><p>答：<br>① 浏览器访问优化： </p><ul><li>减少HTTP请求数量：合并CSS、合并JavaScript、合并图片（CSS Sprite） </li><li>使用浏览器缓存：通过设置HTTP响应头中的Cache-Control和Expires属性，将CSS、JavaScript、图片等在浏览器中缓存，当这些静态资源需要更新时，可以更新HTML文件中的引用来让浏览器重新请求新的资源 </li><li>启用压缩 </li><li>CSS前置，JavaScript后置 </li><li>减少Cookie传输<br>② CDN加速：CDN（Content Distribute Network）的本质仍然是缓存，将数据缓存在离用户最近的地方，CDN通常部署在网络运营商的机房，不仅可以提升响应速度，还可以减少应用服务器的压力。当然，CDN缓存的通常都是静态资源。<br>③ 反向代理：反向代理相当于应用服务器的一个门面，可以保护网站的安全性，也可以实现负载均衡的功能，当然最重要的是它缓存了用户访问的热点资源，可以直接从反向代理将某些内容返回给用户浏览器。</li></ul><h3 id="你使用过的应用服务器优化技术有哪些？"><a href="#你使用过的应用服务器优化技术有哪些？" class="headerlink" title="你使用过的应用服务器优化技术有哪些？"></a>你使用过的应用服务器优化技术有哪些？</h3><p>答：<br>① 分布式缓存：缓存的本质就是内存中的哈希表，如果设计一个优质的哈希函数，那么理论上哈希表读写的渐近时间复杂度为O(1)。缓存主要用来存放那些读写比很高、变化很少的数据，这样应用程序读取数据时先到缓存中读取，如果没有或者数据已经失效再去访问数据库或文件系统，并根据拟定的规则将数据写入缓存。对网站数据的访问也符合二八定律（Pareto分布，幂律分布），即80%的访问都集中在20%的数据上，如果能够将这20%的数据缓存起来，那么系统的性能将得到显著的改善。当然，使用缓存需要解决以下几个问题： </p><ul><li>频繁修改的数据； </li><li>数据不一致与脏读； </li><li>缓存雪崩（可以采用分布式缓存服务器集群加以解决，memcached是广泛采用的解决方案）； </li><li>缓存预热； </li><li>缓存穿透（恶意持续请求不存在的数据）。<br>② 异步操作：可以使用消息队列将调用异步化，通过异步处理将短时间高并发产生的事件消息存储在消息队列中，从而起到削峰作用。电商网站在进行促销活动时，可以将用户的订单请求存入消息队列，这样可以抵御大量的并发订单请求对系统和数据库的冲击。目前，绝大多数的电商网站即便不进行促销活动，订单系统都采用了消息队列来处理。<br>③ 使用集群。<br>④ 代码优化： </li><li>多线程：基于Java的Web开发基本上都通过多线程的方式响应用户的并发请求，使用多线程技术在编程上要解决线程安全问题，主要可以考虑以下几个方面：A. 将对象设计为无状态对象（这和面向对象的编程观点是矛盾的，在面向对象的世界中被视为不良设计），这样就不会存在并发访问时对象状态不一致的问题。B. 在方法内部创建对象，这样对象由进入方法的线程创建，不会出现多个线程访问同一对象的问题。使用ThreadLocal将对象与线程绑定也是很好的做法，这一点在前面已经探讨过了。C. 对资源进行并发访问时应当使用合理的锁机制。 </li><li>非阻塞I/O： 使用单线程和非阻塞I/O是目前公认的比多线程的方式更能充分发挥服务器性能的应用模式，基于Node.js构建的服务器就采用了这样的方式。Java在JDK 1.4中就引入了NIO（Non-blocking I/O）,在Servlet 3规范中又引入了异步Servlet的概念，这些都为在服务器端采用非阻塞I/O提供了必要的基础。 </li><li>资源复用：资源复用主要有两种方式，一是单例，二是对象池，我们使用的数据库连接池、线程池都是对象池化技术，这是典型的用空间换取时间的策略，另一方面也实现对资源的复用，从而避免了不必要的创建和释放资源所带来的开销。</li></ul><h3 id="什么是XSS攻击？什么是SQL注入攻击？什么是CSRF攻击？"><a href="#什么是XSS攻击？什么是SQL注入攻击？什么是CSRF攻击？" class="headerlink" title="什么是XSS攻击？什么是SQL注入攻击？什么是CSRF攻击？"></a>什么是XSS攻击？什么是SQL注入攻击？什么是CSRF攻击？</h3><p> 答： </p><ul><li>XSS（Cross Site Script，跨站脚本攻击）是向网页中注入恶意脚本在用户浏览网页时在用户浏览器中执行恶意脚本的攻击方式。跨站脚本攻击分有两种形式：反射型攻击（诱使用户点击一个嵌入恶意脚本的链接以达到攻击的目标，目前有很多攻击者利用论坛、微博发布含有恶意脚本的URL就属于这种方式）和持久型攻击（将恶意脚本提交到被攻击网站的数据库中，用户浏览网页时，恶意脚本从数据库中被加载到页面执行，QQ邮箱的早期版本就曾经被利用作为持久型跨站脚本攻击的平台）。XSS虽然不是什么新鲜玩意，但是攻击的手法却不断翻新，防范XSS主要有两方面：消毒（对危险字符进行转义）和HttpOnly（防范XSS攻击者窃取Cookie数据）。 </li><li>SQL注入攻击是注入攻击最常见的形式（此外还有OS注入攻击（Struts 2的高危漏洞就是通过OGNL实施OS注入攻击导致的）），当服务器使用请求参数构造SQL语句时，恶意的SQL被嵌入到SQL中交给数据库执行。SQL注入攻击需要攻击者对数据库结构有所了解才能进行，攻击者想要获得表结构有多种方式：（1）如果使用开源系统搭建网站，数据库结构也是公开的（目前有很多现成的系统可以直接搭建论坛，电商网站，虽然方便快捷但是风险是必须要认真评估的）；（2）错误回显（如果将服务器的错误信息直接显示在页面上，攻击者可以通过非法参数引发页面错误从而通过错误信息了解数据库结构，Web应用应当设置友好的错误页，一方面符合最小惊讶原则，一方面屏蔽掉可能给系统带来危险的错误回显信息）；（3）盲注。防范SQL注入攻击也可以采用消毒的方式，通过正则表达式对请求参数进行验证，此外，参数绑定也是很好的手段，这样恶意的SQL会被当做SQL的参数而不是命令被执行，JDBC中的PreparedStatement就是支持参数绑定的语句对象，从性能和安全性上都明显优于Statement。 </li><li>CSRF攻击（Cross Site Request Forgery，跨站请求伪造）是攻击者通过跨站请求，以合法的用户身份进行非法操作（如转账或发帖等）。CSRF的原理是利用浏览器的Cookie或服务器的Session，盗取用户身份，其原理如下图所示。防范CSRF的主要手段是识别请求者的身份，主要有以下几种方式：（1）在表单中添加令牌（token）；（2）验证码；（3）检查请求头中的Referer（前面提到防图片盗链接也是用的这种方式）。令牌和验证都具有一次消费性的特征，因此在原理上一致的，但是验证码是一种糟糕的用户体验，不是必要的情况下不要轻易使用验证码，目前很多网站的做法是如果在短时间内多次提交一个表单未获得成功后才要求提供验证码，这样会获得较好的用户体验。</li></ul><p>补充：防火墙的架设是Web安全的重要保障，ModSecurity是开源的Web防火墙中的佼佼者。企业级防火墙的架设应当有两级防火墙，Web服务器和部分应用服务器可以架设在两级防火墙之间的DMZ，而数据和资源服务器应当架设在第二级防火墙之后。</p><h3 id="什么是领域模型-domain-model-？贫血模型-anaemic-domain-model-和充血模型-rich-domain-model-有什么区别？"><a href="#什么是领域模型-domain-model-？贫血模型-anaemic-domain-model-和充血模型-rich-domain-model-有什么区别？" class="headerlink" title="什么是领域模型(domain model)？贫血模型(anaemic domain model)和充血模型(rich domain model)有什么区别？"></a>什么是领域模型(domain model)？贫血模型(anaemic domain model)和充血模型(rich domain model)有什么区别？</h3><p>答：领域模型是领域内的概念类或现实世界中对象的可视化表示，又称为概念模型或分析对象模型，它专注于分析问题领域本身，发掘重要的业务领域概念，并建立业务领域概念之间的关系。贫血模型是指使用的领域对象中只有setter和getter方法（POJO），所有的业务逻辑都不包含在领域对象中而是放在业务逻辑层。有人将我们这里说的贫血模型进一步划分成失血模型（领域对象完全没有业务逻辑）和贫血模型（领域对象有少量的业务逻辑），我们这里就不对此加以区分了。充血模型将大多数业务逻辑和持久化放在领域对象中，业务逻辑（业务门面）只是完成对业务逻辑的封装、事务和权限等的处理。下面两张图分别展示了贫血模型和充血模型的分层架构。</p><p>贫血模型 </p><p>充血模型 </p><p>贫血模型下组织领域逻辑通常使用事务脚本模式，让每个过程对应用户可能要做的一个动作，每个动作由一个过程来驱动。也就是说在设计业务逻辑接口的时候，每个方法对应着用户的一个操作，这种模式有以下几个有点： </p><ul><li>它是一个大多数开发者都能够理解的简单过程模型（适合国内的绝大多数开发者）。 </li><li>它能够与一个使用行数据入口或表数据入口的简单数据访问层很好的协作。 </li><li>事务边界的显而易见，一个事务开始于脚本的开始，终止于脚本的结束，很容易通过代理（或切面）实现声明式事务。<br>然而，事务脚本模式的缺点也是很多的，随着领域逻辑复杂性的增加，系统的复杂性将迅速增加，程序结构将变得极度混乱。开源中国社区上有一篇很好的译文《贫血领域模型是如何导致糟糕的软件产生》对这个问题做了比较细致的阐述。</li></ul><h3 id="谈一谈测试驱动开发（TDD）的好处以及你的理解。"><a href="#谈一谈测试驱动开发（TDD）的好处以及你的理解。" class="headerlink" title="谈一谈测试驱动开发（TDD）的好处以及你的理解。"></a>谈一谈测试驱动开发（TDD）的好处以及你的理解。</h3><p>答：TDD是指在编写真正的功能实现代码之前先写测试代码，然后根据需要重构实现代码。在JUnit的作者Kent Beck的大作《测试驱动开发：实战与模式解析》（Test-Driven Development: by Example）一书中有这么一段内容：“消除恐惧和不确定性是编写测试驱动代码的重要原因”。因为编写代码时的恐惧会让你小心试探，让你回避沟通，让你羞于得到反馈，让你变得焦躁不安，而TDD是消除恐惧、让Java开发者更加自信更加乐于沟通的重要手段。TDD会带来的好处可能不会马上呈现，但是你在某个时候一定会发现，这些好处包括： </p><ul><li>更清晰的代码 — 只写需要的代码 </li><li>更好的设计 </li><li>更出色的灵活性 — 鼓励程序员面向接口编程 </li><li>更快速的反馈 — 不会到系统上线时才知道bug的存在</li></ul><p>补充：敏捷软件开发的概念已经有很多年了，而且也部分的改变了软件开发这个行业，TDD也是敏捷开发所倡导的。</p><p>TDD可以在多个层级上应用，包括单元测试（测试一个类中的代码）、集成测试（测试类之间的交互）、系统测试（测试运行的系统）和系统集成测试（测试运行的系统包括使用的第三方组件）。TDD的实施步骤是：红（失败测试）- 绿（通过测试） - 重构。关于实施TDD的详细步骤请参考另一篇文章《测试驱动开发之初窥门径》。<br>在使用TDD开发时，经常会遇到需要被测对象需要依赖其他子系统的情况，但是你希望将测试代码跟依赖项隔离，以保证测试代码仅仅针对当前被测对象或方法展开，这时候你需要的是测试替身。测试替身可以分为四类： </p><ul><li>虚设替身：只传递但是不会使用到的对象，一般用于填充方法的参数列表 </li><li>存根替身：总是返回相同的预设响应，其中可能包括一些虚设状态 </li><li>伪装替身：可以取代真实版本的可用版本（比真实版本还是会差很多） </li><li>模拟替身：可以表示一系列期望值的对象，并且可以提供预设响应<br>Java世界中实现模拟替身的第三方工具非常多，包括EasyMock、Mockito、jMock等。</li></ul><h3 id="什么是可变参数？"><a href="#什么是可变参数？" class="headerlink" title="什么是可变参数？"></a>什么是可变参数？</h3><p>可变参数允许调用参数数量不同的方法。请看下面例子中的求和方法。此方法可以调用1个int参数，或2个int参数，或多个int参数。</p><p> //int(type) followed … (three dot’s) is syntax of a variable argument. </p><p>​    public int sum(int… numbers) {</p><p>​        //inside the method a variable argument is similar to an array.</p><p>​        //number can be treated as if it is declared as int[] numbers;</p><p>​        int sum = 0;</p><p>​        for (int number: numbers) {</p><p>​            sum += number;</p><p>​        }</p><p>​        return sum;</p><p>​    }</p><p>​    public static void main(String[] args) {</p><p>​        VariableArgumentExamples example = new VariableArgumentExamples();</p><p>​        //3 Arguments</p><p>​        System.out.println(example.sum(1, 4, 5));//10</p><p>​        //4 Arguments</p><p>​        System.out.println(example.sum(1, 4, 5, 20));//30</p><p>​        //0 Arguments</p><p>​        System.out.println(example.sum());//0</p><p>}</p><h3 id="断言的用途？"><a href="#断言的用途？" class="headerlink" title="断言的用途？"></a>断言的用途？</h3><p>断言是在Java 1.4中引入的。它能让你验证假设。如果断言失败（即返回false），就会抛出AssertionError（如果启用断言）。基本断言如下所示。</p><p>private int computerSimpleInterest(int principal,float interest,int years){</p><p>​    assert(principal&gt;0);</p><p>​    return 100;</p><p>}</p><h3 id="什么时候使用断言？"><a href="#什么时候使用断言？" class="headerlink" title="什么时候使用断言？"></a>什么时候使用断言？</h3><p>断言不应该用于验证输入数据到一个public方法或命令行参数。IllegalArgumentException会是一个更好的选择。在public方法中，只用断言来检查它们根本不应该发生的情况。</p><h3 id="什么是初始化数据块？"><a href="#什么是初始化数据块？" class="headerlink" title="什么是初始化数据块？"></a>什么是初始化数据块？</h3><p>初始化数据块——当创建对象或加载类时运行的代码。</p><p>有两种类型的初始化数据块：</p><p>静态初始化器：加载类时运行的的代码</p><p>实例初始化器：创建新对象时运行的代码</p><h3 id="什么是静态初始化器？"><a href="#什么是静态初始化器？" class="headerlink" title="什么是静态初始化器？"></a>什么是静态初始化器？</h3><p>请看下面的例子：static{ 和 }之间的代码被称为静态初始化器。它只有在第一次加载类时运行。只有静态变量才可以在静态初始化器中进行访问。虽然创建了三个实例，但静态初始化器只运行一次。</p><p>/**</p><ul><li><p>Java学习交流QQ群：589809992 我们一起学Java！</p><p>*/</p></li></ul><p>public class InitializerExamples {</p><p>​    static int count;</p><p>​    int i;</p><p>​    static{</p><p>​        //This is a static initializers. Run only when Class is first loaded.</p><p>​        //Only static variables can be accessed</p><p>​        System.out.println(“Static Initializer”);</p><p>​        //i = 6;//COMPILER ERROR</p><p>​        System.out.println(“Count when Static Initializer is run is “ + count);</p><p>​    }</p><p>​    public static void main(String[] args) {</p><p>​        InitializerExamples example = new InitializerExamples();</p><p>​        InitializerExamples example2 = new InitializerExamples();</p><p>​        InitializerExamples example3 = new InitializerExamples();</p><p>​    }</p><p>}</p><p>示例输出</p><p>Static Initializer</p><p>Count when Static Initializer is run is 0.</p><h3 id="什么是实例初始化块？"><a href="#什么是实例初始化块？" class="headerlink" title="什么是实例初始化块？"></a>什么是实例初始化块？</h3><p>让我们来看一个例子：每次创建类的实例时，实例初始化器中的代码都会运行。</p><p>/**</p><ul><li><p>Java学习交流QQ群：589809992 我们一起学Java！</p><p>*/</p></li></ul><p>public class InitializerExamples {</p><p>​    static int count;</p><p>​    int i;</p><p>​    {</p><p>​        //This is an instance initializers. Run every time an object is created.</p><p>​        //static and instance variables can be accessed</p><p>​        System.out.println(“Instance Initializer”);</p><p>​        i = 6;</p><p>​        count = count + 1;</p><p>​        System.out.println(“Count when Instance Initializer is run is “ + count);</p><p>​    }</p><p>​    public static void main(String[] args) {</p><p>​        InitializerExamples example = new InitializerExamples();</p><p>​        InitializerExamples example1 = new InitializerExamples();</p><p>​        InitializerExamples example2 = new InitializerExamples();</p><p>​    }</p><p>}</p><p>示例输出</p><p>Instance Initializer</p><p>​      Count when Instance Initializer is run is 1</p><p>​      Instance Initializer</p><p>​      Count when Instance Initializer is run is 2</p><p>​      Instance Initializer</p><p>​      Count when Instance Initializer is run is 3</p><h3 id="什么是正则表达式？"><a href="#什么是正则表达式？" class="headerlink" title="什么是正则表达式？"></a>什么是正则表达式？</h3><p>正则表达式能让解析、扫描和分割字符串变得非常容易。Java中常用的正则表达式——Patter，Matcher和Scanner类。</p><h3 id="什么是令牌化？"><a href="#什么是令牌化？" class="headerlink" title="什么是令牌化？"></a>什么是令牌化？</h3><p>令牌化是指在分隔符的基础上将一个字符串分割为若干个子字符串。例如，分隔符；分割字符串ac;bd;def;e为四个子字符串ac，bd，def和e。</p><p>分隔符自身也可以是一个常见正则表达式。</p><p>String.split(regex)函数将regex作为参数。</p><h3 id="给出令牌化的例子？"><a href="#给出令牌化的例子？" class="headerlink" title="给出令牌化的例子？"></a>给出令牌化的例子？</h3><p>private static void tokenize(String string,String regex) {</p><p>​    String[] tokens = string.split(regex);</p><p>​    System.out.println(Arrays.toString(tokens));</p><p>}</p><p>tokenize(“ac;bd;def;e”,”;”);//[ac, bd, def, e]</p><h3 id="如何使用扫描器类（Scanner-Class）令牌化？"><a href="#如何使用扫描器类（Scanner-Class）令牌化？" class="headerlink" title="如何使用扫描器类（Scanner Class）令牌化？"></a>如何使用扫描器类（Scanner Class）令牌化？</h3><p>private static void tokenizeUsingScanner(String string,String regex) {</p><p>​    Scanner scanner = new Scanner(string);</p><p>​    scanner.useDelimiter(regex);</p><p>​    List<string> matches = new ArrayList<string>();</string></string></p><p>​    while(scanner.hasNext()){</p><p>​        matches.add(scanner.next());</p><p>​    }</p><p>​    System.out.println(matches);</p><p>}</p><p>tokenizeUsingScanner(“ac;bd;def;e”,”;”);//[ac, bd, def, e]</p><h3 id="如何添加小时-hour-到一个日期对象（Date-Objects）？"><a href="#如何添加小时-hour-到一个日期对象（Date-Objects）？" class="headerlink" title="如何添加小时(hour)到一个日期对象（Date Objects）？"></a>如何添加小时(hour)到一个日期对象（Date Objects）？</h3><p>现在，让我们如何看看添加小时到一个date对象。所有在date上的日期操作都需要通过添加毫秒到date才能完成。例如，如果我们想增加6个小时，那么我们需要将6小时换算成毫秒。6小时= 6  60  60 * 1000毫秒。请看以下的例子。</p><p>Date date = new Date();</p><p>//Increase time by 6 hrs</p><p>date.setTime(date.getTime() + 6 <em> 60 </em> 60 * 1000);</p><p>System.out.println(date);</p><p>//Decrease time by 6 hrs</p><p>date = new Date();</p><p>date.setTime(date.getTime() - 6 <em> 60 </em> 60 * 1000);</p><p>System.out.println(date);</p><h3 id="如何格式化日期对象？"><a href="#如何格式化日期对象？" class="headerlink" title="如何格式化日期对象？"></a>如何格式化日期对象？</h3><p>格式化日期需要使用DateFormat类完成。让我们看几个例子。</p><p>//Formatting Dates</p><p>System.out.println(DateFormat.getInstance().format(</p><p>​        date));//10/16/12 5:18 AM</p><p>带有区域设置的格式化日期如下所示：</p><p>System.out.println(DateFormat.getDateInstance(</p><p>​        DateFormat.FULL, new Locale(“it”, “IT”))</p><p>​        .format(date));//marted“ 16 ottobre 2012</p><p>System.out.println(DateFormat.getDateInstance(</p><p>​        DateFormat.FULL, Locale.ITALIAN)</p><p>​        .format(date));//marted“ 16 ottobre 2012</p><p>//This uses default locale US</p><p>System.out.println(DateFormat.getDateInstance(</p><p>​        DateFormat.FULL).format(date));//Tuesday, October 16, 2012</p><p>System.out.println(DateFormat.getDateInstance()</p><p>​        .format(date));//Oct 16, 2012</p><p>System.out.println(DateFormat.getDateInstance(</p><p>​        DateFormat.SHORT).format(date));//10/16/12</p><p>System.out.println(DateFormat.getDateInstance(</p><p>​        DateFormat.MEDIUM).format(date));//Oct 16, 2012</p><p>System.out.println(DateFormat.getDateInstance(</p><p>​        DateFormat.LONG).format(date));//October 16, 2012</p><h3 id="Java中日历类（Calendar-Class）的用途？"><a href="#Java中日历类（Calendar-Class）的用途？" class="headerlink" title="Java中日历类（Calendar Class）的用途？"></a>Java中日历类（Calendar Class）的用途？</h3><p>Calendar类在Java中用于处理日期。Calendar类提供了增加和减少天数、月数和年数的简便方法。它还提供了很多与日期有关的细节（这一年的哪一天？哪一周？等等）</p><h3 id="如何在Java中获取日历类（Calendar-Class）的实例？"><a href="#如何在Java中获取日历类（Calendar-Class）的实例？" class="headerlink" title="如何在Java中获取日历类（Calendar Class）的实例？"></a>如何在Java中获取日历类（Calendar Class）的实例？</h3><p>Calendar类不能通过使用new Calendar创建。得到Calendar类实例的最好办法是在Calendar中使用getInstance() static方法。</p><p>//Calendar calendar = new Calendar(); //COMPILER ERROR</p><p>Calendar calendar = Calendar.getInstance();</p><h3 id="解释一些日历类（Calendar-Class）中的重要方法？"><a href="#解释一些日历类（Calendar-Class）中的重要方法？" class="headerlink" title="解释一些日历类（Calendar Class）中的重要方法？"></a>解释一些日历类（Calendar Class）中的重要方法？</h3><p>在Calendar对象上设置日（day），月（month）或年（year）不难。对Day，Month或Year调用恰当Constant的set方法。下一个参数就是值。</p><p>calendar.set(Calendar.DATE, 24);</p><p>calendar.set(Calendar.MONTH, 8);//8 - September</p><p>calendar.set(Calendar.YEAR, 2010);</p><p>calendar get方法</p><p>要获取一个特定日期的信息——2010年9月24日。我们可以使用calendar get方法。已被传递的参数表示我们希望从calendar中获得的值—— 天或月或年或……你可以从calendar获取的值举例如下：</p><p>System.out.println(calendar.get(Calendar.YEAR));//2010</p><p>System.out.println(calendar.get(Calendar.MONTH));//8</p><p>System.out.println(calendar.get(Calendar.DATE));//24</p><p>System.out.println(calendar.get(Calendar.WEEK_OF_MONTH));//4</p><p>System.out.println(calendar.get(Calendar.WEEK_OF_YEAR));//39</p><p>System.out.println(calendar.get(Calendar.DAY_OF_YEAR));//267</p><p>System.out.println(calendar.getFirstDayOfWeek());//1 -&gt; Calendar.SUNDAY</p><h3 id="数字格式化类（Number-Format-Class）的用途？"><a href="#数字格式化类（Number-Format-Class）的用途？" class="headerlink" title="数字格式化类（Number Format Class）的用途？"></a>数字格式化类（Number Format Class）的用途？</h3><p>数字格式用于格式化数字到不同的区域和不同格式中。</p><p>使用默认语言环境的数字格式</p><p>System.out.println(NumberFormat.getInstance().format(321.24f));//321.24</p><p>使用区域设置的数字格式</p><p>使用荷兰语言环境格式化数字：</p><p>System.out.println(NumberFormat.getInstance(new Locale(“nl”)).format(4032.3f));//4.032,3</p><p>使用德国语言环境格式化数字：</p><p>System.out.println(NumberFormat.getInstance(Locale.GERMANY).format(4032.3f));//4.032,3</p><p>使用默认语言环境格式化货币</p><p>System.out.println(NumberFormat.getCurrencyInstance().format(40324.31f));//$40,324.31</p><p>使用区域设置格式化货币</p><p>使用荷兰语言环境格式化货币：</p><p>System.out.println(NumberFormat.getCurrencyInstance(new Locale(“nl”)).format(40324.31f));/</p><h3 id="后台从前端页面获取到表单数据的方法？请具体到细节，如Servlet如何接收？SpringMVC怎么接收或Structs2？"><a href="#后台从前端页面获取到表单数据的方法？请具体到细节，如Servlet如何接收？SpringMVC怎么接收或Structs2？" class="headerlink" title="后台从前端页面获取到表单数据的方法？请具体到细节，如Servlet如何接收？SpringMVC怎么接收或Structs2？"></a>后台从前端页面获取到表单数据的方法？请具体到细节，如Servlet如何接收？SpringMVC怎么接收或Structs2？</h3><h3 id="Spring-中-IOC-和-DI-的区别以及关系是什么、AOP是怎么实现的？"><a href="#Spring-中-IOC-和-DI-的区别以及关系是什么、AOP是怎么实现的？" class="headerlink" title="Spring 中 IOC 和 DI 的区别以及关系是什么、AOP是怎么实现的？"></a>Spring 中 IOC 和 DI 的区别以及关系是什么、AOP是怎么实现的？</h3>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Java 面试题系列篇-struts 框架</title>
      <link href="/2018/10/20/Java-%E9%9D%A2%E8%AF%95%E9%A2%98%E7%B3%BB%E5%88%97%E7%AF%87-Struts-%E6%A1%86%E6%9E%B6/"/>
      <url>/2018/10/20/Java-%E9%9D%A2%E8%AF%95%E9%A2%98%E7%B3%BB%E5%88%97%E7%AF%87-Struts-%E6%A1%86%E6%9E%B6/</url>
      
        <content type="html"><![CDATA[<h2 id="Struts-框架"><a href="#Struts-框架" class="headerlink" title="Struts 框架"></a>Struts 框架</h2><h3 id="Struts2-中action-是多实例还是单实例的？为什么？"><a href="#Struts2-中action-是多实例还是单实例的？为什么？" class="headerlink" title="Struts2 中action 是多实例还是单实例的？为什么？"></a>Struts2 中action 是多实例还是单实例的？为什么？</h3><h3 id="Struts2-中的拦截器如何配置？"><a href="#Struts2-中的拦截器如何配置？" class="headerlink" title="Struts2 中的拦截器如何配置？"></a>Struts2 中的拦截器如何配置？</h3><h3 id="SSH-框架或-SSM-框架整合思想是什么？关键-jar-包是哪几个？请具体阐述-jar-包的作用？"><a href="#SSH-框架或-SSM-框架整合思想是什么？关键-jar-包是哪几个？请具体阐述-jar-包的作用？" class="headerlink" title="SSH 框架或 SSM 框架整合思想是什么？关键 jar 包是哪几个？请具体阐述 jar 包的作用？"></a>SSH 框架或 SSM 框架整合思想是什么？关键 jar 包是哪几个？请具体阐述 jar 包的作用？</h3><h3 id="页面数据分页如何实现？"><a href="#页面数据分页如何实现？" class="headerlink" title="页面数据分页如何实现？"></a>页面数据分页如何实现？</h3>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Java 面试题系列篇-Spring 框架</title>
      <link href="/2018/10/20/Java-%E9%9D%A2%E8%AF%95%E9%A2%98%E7%B3%BB%E5%88%97%E7%AF%87-Spring-%E6%A1%86%E6%9E%B6/"/>
      <url>/2018/10/20/Java-%E9%9D%A2%E8%AF%95%E9%A2%98%E7%B3%BB%E5%88%97%E7%AF%87-Spring-%E6%A1%86%E6%9E%B6/</url>
      
        <content type="html"><![CDATA[<h2 id="Spring-框架"><a href="#Spring-框架" class="headerlink" title="Spring 框架"></a>Spring 框架</h2><h3 id="【Spring】使用Spring框架的好处是什么？"><a href="#【Spring】使用Spring框架的好处是什么？" class="headerlink" title="【Spring】使用Spring框架的好处是什么？"></a>【Spring】使用Spring框架的好处是什么？</h3><p>轻量：Spring 是轻量的，基本的版本大约2MB</p><p>控制反转：Spring通过控制反转实现了松散耦合，对象们给出它们的依赖，而不是创建或查找依赖的对象们</p><p>面向切面的编程(AOP)：Spring支持面向切面的编程，并且把应用业务逻辑和系统服务分开</p><p>容器：Spring 包含并管理应用中对象的生命周期和配置</p><p>MVC框架：Spring的WEB框架是个精心设计的框架，是Web框架的一个很好的替代品</p><p>事务管理：Spring 提供一个持续的事务管理接口，可以扩展到上至本地事务下至全局事务（JTA）</p><p>异常处理：Spring 提供方便的API把具体技术相关的异常（比如由JDBC，Hibernate or JDO抛出的）转化为一致的unchecked 异常</p><h3 id="什么是IoC和DI？DI是如何实现的？"><a href="#什么是IoC和DI？DI是如何实现的？" class="headerlink" title="什么是IoC和DI？DI是如何实现的？"></a>什么是IoC和DI？DI是如何实现的？</h3><p>答：IoC叫控制反转，是Inversion of Control的缩写，DI（Dependency Injection）叫依赖注入，是对IoC更简单的诠释。控制反转是把传统上由程序代码直接操控的对象的调用权交给容器，通过容器来实现对象组件的装配和管理。所谓的”控制反转”就是对组件对象控制权的转移，从程序代码本身转移到了外部容器，由容器来创建对象并管理对象之间的依赖关系。IoC体现了好莱坞原则 - “Don’t call me, we will call you”。依赖注入的基本原则是应用组件不应该负责查找资源或者其他依赖的协作对象。配置对象的工作应该由容器负责，查找资源的逻辑应该从应用组件的代码中抽取出来，交给容器来完成。DI是对IoC更准确的描述，即组件之间的依赖关系由容器在运行期决定，形象的来说，即由容器动态的将某种依赖关系注入到组件之中。</p><p>举个例子：一个类A需要用到接口B中的方法，那么就需要为类A和接口B建立关联或依赖关系，最原始的方法是在类A中创建一个接口B的实现类C的实例，但这种方法需要开发人员自行维护二者的依赖关系，也就是说当依赖关系发生变动的时候需要修改代码并重新构建整个系统。如果通过一个容器来管理这些对象以及对象的依赖关系，则只需要在类A中定义好用于关联接口B的方法（构造器或setter方法），将类A和接口B的实现类C放入容器中，通过对容器的配置来实现二者的关联。</p><p>依赖注入可以通过setter方法注入（设值注入）、构造器注入和接口注入三种方式来实现，Spring支持setter注入和构造器注入，通常使用构造器注入来注入必须的依赖关系，对于可选的依赖关系，则setter注入是更好的选择，setter注入需要类提供无参构造器或者无参的静态工厂方法来创建对象。</p><h3 id="Spring中Bean的作用域有哪些？"><a href="#Spring中Bean的作用域有哪些？" class="headerlink" title="Spring中Bean的作用域有哪些？"></a>Spring中Bean的作用域有哪些？</h3><p>答：在Spring的早期版本中，仅有两个作用域：singleton和prototype，前者表示Bean以单例的方式存在；后者表示每次从容器中调用Bean时，都会返回一个新的实例，prototype通常翻译为原型。</p><p>补充：设计模式中的创建型模式中也有一个原型模式，原型模式也是一个常用的模式，例如做一个室内设计软件，所有的素材都在工具箱中，而每次从工具箱中取出的都是素材对象的一个原型，可以通过对象克隆来实现原型模式。</p><p>Spring 2.x中针对WebApplicationContext新增了3个作用域，分别是：request（每次HTTP请求都会创建一个新的Bean）、session（同一个HttpSession共享同一个Bean，不同的HttpSession使用不同的Bean）和globalSession（同一个全局Session共享一个Bean）。</p><p>说明：单例模式和原型模式都是重要的设计模式。一般情况下，无状态或状态不可变的类适合使用单例模式。在传统开发中，由于DAO持有Connection这个非线程安全对象因而没有使用单例模式；但在Spring环境下，所有DAO类对可以采用单例模式，因为Spring利用AOP和Java API中的ThreadLocal对非线程安全的对象进行了特殊处理。</p><p>ThreadLocal为解决多线程程序的并发问题提供了一种新的思路。ThreadLocal，顾名思义是线程的一个本地化对象，当工作于多线程中的对象使用ThreadLocal维护变量时，ThreadLocal为每个使用该变量的线程分配一个独立的变量副本，所以每一个线程都可以独立的改变自己的副本，而不影响其他线程所对应的副本。从线程的角度看，这个变量就像是线程的本地变量。</p><p>ThreadLocal类非常简单好用，只有四个方法，能用上的也就是下面三个方法： </p><ul><li>void set(T value)：设置当前线程的线程局部变量的值。 </li><li>T get()：获得当前线程所对应的线程局部变量的值。 </li><li>void remove()：删除当前线程中线程局部变量的值。</li></ul><p>ThreadLocal是如何做到为每一个线程维护一份独立的变量副本的呢？在ThreadLocal类中有一个Map，键为线程对象，值是其线程对应的变量的副本，自己要模拟实现一个ThreadLocal类其实并不困难，代码如下所示：</p><p>import java.util.Collections;</p><p>import java.util.HashMap;</p><p>import java.util.Map;</p><p>public class MyThreadLocal<t> {</t></p><p>​    private Map&lt;Thread, T&gt; map = Collections.synchronizedMap(new HashMap&lt;Thread, T&gt;());</p><p>​    public void set(T newValue) {</p><p>​        map.put(Thread.currentThread(), newValue);</p><p>​    }</p><p>​    public T get() {</p><p>​        return map.get(Thread.currentThread());</p><p>​    }</p><p>​    public void remove() {</p><p>​        map.remove(Thread.currentThread());</p><p>​    }</p><p>}</p><h3 id="解释一下什么叫AOP（面向切面编程）？"><a href="#解释一下什么叫AOP（面向切面编程）？" class="headerlink" title="解释一下什么叫AOP（面向切面编程）？"></a>解释一下什么叫AOP（面向切面编程）？</h3><p>答：AOP（Aspect-Oriented Programming）指一种程序设计范型，该范型以一种称为切面（aspect）的语言构造为基础，切面是一种新的模块化机制，用来描述分散在对象、类或方法中的横切关注点（crosscutting concern）。</p><h3 id="你是如何理解”横切关注”这个概念的？"><a href="#你是如何理解”横切关注”这个概念的？" class="headerlink" title="你是如何理解”横切关注”这个概念的？"></a>你是如何理解”横切关注”这个概念的？</h3><p>答：”横切关注”是会影响到整个应用程序的关注功能，它跟正常的业务逻辑是正交的，没有必然的联系，但是几乎所有的业务逻辑都会涉及到这些关注功能。通常，事务、日志、安全性等关注就是应用中的横切关注功能。</p><h3 id="你如何理解AOP中的连接点（Joinpoint）、切点（Pointcut）、增强（Advice）、引介（Introduction）、织入（Weaving）、切面（Aspect）这些概念？"><a href="#你如何理解AOP中的连接点（Joinpoint）、切点（Pointcut）、增强（Advice）、引介（Introduction）、织入（Weaving）、切面（Aspect）这些概念？" class="headerlink" title="你如何理解AOP中的连接点（Joinpoint）、切点（Pointcut）、增强（Advice）、引介（Introduction）、织入（Weaving）、切面（Aspect）这些概念？"></a>你如何理解AOP中的连接点（Joinpoint）、切点（Pointcut）、增强（Advice）、引介（Introduction）、织入（Weaving）、切面（Aspect）这些概念？</h3><p>答：<br>a. 连接点（Joinpoint）：程序执行的某个特定位置（如：某个方法调用前、调用后，方法抛出异常后）。一个类或一段程序代码拥有一些具有边界性质的特定点，这些代码中的特定点就是连接点。Spring仅支持方法的连接点。<br>b. 切点（Pointcut）：如果连接点相当于数据中的记录，那么切点相当于查询条件，一个切点可以匹配多个连接点。Spring AOP的规则解析引擎负责解析切点所设定的查询条件，找到对应的连接点。<br>c. 增强（Advice）：增强是织入到目标类连接点上的一段程序代码。Spring提供的增强接口都是带方位名的，如：BeforeAdvice、AfterReturningAdvice、ThrowsAdvice等。很多资料上将增强译为“通知”，这明显是个词不达意的翻译，让很多程序员困惑了许久。</p><p>说明： Advice在国内的很多书面资料中都被翻译成”通知”，但是很显然这个翻译无法表达其本质，有少量的读物上将这个词翻译为”增强”，这个翻译是对Advice较为准确的诠释，我们通过AOP将横切关注功能加到原有的业务逻辑上，这就是对原有业务逻辑的一种增强，这种增强可以是前置增强、后置增强、返回后增强、抛异常时增强和包围型增强。</p><p>d. 引介（Introduction）：引介是一种特殊的增强，它为类添加一些属性和方法。这样，即使一个业务类原本没有实现某个接口，通过引介功能，可以动态的未该业务类添加接口的实现逻辑，让业务类成为这个接口的实现类。<br>e. 织入（Weaving）：织入是将增强添加到目标类具体连接点上的过程，AOP有三种织入方式：①编译期织入：需要特殊的Java编译期（例如AspectJ的ajc）；②装载期织入：要求使用特殊的类加载器，在装载类的时候对类进行增强；③运行时织入：在运行时为目标类生成代理实现增强。Spring采用了动态代理的方式实现了运行时织入，而AspectJ采用了编译期织入和装载期织入的方式。<br>f. 切面（Aspect）：切面是由切点和增强（引介）组成的，它包括了对横切关注功能的定义，也包括了对连接点的定义。</p><p>补充：代理模式是GoF提出的23种设计模式中最为经典的模式之一，代理模式是对象的结构模式，它给某一个对象提供一个代理对象，并由代理对象控制对原对象的引用。简单的说，代理对象可以完成比原对象更多的职责，当需要为原对象添加横切关注功能时，就可以使用原对象的代理对象。我们在打开Office系列的Word文档时，如果文档中有插图，当文档刚加载时，文档中的插图都只是一个虚框占位符，等用户真正翻到某页要查看该图片时，才会真正加载这张图，这其实就是对代理模式的使用，代替真正图片的虚框就是一个虚拟代理；Hibernate的load方法也是返回一个虚拟代理对象，等用户真正需要访问对象的属性时，才向数据库发出SQL语句获得真实对象。</p><p>下面用一个找枪手代考的例子演示代理模式的使用：</p><p>/**</p><ul><li>参考人员接口</li><li><p>@author 骆昊</p><p>*</p><p>*/</p></li></ul><p>public interface Candidate {</p><p>​    /**</p><p>​     * 答题</p><p>​     */</p><p>​    public void answerTheQuestions();</p><p>}</p><p>/**</p><ul><li>懒学生</li><li><p>@author 骆昊</p><p>*</p><p>*/</p></li></ul><p>public class LazyStudent implements Candidate {</p><p>​    private String name;        // 姓名</p><p>​    public LazyStudent(String name) {</p><p>​        this.name = name;</p><p>​    }</p><p>​    @Override</p><p>​    public void answerTheQuestions() {</p><p>​        // 懒学生只能写出自己的名字不会答题</p><p>​        System.out.println(“姓名: “ + name);</p><p>​    }</p><p>}</p><p>/**</p><ul><li>枪手</li><li><p>@author 骆昊</p><p>*</p><p>*/</p></li></ul><p>public class Gunman implements Candidate {</p><p>​    private Candidate target;   // 被代理对象</p><p>​    public Gunman(Candidate target) {</p><p>​        this.target = target;</p><p>​    }</p><p>​    @Override</p><p>​    public void answerTheQuestions() {</p><p>​        // 枪手要写上代考的学生的姓名</p><p>​        target.answerTheQuestions();</p><p>​        // 枪手要帮助懒学生答题并交卷</p><p>​        System.out.println(“奋笔疾书正确答案”);</p><p>​        System.out.println(“交卷”);</p><p>​    }</p><p>}</p><p>public class ProxyTest1 {</p><p>​    public static void main(String[] args) {</p><p>​        Candidate c = new Gunman(new LazyStudent(“王小二”));</p><p>​        c.answerTheQuestions();</p><p>​    }</p><p>}</p><p>说明：从JDK 1.3开始，Java提供了动态代理技术，允许开发者在运行时创建接口的代理实例，主要包括Proxy类和InvocationHandler接口。下面的例子使用动态代理为ArrayList编写一个代理，在添加和删除元素时，在控制台打印添加或删除的元素以及ArrayList的大小：</p><p>import java.lang.reflect.InvocationHandler;</p><p>import java.lang.reflect.Method;</p><p>import java.util.List;</p><p>public class ListProxy<t> implements InvocationHandler {</t></p><p>​    private List<t> target;</t></p><p>​    public ListProxy(List<t> target) {</t></p><p>​        this.target = target;</p><p>​    }</p><p>​    @Override</p><p>​    public Object invoke(Object proxy, Method method, Object[] args)</p><p>​            throws Throwable {</p><p>​        Object retVal = null;</p><p>​        System.out.println(“[“ + method.getName() + “: “ + args[0] + “]”);</p><p>​        retVal = method.invoke(target, args);</p><p>​        System.out.println(“[size=” + target.size() + “]”);</p><p>​        return retVal;</p><p>​    }</p><p>}</p><p>import java.lang.reflect.Proxy;</p><p>import java.util.ArrayList;</p><p>import java.util.List;</p><p>public class ProxyTest2 {</p><p>​    @SuppressWarnings(“unchecked”)</p><p>​    public static void main(String[] args) {</p><p>​        List<string> list = new ArrayList<string>();</string></string></p><p>​        Class&lt;?&gt; clazz = list.getClass();</p><p>​        ListProxy<string> myProxy = new ListProxy<string>(list);</string></string></p><p>​        List<string> newList = (List<string>) </string></string></p><p>​                Proxy.newProxyInstance(clazz.getClassLoader(), </p><p>​                clazz.getInterfaces(), myProxy);</p><p>​        newList.add(“apple”);</p><p>​        newList.add(“banana”);</p><p>​        newList.add(“orange”);</p><p>​        newList.remove(“banana”);</p><p>​    }</p><p>}</p><p>说明：使用Java的动态代理有一个局限性就是代理的类必须要实现接口，虽然面向接口编程是每个优秀的Java程序都知道的规则，但现实往往不尽如人意，对于没有实现接口的类如何为其生成代理呢？继承！继承是最经典的扩展已有代码能力的手段，虽然继承常常被初学者滥用，但继承也常常被进阶的程序员忽视。CGLib采用非常底层的字节码生成技术，通过为一个类创建子类来生成代理，它弥补了Java动态代理的不足，因此Spring中动态代理和CGLib都是创建代理的重要手段，对于实现了接口的类就用动态代理为其生成代理类，而没有实现接口的类就用CGLib通过继承的方式为其创建代理。</p><h3 id="Spring中自动装配的方式有哪些？"><a href="#Spring中自动装配的方式有哪些？" class="headerlink" title="Spring中自动装配的方式有哪些？"></a>Spring中自动装配的方式有哪些？</h3><p> 答： </p><ul><li>no：不进行自动装配，手动设置Bean的依赖关系。 </li><li>byName：根据Bean的名字进行自动装配。 </li><li>byType：根据Bean的类型进行自动装配。 </li><li>constructor：类似于byType，不过是应用于构造器的参数，如果正好有一个Bean与构造器的参数类型相同则可以自动装配，否则会导致错误。 </li><li>autodetect：如果有默认的构造器，则通过constructor的方式进行自动装配，否则使用byType的方式进行自动装配。</li></ul><p>说明：自动装配没有自定义装配方式那么精确，而且不能自动装配简单属性（基本类型、字符串等），在使用时应注意。</p><h3 id="Spring中如何使用注解来配置Bean？有哪些相关的注解？"><a href="#Spring中如何使用注解来配置Bean？有哪些相关的注解？" class="headerlink" title="Spring中如何使用注解来配置Bean？有哪些相关的注解？"></a>Spring中如何使用注解来配置Bean？有哪些相关的注解？</h3><p>答：首先需要在Spring配置文件中增加如下配置：</p><p>&lt;context:component-scan base-package=”org.example”/&gt;</p><p>然后可以用@Component、@Controller、@Service、@Repository注解来标注需要由Spring IoC容器进行对象托管的类。这几个注解没有本质区别，只不过@Controller通常用于控制器，@Service通常用于业务逻辑类，@Repository通常用于仓储类（例如我们的DAO实现类），普通的类用@Component来标注。</p><h3 id="Spring支持的事务管理类型有哪些？你在项目中使用哪种方式？"><a href="#Spring支持的事务管理类型有哪些？你在项目中使用哪种方式？" class="headerlink" title="Spring支持的事务管理类型有哪些？你在项目中使用哪种方式？"></a>Spring支持的事务管理类型有哪些？你在项目中使用哪种方式？</h3><p>答：Spring支持编程式事务管理和声明式事务管理。许多Spring框架的用户选择声明式事务管理，因为这种方式和应用程序的关联较少，因此更加符合轻量级容器的概念。声明式事务管理要优于编程式事务管理，尽管在灵活性方面它弱于编程式事务管理，因为编程式事务允许你通过代码控制业务。</p><p>事务分为全局事务和局部事务。全局事务由应用服务器管理，需要底层服务器JTA支持（如WebLogic、WildFly等）。局部事务和底层采用的持久化方案有关，例如使用JDBC进行持久化时，需要使用Connetion对象来操作事务；而采用Hibernate进行持久化时，需要使用Session对象来操作事务。</p><p>Spring提供了如下所示的事务管理器。</p><table><thead><tr><th>事务管理器实现类</th><th>目标对象</th></tr></thead><tbody><tr><td>DataSourceTransactionManager</td><td>注入DataSource</td></tr><tr><td>HibernateTransactionManager</td><td>注入SessionFactory</td></tr><tr><td>JdoTransactionManager</td><td>管理JDO事务</td></tr><tr><td>JtaTransactionManager</td><td>使用JTA管理事务</td></tr><tr><td>PersistenceBrokerTransactionManager</td><td>管理Apache的OJB事务</td></tr></tbody></table><p>这些事务的父接口都是PlatformTransactionManager。Spring的事务管理机制是一种典型的策略模式，PlatformTransactionManager代表事务管理接口，该接口定义了三个方法，该接口并不知道底层如何管理事务，但是它的实现类必须提供getTransaction()方法（开启事务）、commit()方法（提交事务）、rollback()方法（回滚事务）的多态实现，这样就可以用不同的实现类代表不同的事务管理策略。使用JTA全局事务策略时，需要底层应用服务器支持，而不同的应用服务器所提供的JTA全局事务可能存在细节上的差异，因此实际配置全局事务管理器是可能需要使用JtaTransactionManager的子类，如：WebLogicJtaTransactionManager（Oracle的WebLogic服务器提供）、UowJtaTransactionManager（IBM的WebSphere服务器提供）等。</p><p>编程式事务管理如下所示。</p><p>&lt;?xml version=”1.0” encoding=”UTF-8”?&gt;</p> <beans xmlns="http://www.springframework.org/schema/beans" ​="" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p" xsi:schemalocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd​     http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd"><br><br><br><br>​     &lt;context:component-scan base-package=”com.jackfrued”/&gt;<br><br><br><br>​     <bean id="propertyConfig" ​="" class="org.springframework.beans.factory.config.  PropertyPlaceholderConfigurer"><br><br>​         <property name="location"><br><br>​             <value>jdbc.properties</value><br><br>​         </property><br><br>​     </bean><br><br><br><br>​     <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource"><br><br>​         <property name="driverClassName"><br><br>​             <value>${db.driver}</value><br><br>​         </property><br><br>​         <property name="url"><br><br>​             <value>${db.url}</value><br><br>​         </property><br><br>​         <property name="username"><br><br>​             <value>${db.username}</value><br><br>​         </property><br><br>​         <property name="password"><br><br>​             <value>${db.password}</value><br><br>​         </property><br><br>​     </bean><br><br><br><br>​     <bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate"><br><br>​         <property name="dataSource"><br><br>​             <ref bean="dataSource"><br><br>​         </ref></property><br><br>​     </bean><br><br><br><br>​     <!-- JDBC事务管理器 --><br><br>​     <bean id="transactionManager" ​="" class="org.springframework.jdbc.datasource.​       DataSourceTransactionManager" 　scope="singleton"><br><br>​         <property name="dataSource"><br><br>​             <ref bean="dataSource"><br><br>​         </ref></property><br><br>​     </bean><br><br><br><br>​     <!-- 声明事务模板 --><br><br>​     <bean id="transactionTemplate" ​="" class="org.springframework.transaction.support.   TransactionTemplate"><br><br>​         <property name="transactionManager"><br><br>​             <ref bean="transactionManager"><br><br>​         </ref></property><br><br>​     </bean><br><br><br><br></beans><p>package com.jackfrued.dao.impl;</p><p>import org.springframework.beans.factory.annotation.Autowired;</p><p>import org.springframework.jdbc.core.JdbcTemplate;</p><p>import com.jackfrued.dao.EmpDao;</p><p>import com.jackfrued.entity.Emp;</p><p>@Repository</p><p>public class EmpDaoImpl implements EmpDao {</p><p>​    @Autowired</p><p>​    private JdbcTemplate jdbcTemplate;</p><p>​    @Override</p><p>​    public boolean save(Emp emp) {</p><p>​        String sql = “insert into emp values (?,?,?)”;</p><p>​        return jdbcTemplate.update(sql, emp.getId(), emp.getName(), emp.getBirthday()) == 1;</p><p>​    }</p><p>}</p><p>package com.jackfrued.biz.impl;</p><p>import org.springframework.beans.factory.annotation.Autowired;</p><p>import org.springframework.stereotype.Service;</p><p>import org.springframework.transaction.TransactionStatus;</p><p>import org.springframework.transaction.support.TransactionCallbackWithoutResult;</p><p>import org.springframework.transaction.support.TransactionTemplate;</p><p>import com.jackfrued.biz.EmpService;</p><p>import com.jackfrued.dao.EmpDao;</p><p>import com.jackfrued.entity.Emp;</p><p>@Service</p><p>public class EmpServiceImpl implements EmpService {</p><p>​    @Autowired</p><p>​    private TransactionTemplate txTemplate;</p><p>​    @Autowired</p><p>​    private EmpDao empDao;</p><p>​    @Override</p><p>​    public void addEmp(final Emp emp) {</p><p>​        txTemplate.execute(new TransactionCallbackWithoutResult() {</p><p>​            @Override</p><p>​            protected void doInTransactionWithoutResult(TransactionStatus txStatus) {</p><p>​                empDao.save(emp);</p><p>​            }</p><p>​        });</p><p>​    }</p><p>}</p><p>声明式事务如下图所示，以Spring整合Hibernate 3为例，包括完整的DAO和业务逻辑代码。</p><p>&lt;?xml version=”1.0” encoding=”UTF-8”?&gt;</p><beans xmlns="http://www.springframework.org/schema/beans" ​="" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p" xmlns:context="http://www.springframework.org/schema/context" xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx" xsi:schemalocation="http://www.springframework.org/schema/beans​           http://www.springframework.org/schema/beans/spring-beans-3.2.xsd​           http://www.springframework.org/schema/context​           http://www.springframework.org/schema/context/spring-context-3.2.xsd​           http://www.springframework.org/schema/aop​           http://www.springframework.org/schema/aop/spring-aop-3.2.xsd​           http://www.springframework.org/schema/tx​           http://www.springframework.org/schema/tx/spring-tx-3.2.xsd"><br><br><br><br>​    <!-- 配置由Spring IoC容器托管的对象对应的被注解的类所在的包 --><br><br>​    &lt;context:component-scan base-package=”com.jackfrued” /&gt;<br><br><br><br>​    <!-- 配置通过自动生成代理实现AOP功能 --><br><br>​    &lt;aop:aspectj-autoproxy /&gt;<br><br><br><br>​    <!-- 配置数据库连接池 (DBCP) --><br><br>​    <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" ​="" destroy-method="close"><br><br>​        <!-- 配置驱动程序类 --><br><br>​        <property name="driverClassName" value="com.mysql.jdbc.Driver"><br><br>​        <!-- 配置连接数据库的URL --><br><br>​        <property name="url" value="jdbc:mysql://localhost:3306/myweb"><br><br>​        <!-- 配置访问数据库的用户名 --><br><br>​        <property name="username" value="root"><br><br>​        <!-- 配置访问数据库的口令 --><br><br>​        <property name="password" value="123456"><br><br>​        <!-- 配置最大连接数 --><br><br>​        <property name="maxActive" value="150"><br><br>​        <!-- 配置最小空闲连接数 --><br><br>​        <property name="minIdle" value="5"><br><br>​        <!-- 配置最大空闲连接数 --><br><br>​        <property name="maxIdle" value="20"><br><br>​        <!-- 配置初始连接数 --><br><br>​        <property name="initialSize" value="10"><br><br>​        <!-- 配置连接被泄露时是否生成日志 --><br><br>​        <property name="logAbandoned" value="true"><br><br>​        <!-- 配置是否删除超时连接 --><br><br>​        <property name="removeAbandoned" value="true"><br><br>​        <!-- 配置删除超时连接的超时门限值(以秒为单位) --><br><br>​        <property name="removeAbandonedTimeout" value="120"><br><br>​        <!-- 配置超时等待时间(以毫秒为单位) --><br><br>​        <property name="maxWait" value="5000"><br><br>​        <!-- 配置空闲连接回收器线程运行的时间间隔(以毫秒为单位) --><br><br>​        <property name="timeBetweenEvictionRunsMillis" value="300000"><br><br>​        <!-- 配置连接空闲多长时间后(以毫秒为单位)被断开连接 --><br><br>​        <property name="minEvictableIdleTimeMillis" value="60000"><br><br>​    </property></property></property></property></property></property></property></property></property></property></property></property></property></property></bean><br><br><br><br>​    <!-- 配置Spring提供的支持注解ORM映射的Hibernate会话工厂 --><br><br>​    <bean id="sessionFactory" ​="" class="org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean"><br><br>​        <!-- 通过setter注入数据源属性 --><br><br>​        <property name="dataSource" ref="dataSource"><br><br>​        <!-- 配置实体类所在的包 --><br><br>​        <property name="packagesToScan" value="com.jackfrued.entity"><br><br>​        <!-- 配置Hibernate的相关属性 --><br><br>​        <property name="hibernateProperties"><br><br>​            <!-- 在项目调试完成后要删除show_sql和format_sql属性否则对性能有显著影响 --><br><br>​            <value><br><br>​                hibernate.dialect=org.hibernate.dialect.MySQL5Dialect<br><br>​            </value><br><br>​        </property><br><br>​    </property></property></bean><br><br><br><br>​    <!-- 配置Spring提供的Hibernate事务管理器 --><br><br>​    <bean id="transactionManager" ​="" class="org.springframework.orm.hibernate3.HibernateTransactionManager"><br><br>​        <!-- 通过setter注入Hibernate会话工厂 --><br><br>​        <property name="sessionFactory" ref="sessionFactory"><br><br>​    </property></bean><br><br><br><br>​    <!-- 配置基于注解配置声明式事务 --><br><br>​    &lt;tx:annotation-driven /&gt;<br><br><br><br></beans><p>package com.jackfrued.dao;</p><p>import java.io.Serializable;</p><p>import java.util.List;</p><p>import com.jackfrued.comm.QueryBean;</p><p>import com.jackfrued.comm.QueryResult;</p><p>/**</p><ul><li>数据访问对象接口(以对象为单位封装CRUD操作)</li><li><p>@author 骆昊</p><p>*</p></li><li><p>@param <e> 实体类型</e></p></li><li><p>@param <k> 实体标识字段的类型</k></p><p>*/</p></li></ul><p>public interface BaseDao &lt;E, K extends Serializable&gt; {</p><p>​    /**</p><p>​     * 新增</p><p>​     * @param entity 业务实体对象</p><p>​     * @return 增加成功返回实体对象的标识</p><p>​     */</p><p>​    public K save(E entity);</p><p>​    /**</p><p>​     * 删除</p><p>​     * @param entity 业务实体对象</p><p>​     */</p><p>​    public void delete(E entity);</p><p>​    /**</p><p>​     * 根据ID删除</p><p>​     * @param id 业务实体对象的标识</p><p>​     * @return 删除成功返回true否则返回false</p><p>​     */</p><p>​    public boolean deleteById(K id);</p><p>​    /**</p><p>​     * 修改</p><p>​     * @param entity 业务实体对象</p><p>​     * @return 修改成功返回true否则返回false</p><p>​     */</p><p>​    public void update(E entity);</p><p>​    /**</p><p>​     * 根据ID查找业务实体对象</p><p>​     * @param id 业务实体对象的标识</p><p>​     * @return 业务实体对象对象或null</p><p>​     */</p><p>​    public E findById(K id);</p><p>​    /**</p><p>​     * 根据ID查找业务实体对象</p><p>​     * @param id 业务实体对象的标识</p><p>​     * @param lazy 是否使用延迟加载</p><p>​     * @return 业务实体对象对象</p><p>​     */</p><p>​    public E findById(K id, boolean lazy);</p><p>​    /**</p><p>​     * 查找所有业务实体对象</p><p>​     * @return 装所有业务实体对象的列表容器</p><p>​     */</p><p>​    public List<e> findAll();</e></p><p>​    /**</p><p>​     * 分页查找业务实体对象</p><p>​     * @param page 页码</p><p>​     * @param size 页面大小</p><p>​     * @return 查询结果对象</p><p>​     */</p><p>​    public QueryResult<e> findByPage(int page, int size);</e></p><p>​    /**</p><p>​     * 分页查找业务实体对象</p><p>​     * @param queryBean 查询条件对象</p><p>​     * @param page 页码</p><p>​     * @param size 页面大小</p><p>​     * @return 查询结果对象</p><p>​     */</p><p>​    public QueryResult<e> findByPage(QueryBean queryBean, int page, int size);</e></p><p>}</p><p>package com.jackfrued.dao;</p><p>import java.io.Serializable;</p><p>import java.util.List;</p><p>import com.jackfrued.comm.QueryBean;</p><p>import com.jackfrued.comm.QueryResult;</p><p>/**</p><ul><li>BaseDao的缺省适配器</li><li><p>@author 骆昊</p><p>*</p></li><li><p>@param <e> 实体类型</e></p></li><li><p>@param <k> 实体标识字段的类型</k></p><p>*/</p></li></ul><p>public abstract class BaseDaoAdapter&lt;E, K extends Serializable&gt; implements</p><p>​        BaseDao&lt;E, K&gt; {</p><p>​    @Override</p><p>​    public K save(E entity) {</p><p>​        return null;</p><p>​    }</p><p>​    @Override</p><p>​    public void delete(E entity) {</p><p>​    }</p><p>​    @Override</p><p>​    public boolean deleteById(K id) {</p><p>​        E entity = findById(id);</p><p>​        if(entity != null) {</p><p>​            delete(entity);</p><p>​            return true;</p><p>​        }</p><p>​        return false;</p><p>​    }</p><p>​    @Override</p><p>​    public void update(E entity) {</p><p>​    }</p><p>​    @Override</p><p>​    public E findById(K id) {</p><p>​        return null;</p><p>​    }</p><p>​    @Override</p><p>​    public E findById(K id, boolean lazy) {</p><p>​        return null;</p><p>​    }</p><p>​    @Override</p><p>​    public List<e> findAll() {</e></p><p>​        return null;</p><p>​    }</p><p>​    @Override</p><p>​    public QueryResult<e> findByPage(int page, int size) {</e></p><p>​        return null;</p><p>​    }</p><p>​    @Override</p><p>​    public QueryResult<e> findByPage(QueryBean queryBean, int page, int size) {</e></p><p>​        return null;</p><p>​    }</p><p>}</p><p>package com.jackfrued.dao;</p><p>import java.io.Serializable;</p><p>import java.lang.reflect.ParameterizedType;</p><p>import java.util.ArrayList;</p><p>import java.util.Collections;</p><p>import java.util.List;</p><p>import org.hibernate.Query;</p><p>import org.hibernate.Session;</p><p>import org.hibernate.SessionFactory;</p><p>import org.springframework.beans.factory.annotation.Autowired;</p><p>import com.jackfrued.comm.HQLQueryBean;</p><p>import com.jackfrued.comm.QueryBean;</p><p>import com.jackfrued.comm.QueryResult;</p><p>/**</p><ul><li>基于Hibernate的BaseDao实现类</li><li><p>@author 骆昊</p><p>*</p></li><li><p>@param <e> 实体类型</e></p></li><li><p>@param <k> 主键类型</k></p><p>*/</p></li></ul><p>@SuppressWarnings(value = {“unchecked”})</p><p>public abstract class BaseDaoHibernateImpl&lt;E, K extends Serializable&gt; extends BaseDaoAdapter&lt;E, K&gt; {</p><p>​    @Autowired</p><p>​    protected SessionFactory sessionFactory;</p><p>​    private Class&lt;?&gt; entityClass;       // 业务实体的类对象</p><p>​    private String entityName;          // 业务实体的名字</p><p>​    public BaseDaoHibernateImpl() {</p><p>​        ParameterizedType pt = (ParameterizedType) this.getClass().getGenericSuperclass();</p><p>​        entityClass = (Class&lt;?&gt;) pt.getActualTypeArguments()[0];</p><p>​        entityName = entityClass.getSimpleName();</p><p>​    }</p><p>​    @Override</p><p>​    public K save(E entity) {</p><p>​        return (K) sessionFactory.getCurrentSession().save(entity);</p><p>​    }</p><p>​    @Override</p><p>​    public void delete(E entity) {</p><p>​        sessionFactory.getCurrentSession().delete(entity);</p><p>​    }</p><p>​    @Override</p><p>​    public void update(E entity) {</p><p>​        sessionFactory.getCurrentSession().update(entity);</p><p>​    }</p><p>​    @Override</p><p>​    public E findById(K id) {</p><p>​        return findById(id, false);</p><p>​    }</p><p>​    @Override</p><p>​    public E findById(K id, boolean lazy) {</p><p>​        Session session = sessionFactory.getCurrentSession();</p><p>​        return (E) (lazy? session.load(entityClass, id) : session.get(entityClass, id));</p><p>​    }</p><p>​    @Override</p><p>​    public List<e> findAll() {</e></p><p>​        return sessionFactory.getCurrentSession().createCriteria(entityClass).list();</p><p>​    }</p><p>​    @Override</p><p>​    public QueryResult<e> findByPage(int page, int size) {</e></p><p>​        return new QueryResult<e>(</e></p><p>​            findByHQLAndPage(“from “ + entityName , page, size),</p><p>​            getCountByHQL(“select count(*) from “ + entityName)</p><p>​        );</p><p>​    }</p><p>​    @Override</p><p>​    public QueryResult<e> findByPage(QueryBean queryBean, int page, int size) {</e></p><p>​        if(queryBean instanceof HQLQueryBean) {</p><p>​            HQLQueryBean hqlQueryBean = (HQLQueryBean) queryBean;</p><p>​            return new QueryResult<e>(</e></p><p>​                findByHQLAndPage(hqlQueryBean.getQueryString(), page, size, hqlQueryBean.getParameters()),</p><p>​                getCountByHQL(hqlQueryBean.getCountString(), hqlQueryBean.getParameters())</p><p>​            );</p><p>​        }</p><p>​        return null;</p><p>​    }</p><p>​    /**</p><p>​     * 根据HQL和可变参数列表进行查询</p><p>​     * @param hql 基于HQL的查询语句</p><p>​     * @param params 可变参数列表</p><p>​     * @return 持有查询结果的列表容器或空列表容器</p><p>​     */</p><p>​    protected List<e> findByHQL(String hql, Object… params) {</e></p><p>​        return this.findByHQL(hql, getParamList(params));</p><p>​    }</p><p>​    /**</p><p>​     * 根据HQL和参数列表进行查询</p><p>​     * @param hql 基于HQL的查询语句</p><p>​     * @param params 查询参数列表</p><p>​     * @return 持有查询结果的列表容器或空列表容器</p><p>​     */</p><p>​    protected List<e> findByHQL(String hql, List<object> params) {</object></e></p><p>​        List<e> list = createQuery(hql, params).list();</e></p><p>​        return list != null &amp;&amp; list.size() &gt; 0 ? list : Collections.EMPTY_LIST;</p><p>​    }</p><p>​    /**</p><p>​     * 根据HQL和参数列表进行分页查询</p><p>​     * @param hql 基于HQL的查询语句</p><p>​     * @page 页码</p><p>​     * @size 页面大小</p><p>​     * @param params 可变参数列表</p><p>​     * @return 持有查询结果的列表容器或空列表容器</p><p>​     */</p><p>​    protected List<e> findByHQLAndPage(String hql, int page, int size, Object… params) {</e></p><p>​        return this.findByHQLAndPage(hql, page, size, getParamList(params));</p><p>​    }</p><p>​    /**</p><p>​     * 根据HQL和参数列表进行分页查询</p><p>​     * @param hql 基于HQL的查询语句</p><p>​     * @page 页码</p><p>​     * @size 页面大小</p><p>​     * @param params 查询参数列表</p><p>​     * @return 持有查询结果的列表容器或空列表容器</p><p>​     */</p><p>​    protected List<e> findByHQLAndPage(String hql, int page, int size, List<object> params) {</object></e></p><p>​        List<e> list = createQuery(hql, params)</e></p><p>​                .setFirstResult((page - 1) * size)</p><p>​                .setMaxResults(size)</p><p>​                .list();</p><p>​        return list != null &amp;&amp; list.size() &gt; 0 ? list : Collections.EMPTY_LIST;</p><p>​    }</p><p>​    /**</p><p>​     * 查询满足条件的记录数</p><p>​     * @param hql 基于HQL的查询语句</p><p>​     * @param params 可变参数列表</p><p>​     * @return 满足查询条件的总记录数</p><p>​     */</p><p>​    protected long getCountByHQL(String hql, Object… params) {</p><p>​        return this.getCountByHQL(hql, getParamList(params));</p><p>​    }</p><p>​    /**</p><p>​     * 查询满足条件的记录数</p><p>​     * @param hql 基于HQL的查询语句</p><p>​     * @param params 参数列表容器</p><p>​     * @return 满足查询条件的总记录数</p><p>​     */</p><p>​    protected long getCountByHQL(String hql, List<object> params) {</object></p><p>​        return (Long) createQuery(hql, params).uniqueResult();</p><p>​    }</p><p>​    // 创建Hibernate查询对象(Query)</p><p>​    private Query createQuery(String hql, List<object> params) {</object></p><p>​        Query query = sessionFactory.getCurrentSession().createQuery(hql);</p><p>​        for(int i = 0; i &lt; params.size(); i++) {</p><p>​            query.setParameter(i, params.get(i));</p><p>​        }</p><p>​        return query;</p><p>​    }</p><p>​    // 将可变参数列表组装成列表容器</p><p>​    private List<object> getParamList(Object… params) {</object></p><p>​        List<object> paramList = new ArrayList&lt;&gt;();</object></p><p>​        if(params != null) {</p><p>​            for(int i = 0; i &lt; params.length; i++) {</p><p>​                paramList.add(params[i]);</p><p>​            }</p><p>​        }</p><p>​        return paramList.size() == 0? Collections.EMPTY_LIST : paramList;</p><p>​    }</p><p>}</p><p>package com.jackfrued.comm;</p><p>import java.util.List;</p><p>/**</p><ul><li>查询条件的接口</li><li><p>@author 骆昊</p><p>*</p><p>*/</p></li></ul><p>public interface QueryBean {</p><p>​    /**</p><p>​     * 添加排序字段</p><p>​     * @param fieldName 用于排序的字段</p><p>​     * @param asc 升序还是降序</p><p>​     * @return 查询条件对象自身(方便级联编程)</p><p>​     */</p><p>​    public QueryBean addOrder(String fieldName, boolean asc);</p><p>​    /**</p><p>​     * 添加排序字段</p><p>​     * @param available 是否添加此排序字段</p><p>​     * @param fieldName 用于排序的字段</p><p>​     * @param asc 升序还是降序</p><p>​     * @return 查询条件对象自身(方便级联编程)</p><p>​     */</p><p>​    public QueryBean addOrder(boolean available, String fieldName, boolean asc);</p><p>​    /**</p><p>​     * 添加查询条件</p><p>​     * @param condition 条件</p><p>​     * @param params 替换掉条件中参数占位符的参数</p><p>​     * @return 查询条件对象自身(方便级联编程)</p><p>​     */</p><p>​    public QueryBean addCondition(String condition, Object… params);</p><p>​    /**</p><p>​     * 添加查询条件</p><p>​     * @param available 是否需要添加此条件</p><p>​     * @param condition 条件</p><p>​     * @param params 替换掉条件中参数占位符的参数</p><p>​     * @return 查询条件对象自身(方便级联编程)</p><p>​     */</p><p>​    public QueryBean addCondition(boolean available, String condition, Object… params);</p><p>​    /**</p><p>​     * 获得查询语句</p><p>​     * @return 查询语句</p><p>​     */</p><p>​    public String getQueryString();</p><p>​    /**</p><p>​     * 获取查询记录数的查询语句</p><p>​     * @return 查询记录数的查询语句</p><p>​     */</p><p>​    public String getCountString();</p><p>​    /**</p><p>​     * 获得查询参数</p><p>​     * @return 查询参数的列表容器</p><p>​     */</p><p>​    public List<object> getParameters();</object></p><p>}</p><p>package com.jackfrued.comm;</p><p>import java.util.List;</p><p>/**</p><ul><li>查询结果</li><li><p>@author 骆昊</p><p>*</p></li><li><p>@param <t> 泛型参数</t></p><p>*/</p></li></ul><p>public class QueryResult<t> {</t></p><p>​    private List<t> result;     // 持有查询结果的列表容器</t></p><p>​    private long totalRecords;  // 查询到的总记录数</p><p>​    /**</p><p>​     * 构造器</p><p>​     */</p><p>​    public QueryResult() {</p><p>​    }</p><p>​    /**</p><p>​     * 构造器</p><p>​     * @param result 持有查询结果的列表容器</p><p>​     * @param totalRecords 查询到的总记录数</p><p>​     */</p><p>​    public QueryResult(List<t> result, long totalRecords) {</t></p><p>​        this.result = result;</p><p>​        this.totalRecords = totalRecords;</p><p>​    }</p><p>​    public List<t> getResult() {</t></p><p>​        return result;</p><p>​    }</p><p>​    public void setResult(List<t> result) {</t></p><p>​        this.result = result;</p><p>​    }</p><p>​    public long getTotalRecords() {</p><p>​        return totalRecords;</p><p>​    }</p><p>​    public void setTotalRecords(long totalRecords) {</p><p>​        this.totalRecords = totalRecords;</p><p>​    }</p><p>}</p><p>package com.jackfrued.dao;</p><p>import com.jackfrued.comm.QueryResult;</p><p>import com.jackfrued.entity.Dept;</p><p>/**</p><ul><li>部门数据访问对象接口</li><li><p>@author 骆昊</p><p>*</p><p>*/</p></li></ul><p>public interface DeptDao extends BaseDao&lt;Dept, Integer&gt; {</p><p>​    /**</p><p>​     * 分页查询顶级部门</p><p>​     * @param page 页码</p><p>​     * @param size 页码大小</p><p>​     * @return 查询结果对象</p><p>​     */</p><p>​    public QueryResult<dept> findTopDeptByPage(int page, int size);</dept></p><p>}</p><p>package com.jackfrued.dao.impl;</p><p>import java.util.List;</p><p>import org.springframework.stereotype.Repository;</p><p>import com.jackfrued.comm.QueryResult;</p><p>import com.jackfrued.dao.BaseDaoHibernateImpl;</p><p>import com.jackfrued.dao.DeptDao;</p><p>import com.jackfrued.entity.Dept;</p><p>@Repository</p><p>public class DeptDaoImpl extends BaseDaoHibernateImpl&lt;Dept, Integer&gt; implements DeptDao {</p><p>​    private static final String HQL_FIND_TOP_DEPT = “ from Dept as d where d.superiorDept is null “;</p><p>​    @Override</p><p>​    public QueryResult<dept> findTopDeptByPage(int page, int size) {</dept></p><p>​        List<dept> list = findByHQLAndPage(HQL_FIND_TOP_DEPT, page, size);</dept></p><p>​        long totalRecords = getCountByHQL(“ select count(*) “ + HQL_FIND_TOP_DEPT);</p><p>​        return new QueryResult&lt;&gt;(list, totalRecords);</p><p>​    }</p><p>}</p><p>package com.jackfrued.comm;</p><p>import java.util.List;</p><p>/**</p><ul><li>分页器</li><li><p>@author 骆昊</p><p>*</p></li><li><p>@param <t> 分页数据对象的类型</t></p><p>*/</p></li></ul><p>public class PageBean<t> {</t></p><p>​    private static final int DEFAUL_INIT_PAGE = 1;</p><p>​    private static final int DEFAULT_PAGE_SIZE = 10;</p><p>​    private static final int DEFAULT_PAGE_COUNT = 5;</p><p>​    private List<t> data;           // 分页数据</t></p><p>​    private PageRange pageRange;    // 页码范围</p><p>​    private int totalPage;          // 总页数</p><p>​    private int size;               // 页面大小</p><p>​    private int currentPage;        // 当前页码</p><p>​    private int pageCount;          // 页码数量</p><p>​    /**</p><p>​     * 构造器</p><p>​     * @param currentPage 当前页码</p><p>​     * @param size 页码大小</p><p>​     * @param pageCount 页码数量</p><p>​     */</p><p>​    public PageBean(int currentPage, int size, int pageCount) {</p><p>​        this.currentPage = currentPage &gt; 0 ? currentPage : 1;</p><p>​        this.size = size &gt; 0 ? size : DEFAULT_PAGE_SIZE;</p><p>​        this.pageCount = pageCount &gt; 0 ? size : DEFAULT_PAGE_COUNT;</p><p>​    }</p><p>​    /**</p><p>​     * 构造器</p><p>​     * @param currentPage 当前页码</p><p>​     * @param size 页码大小</p><p>​     */</p><p>​    public PageBean(int currentPage, int size) {</p><p>​        this(currentPage, size, DEFAULT_PAGE_COUNT);</p><p>​    }</p><p>​    /**</p><p>​     * 构造器</p><p>​     * @param currentPage 当前页码</p><p>​     */</p><p>​    public PageBean(int currentPage) {</p><p>​        this(currentPage, DEFAULT_PAGE_SIZE, DEFAULT_PAGE_COUNT);</p><p>​    }</p><p>​    /**</p><p>​     * 构造器</p><p>​     */</p><p>​    public PageBean() {</p><p>​        this(DEFAUL_INIT_PAGE, DEFAULT_PAGE_SIZE, DEFAULT_PAGE_COUNT);</p><p>​    }</p><p>​    public List<t> getData() {</t></p><p>​        return data;</p><p>​    }</p><p>​    public int getStartPage() {</p><p>​        return pageRange != null ? pageRange.getStartPage() : 1;</p><p>​    }</p><p>​    public int getEndPage() {</p><p>​        return pageRange != null ? pageRange.getEndPage() : 1;</p><p>​    }</p><p>​    public long getTotalPage() {</p><p>​        return totalPage;</p><p>​    }</p><p>​    public int getSize() {</p><p>​        return size;</p><p>​    }</p><p>​    public int getCurrentPage() {</p><p>​        return currentPage;</p><p>​    }</p><p>​    /**</p><p>​     * 将查询结果转换为分页数据</p><p>​     * @param queryResult 查询结果对象</p><p>​     */</p><p>​    public void transferQueryResult(QueryResult<t> queryResult) {</t></p><p>​        long totalRecords = queryResult.getTotalRecords();</p><p>​        data = queryResult.getResult();</p><p>​        totalPage = (int) ((totalRecords + size - 1) / size); </p><p>​        totalPage = totalPage &gt;= 0 ? totalPage : Integer.MAX_VALUE;</p><p>​        this.pageRange = new PageRange(pageCount, currentPage, totalPage);</p><p>​    }</p><p>}</p><p>package com.jackfrued.comm;</p><p>/**</p><ul><li>页码范围</li><li><p>@author 骆昊</p><p>*</p><p>*/</p></li></ul><p>public class PageRange {</p><p>​    private int startPage;  // 起始页码</p><p>​    private int endPage;    // 终止页码</p><p>​    /**</p><p>​     * 构造器</p><p>​     * @param pageCount 总共显示几个页码</p><p>​     * @param currentPage 当前页码</p><p>​     * @param totalPage 总页数</p><p>​     */</p><p>​    public PageRange(int pageCount, int currentPage, int totalPage) {</p><p>​        startPage = currentPage - (pageCount - 1) / 2;</p><p>​        endPage = currentPage + pageCount / 2;</p><p>​        if(startPage &lt; 1) {</p><p>​            startPage = 1;</p><p>​            endPage = totalPage &gt; pageCount ? pageCount : totalPage;</p><p>​        }</p><p>​        if (endPage &gt; totalPage) {</p><p>​            endPage = totalPage;</p><p>​            startPage = (endPage - pageCount &gt; 0) ? endPage - pageCount + 1 : 1;</p><p>​        }</p><p>​    }</p><p>​    /**</p><p>​     * 获得起始页页码</p><p>​     * @return 起始页页码</p><p>​     */</p><p>​    public int getStartPage() {</p><p>​        return startPage;</p><p>​    }</p><p>​    /**</p><p>​     * 获得终止页页码</p><p>​     * @return 终止页页码</p><p>​     */</p><p>​    public int getEndPage() {</p><p>​        return endPage;</p><p>​    }</p><p>}</p><p>package com.jackfrued.biz;</p><p>import com.jackfrued.comm.PageBean;</p><p>import com.jackfrued.entity.Dept;</p><p>/**</p><ul><li>部门业务逻辑接口</li><li><p>@author 骆昊</p><p>*</p><p>*/</p></li></ul><p>public interface DeptService {</p><p>​    /**</p><p>​     * 创建新的部门</p><p>​     * @param department 部门对象</p><p>​     * @return 创建成功返回true否则返回false</p><p>​     */</p><p>​    public boolean createNewDepartment(Dept department);</p><p>​    /**</p><p>​     * 删除指定部门</p><p>​     * @param id 要删除的部门的编号</p><p>​     * @return 删除成功返回true否则返回false</p><p>​     */</p><p>​    public boolean deleteDepartment(Integer id);</p><p>​    /**</p><p>​     * 分页获取顶级部门</p><p>​     * @param page 页码</p><p>​     * @param size 页码大小</p><p>​     * @return 部门对象的分页器对象</p><p>​     */</p><p>​    public PageBean<dept> getTopDeptByPage(int page, int size);</dept></p><p>}</p><p>package com.jackfrued.biz.impl;</p><p>import org.springframework.beans.factory.annotation.Autowired;</p><p>import org.springframework.stereotype.Service;</p><p>import org.springframework.transaction.annotation.Transactional;</p><p>import com.jackfrued.biz.DeptService;</p><p>import com.jackfrued.comm.PageBean;</p><p>import com.jackfrued.comm.QueryResult;</p><p>import com.jackfrued.dao.DeptDao;</p><p>import com.jackfrued.entity.Dept;</p><p>@Service</p><p>@Transactional  // 声明式事务的注解</p><p>public class DeptServiceImpl implements DeptService {</p><p>​    @Autowired</p><p>​    private DeptDao deptDao;</p><p>​    @Override</p><p>​    public boolean createNewDepartment(Dept department) {</p><p>​        return deptDao.save(department) != null;</p><p>​    }</p><p>​    @Override</p><p>​    public boolean deleteDepartment(Integer id) {</p><p>​        return deptDao.deleteById(id);</p><p>​    }</p><p>​    @Override</p><p>​    public PageBean<dept> getTopDeptByPage(int page, int size) {</dept></p><p>​        QueryResult<dept> queryResult = deptDao.findTopDeptByPage(page, size);</dept></p><p>​        PageBean<dept> pageBean = new PageBean&lt;&gt;(page, size);</dept></p><p>​        pageBean.transferQueryResult(queryResult);</p><p>​        return pageBean;</p><p>​    }</p><p>}</p><h3 id="如何在Web项目中配置Spring的IoC容器？"><a href="#如何在Web项目中配置Spring的IoC容器？" class="headerlink" title="如何在Web项目中配置Spring的IoC容器？"></a>如何在Web项目中配置Spring的IoC容器？</h3><p> 答：如果需要在Web项目中使用Spring的IoC容器，可以在Web项目配置文件web.xml中做出如下配置：</p><p><context-param></context-param></p><p>​    <param-name>contextConfigLocation</param-name></p><p>​    <param-value>classpath:applicationContext.xml</param-value></p><p></p><listener><br><br>​    <listener-class><br><br>​        org.springframework.web.context.ContextLoaderListener<br><br>​    </listener-class><br><br></listener><h3 id="如何在Spring-IoC容器中配置数据源？"><a href="#如何在Spring-IoC容器中配置数据源？" class="headerlink" title="如何在Spring IoC容器中配置数据源？"></a>如何在Spring IoC容器中配置数据源？</h3><p>答：<br>DBCP配置：</p><bean id="dataSource" ​="" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close"><br><br>​    <property name="driverClassName" value="${jdbc.driverClassName}"><br><br>​    <property name="url" value="${jdbc.url}"><br><br>​    <property name="username" value="${jdbc.username}"><br><br>​    <property name="password" value="${jdbc.password}"><br><br></property></property></property></property></bean><p>&lt;context:property-placeholder location=”jdbc.properties”/&gt;</p><p>C3P0配置：</p><bean id="dataSource" ​="" class="com.mchange.v2.c3p0.ComboPooledDataSource" destroy-method="close"><br><br>​    <property name="driverClass" value="${jdbc.driverClassName}"><br><br>​    <property name="jdbcUrl" value="${jdbc.url}"><br><br>​    <property name="user" value="${jdbc.username}"><br><br>​    <property name="password" value="${jdbc.password}"><br><br></property></property></property></property></bean><p>&lt;context:property-placeholder location=”jdbc.properties”/&gt;</p><p>提示： DBCP的详细配置在第153题中已经完整的展示过了。</p><h3 id="如何配置配置事务增强？"><a href="#如何配置配置事务增强？" class="headerlink" title="如何配置配置事务增强？"></a>如何配置配置事务增强？</h3><p>答：</p><p>&lt;?xml version=”1.0” encoding=”UTF-8”?&gt;</p><beans xmlns="http://www.springframework.org/schema/beans" ​="" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx" xsi:schemalocation="​     http://www.springframework.org/schema/beans​     http://www.springframework.org/schema/beans/spring-beans.xsd​     http://www.springframework.org/schema/tx​     http://www.springframework.org/schema/tx/spring-tx.xsd​     http://www.springframework.org/schema/aop​     http://www.springframework.org/schema/aop/spring-aop.xsd"><br><br><br><br>  <!-- this is the service object that we want to make transactional --><br><br>  <bean id="fooService" class="x.y.service.DefaultFooService"><br><br><br><br>  <!-- the transactional advice --><br><br>  &lt;tx:advice id=”txAdvice” transaction-manager=”txManager”&gt;<br><br>  <!-- the transactional semantics... --><br><br>  tx:attributes<br><br>​    <!-- all methods starting with 'get' are read-only --><br><br>​    &lt;tx:method name=”get<em>“ read-only=”true”/&gt;<br><br>​    <!-- other methods use the default transaction settings (see below) --><br><br>​    &lt;tx:method name=”</em>“/&gt;<br><br>  /tx:attributes<br><br>  /tx:advice<br><br><br><br>  <!-- ensure that the above transactional advice runs for any execution​    of an operation defined by the FooService interface --><br><br>  aop:config<br><br>  &lt;aop:pointcut id=”fooServiceOperation”<br><br>​    expression=”execution(<em> x.y.service.FooService.</em>(..))”/&gt;<br><br>  &lt;aop:advisor advice-ref=”txAdvice” pointcut-ref=”fooServiceOperation”/&gt;<br><br>  /aop:config<br><br><br><br>  <!-- don't forget the DataSource --><br><br>  <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" ​="" destroy-method="close"><br><br>  <property name="driverClassName" value="oracle.jdbc.driver.OracleDriver"><br><br>  <property name="url" value="jdbc:oracle:thin:@localhost:1521:orcl"><br><br>  <property name="username" value="scott"><br><br>  <property name="password" value="tiger"><br><br>  </property></property></property></property></bean><br><br><br><br>  <!-- similarly, don't forget the PlatformTransactionManager --><br><br>  <bean id="txManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager"><br><br>  <property name="dataSource" ref="dataSource"><br><br>  </property></bean><br><br><br><br>  <!-- other <bean/> definitions here --><br><br><br><br></bean></beans><h3 id="选择使用Spring框架的原因（Spring框架为企业级开发带来的好处有哪些）？"><a href="#选择使用Spring框架的原因（Spring框架为企业级开发带来的好处有哪些）？" class="headerlink" title="选择使用Spring框架的原因（Spring框架为企业级开发带来的好处有哪些）？"></a>选择使用Spring框架的原因（Spring框架为企业级开发带来的好处有哪些）？</h3><p>答：可以从以下几个方面作答： </p><ul><li>非侵入式：支持基于POJO的编程模式，不强制性的要求实现Spring框架中的接口或继承Spring框架中的类。 </li><li>IoC容器：IoC容器帮助应用程序管理对象以及对象之间的依赖关系，对象之间的依赖关系如果发生了改变只需要修改配置文件而不是修改代码，因为代码的修改可能意味着项目的重新构建和完整的回归测试。有了IoC容器，程序员再也不需要自己编写工厂、单例，这一点特别符合Spring的精神”不要重复的发明轮子”。 </li><li>AOP（面向切面编程）：将所有的横切关注功能封装到切面（aspect）中，通过配置的方式将横切关注功能动态添加到目标代码上，进一步实现了业务逻辑和系统服务之间的分离。另一方面，有了AOP程序员可以省去很多自己写代理类的工作。 </li><li>MVC：Spring的MVC框架是非常优秀的，从各个方面都可以甩Struts 2几条街，为Web表示层提供了更好的解决方案。 </li><li>事务管理：Spring以宽广的胸怀接纳多种持久层技术，并且为其提供了声明式的事务管理，在不需要任何一行代码的情况下就能够完成事务管理。 </li><li>其他：选择Spring框架的原因还远不止于此，Spring为Java企业级开发提供了一站式选择，你可以在需要的时候使用它的部分和全部，更重要的是，你甚至可以在感觉不到Spring存在的情况下，在你的项目中使用Spring提供的各种优秀的功能。</li></ul><h3 id="Spring-IoC容器配置Bean的方式？"><a href="#Spring-IoC容器配置Bean的方式？" class="headerlink" title="Spring IoC容器配置Bean的方式？"></a>Spring IoC容器配置Bean的方式？</h3><p>答： </p><ul><li>基于XML文件进行配置。 </li><li>基于注解进行配置。 </li><li>基于Java程序进行配置（Spring 3+）</li></ul><p>package com.jackfrued.bean;</p><p>import org.springframework.beans.factory.annotation.Autowired;</p><p>import org.springframework.stereotype.Component;</p><p>@Component</p><p>public class Person {</p><p>​    private String name;</p><p>​    private int age;</p><p>​    @Autowired</p><p>​    private Car car;</p><p>​    public Person(String name, int age) {</p><p>​        this.name = name;</p><p>​        this.age = age;</p><p>​    }</p><p>​    public void setCar(Car car) {</p><p>​        this.car = car;</p><p>​    }</p><p>​    @Override</p><p>​    public String toString() {</p><p>​        return “Person [name=” + name + “, age=” + age + “, car=” + car + “]”;</p><p>​    }</p><p>}</p><p>package com.jackfrued.bean;</p><p>import org.springframework.stereotype.Component;</p><p>@Component</p><p>public class Car {</p><p>​    private String brand;</p><p>​    private int maxSpeed;</p><p>​    public Car(String brand, int maxSpeed) {</p><p>​        this.brand = brand;</p><p>​        this.maxSpeed = maxSpeed;</p><p>​    }</p><p>​    @Override</p><p>​    public String toString() {</p><p>​        return “Car [brand=” + brand + “, maxSpeed=” + maxSpeed + “]”;</p><p>​    }</p><p>}</p><p>package com.jackfrued.config;</p><p>import org.springframework.context.annotation.Bean;</p><p>import org.springframework.context.annotation.Configuration;</p><p>import com.jackfrued.bean.Car;</p><p>import com.jackfrued.bean.Person;</p><p>@Configuration</p><p>public class AppConfig {</p><p>​    @Bean</p><p>​    public Car car() {</p><p>​        return new Car(“Benz”, 320);</p><p>​    }</p><p>​    @Bean</p><p>​    public Person person() {</p><p>​        return new Person(“骆昊”, 34);</p><p>​    }</p><p>}</p><p>package com.jackfrued.test;</p><p>import org.springframework.context.ConfigurableApplicationContext;</p><p>import org.springframework.context.annotation.AnnotationConfigApplicationContext;</p><p>import com.jackfrued.bean.Person;</p><p>import com.jackfrued.config.AppConfig;</p><p>class Test {</p><p>​    public static void main(String[] args) {</p><p>​        // TWR (Java 7+)</p><p>​        try(ConfigurableApplicationContext factory = new AnnotationConfigApplicationContext(AppConfig.class)) {</p><p>​            Person person = factory.getBean(Person.class);</p><p>​            System.out.println(person);</p><p>​        }</p><p>​    }</p><p>}</p><h3 id="阐述Spring框架中Bean的生命周期？"><a href="#阐述Spring框架中Bean的生命周期？" class="headerlink" title="阐述Spring框架中Bean的生命周期？"></a>阐述Spring框架中Bean的生命周期？</h3><p>答：<br>① Spring IoC容器找到关于Bean的定义并实例化该Bean。<br>② Spring IoC容器对Bean进行依赖注入。<br>③ 如果Bean实现了BeanNameAware接口，则将该Bean的id传给setBeanName方法。<br>④ 如果Bean实现了BeanFactoryAware接口，则将BeanFactory对象传给setBeanFactory方法。<br>⑤ 如果Bean实现了BeanPostProcessor接口，则调用其postProcessBeforeInitialization方法。<br>⑥ 如果Bean实现了InitializingBean接口，则调用其afterPropertySet方法。<br>⑦ 如果有和Bean关联的BeanPostProcessors对象，则这些对象的postProcessAfterInitialization方法被调用。<br>⑧ 当销毁Bean实例时，如果Bean实现了DisposableBean接口，则调用其destroy方法。</p><h3 id="依赖注入时如何注入集合属性？"><a href="#依赖注入时如何注入集合属性？" class="headerlink" title="依赖注入时如何注入集合属性？"></a>依赖注入时如何注入集合属性？</h3><p>答：可以在定义Bean属性时，通过<list> / <set> / <map> / <props>分别为其注入列表、集合、映射和键值都是字符串的映射属性。</props></map></set></list></p><h3 id="Spring中的自动装配有哪些限制？"><a href="#Spring中的自动装配有哪些限制？" class="headerlink" title="Spring中的自动装配有哪些限制？"></a>Spring中的自动装配有哪些限制？</h3><p> 答： </p><ul><li>如果使用了构造器注入或者setter注入，那么将覆盖自动装配的依赖关系。 </li><li>基本数据类型的值、字符串字面量、类字面量无法使用自动装配来注入。 </li><li>优先考虑使用显式的装配来进行更精确的依赖注入而不是使用自动装配。</li></ul><h3 id="在Web项目中如何获得Spring的IoC容器？"><a href="#在Web项目中如何获得Spring的IoC容器？" class="headerlink" title="在Web项目中如何获得Spring的IoC容器？"></a>在Web项目中如何获得Spring的IoC容器？</h3><p>答：</p><p>WebApplicationContext ctx = </p><p>WebApplicationContextUtils.getWebApplicationContext(servletContext);</p><h3 id="Spring由哪些模块组成？"><a href="#Spring由哪些模块组成？" class="headerlink" title="Spring由哪些模块组成？"></a>Spring由哪些模块组成？</h3><p>以下是Spring 框架的基本模块：</p><p>Core module</p><p>Bean module</p><p>Context module</p><p>Expression Language module</p><p>JDBC module</p><p>ORM module</p><p>OXM module</p><p>Java Messaging Service(JMS) module</p><p>Transaction module</p><p>Web module</p><p>Web-Servlet module</p><p>Web-Struts module</p><p>Web-Portlet module</p><h3 id="【Spring】什么是Spring-IOC-容器？"><a href="#【Spring】什么是Spring-IOC-容器？" class="headerlink" title="【Spring】什么是Spring IOC 容器？"></a>【Spring】<strong>什么是Spring IOC 容器？</strong></h3><p>Spring IOC 负责创建对象，管理对象（通过依赖注入（DI），装配对象，配置对象，并且管理这些对象的整个生命周期。</p><h3 id="【Spring】IOC的优点是什么？"><a href="#【Spring】IOC的优点是什么？" class="headerlink" title="【Spring】IOC的优点是什么？"></a>【Spring】<strong>IOC的优点是什么？</strong></h3><p>IOC 或 依赖注入把应用的代码量降到最低。它使应用容易测试，单元测试不再需要单例和JNDI查找机制。最小的代价和最小的侵入性使松散耦合得以实现。IOC容器支持加载服务时的饿汉式初始化和懒加载。</p><h3 id="【Spring】ApplicationContext通常的实现是什么？"><a href="#【Spring】ApplicationContext通常的实现是什么？" class="headerlink" title="【Spring】ApplicationContext通常的实现是什么？"></a>【Spring】<strong>ApplicationContext通常的实现是什么？</strong></h3><p>FileSystemXmlApplicationContext ：此容器从一个XML文件中加载beans的定义，XML Bean 配置文件的全路径名必须提供给它的构造函数。</p><p>ClassPathXmlApplicationContext：此容器也从一个XML文件中加载beans的定义，这里，你需要正确设置classpath因为这个容器将在classpath里找bean配置。</p><p>WebXmlApplicationContext：此容器加载一个XML文件，此文件定义了一个WEB应用的所有bean。</p><h3 id="【Spring】Bean-工厂和-Application-contexts-有什么区别？"><a href="#【Spring】Bean-工厂和-Application-contexts-有什么区别？" class="headerlink" title="【Spring】Bean 工厂和 Application contexts  有什么区别？"></a>【Spring】<strong>Bean 工厂和 Application contexts  有什么区别？</strong></h3><p>Application contexts提供一种方法处理文本消息，一个通常的做法是加载文件资源（比如镜像），它们可以向注册为监听器的bean发布事件。另外，在容器或容器内的对象上执行的那些不得不由bean工厂以程序化方式处理的操作，可以在Application contexts中以声明的方式处理。Application contexts实现了MessageSource接口，该接口的实现以可插拔的方式提供获取本地化消息的方法。</p><h3 id="【Spring】什么是Spring的依赖注入？"><a href="#【Spring】什么是Spring的依赖注入？" class="headerlink" title="【Spring】什么是Spring的依赖注入？"></a>【Spring】<strong>什么是Spring的依赖注入？</strong></h3><p>依赖注入，是IOC的一个方面，是个通常的概念，它有多种解释。这概念是说你不用创建对象，而只需要描述它如何被创建。你不在代码里直接组装你的组件和服务，但是要在配置文件里描述哪些组件需要哪些服务，之后一个容器（IOC容器）负责把他们组装起来。</p><h3 id="【Spring】有哪些不同类型的IOC（依赖注入）方式？"><a href="#【Spring】有哪些不同类型的IOC（依赖注入）方式？" class="headerlink" title="【Spring】有哪些不同类型的IOC（依赖注入）方式？"></a>【Spring】<strong>有哪些不同类型的IOC（依赖注入）方式？</strong></h3><p>构造器依赖注入：构造器依赖注入通过容器触发一个类的构造器来实现的，该类有一系列参数，每个参数代表一个对其他类的依赖。</p><p>Setter方法注入：Setter方法注入是容器通过调用无参构造器或无参static工厂 方法实例化bean之后，调用该bean的setter方法，即实现了基于setter的依赖注入。</p><h3 id="【Spring】哪种依赖注入方式你建议使用，构造器注入，还是-Setter方法注入？"><a href="#【Spring】哪种依赖注入方式你建议使用，构造器注入，还是-Setter方法注入？" class="headerlink" title="【Spring】哪种依赖注入方式你建议使用，构造器注入，还是 Setter方法注入？"></a>【Spring】<strong>哪种依赖注入方式你建议使用，构造器注入，还是 Setter方法注入？</strong></h3><p>你两种依赖方式都可以使用，构造器注入和Setter方法注入。最好的解决方案是用构造器参数实现强制依赖，setter方法实现可选依赖。</p><h3 id="【Spring】什么是Spring-beans？"><a href="#【Spring】什么是Spring-beans？" class="headerlink" title="【Spring】什么是Spring beans？"></a>【Spring】<strong>什么是Spring beans？</strong></h3><p>Spring beans 是那些形成Spring应用的主干的java对象。它们被Spring IOC容器初始化，装配，和管理。这些beans通过容器中配置的元数据创建。比如，以XML文件中<bean> 的形式定义。</bean></p><p>Spring 框架定义的beans都是单件beans。在bean tag中有个属性”singleton”，如果它被赋为TRUE，bean 就是单件，否则就是一个 prototype bean。默认是TRUE，所以所有在Spring框架中的beans 缺省都是单件。</p><h3 id="【Spring】一个-Spring-Bean-定义-包含什么？"><a href="#【Spring】一个-Spring-Bean-定义-包含什么？" class="headerlink" title="【Spring】一个 Spring Bean 定义 包含什么？"></a>【Spring】<strong>一个 Spring Bean 定义 包含什么？</strong></h3><p>一个Spring Bean 的定义包含容器必知的所有配置元数据，包括如何创建一个bean，它的生命周期详情及它的依赖。</p><h3 id="【Spring】如何给Spring-容器提供配置元数据？"><a href="#【Spring】如何给Spring-容器提供配置元数据？" class="headerlink" title="【Spring】如何给Spring 容器提供配置元数据？"></a>【Spring】<strong>如何给Spring 容器提供配置元数据？</strong></h3><p>这里有三种重要的方法给Spring 容器提供配置元数据。</p><p>XML配置文件。</p><p>基于注解的配置。</p><p>基于java的配置。</p><h3 id="【Spring】解释Spring支持的几种bean的作用域"><a href="#【Spring】解释Spring支持的几种bean的作用域" class="headerlink" title="【Spring】解释Spring支持的几种bean的作用域"></a>【Spring】<strong>解释Spring支持的几种bean的作用域</strong></h3><p>Spring框架支持以下五种bean的作用域：</p><p>singleton : bean在每个Spring ioc 容器中只有一个实例。</p><p>prototype：一个bean的定义可以有多个实例。</p><p>request：每次http请求都会创建一个bean，该作用域仅在基于web的Spring ApplicationContext情形下有效。</p><p>session：在一个HTTP Session中，一个bean定义对应一个实例。该作用域仅在基于web的Spring ApplicationContext情形下有效。</p><p>global-session：在一个全局的HTTP Session中，一个bean定义对应一个实例。该作用域仅在基于web的Spring ApplicationContext情形下有效。</p><p>缺省的Spring bean 的作用域是Singleton。</p><h3 id="【Spring】Spring框架中的单例bean是线程安全的吗？"><a href="#【Spring】Spring框架中的单例bean是线程安全的吗？" class="headerlink" title="【Spring】Spring框架中的单例bean是线程安全的吗？"></a>【Spring】<strong>Spring框架中的单例bean是线程安全的吗？</strong></h3><p>不，Spring框架中的单例bean不是线程安全的。</p><h3 id="【Spring】解释Spring框架中bean的生命周期"><a href="#【Spring】解释Spring框架中bean的生命周期" class="headerlink" title="【Spring】解释Spring框架中bean的生命周期"></a>【Spring】<strong>解释Spring框架中bean的生命周期</strong></h3><p>Spring容器 从XML 文件中读取bean的定义，并实例化bean。</p><p>Spring根据bean的定义填充所有的属性。</p><p>如果bean实现了BeanNameAware 接口，Spring 传递bean 的ID 到 setBeanName方法。</p><p>如果Bean 实现了 BeanFactoryAware 接口， Spring传递beanfactory 给setBeanFactory 方法。</p><p>如果有任何与bean相关联的BeanPostProcessors，Spring会在postProcesserBeforeInitialization()方法内调用它们。</p><p>如果bean实现IntializingBean了，调用它的afterPropertySet方法，如果bean声明了初始化方法，调用此初始化方法。</p><p>如果有BeanPostProcessors 和bean 关联，这些bean的postProcessAfterInitialization() 方法将被调用。</p><p>如果bean实现了 DisposableBean，它将调用destroy()方法。</p><h3 id="【Spring】哪些是重要的bean生命周期方法？-你能重载它们吗？"><a href="#【Spring】哪些是重要的bean生命周期方法？-你能重载它们吗？" class="headerlink" title="【Spring】哪些是重要的bean生命周期方法？ 你能重载它们吗？"></a>【Spring】<strong>哪些是重要的bean生命周期方法？ 你能重载它们吗？</strong></h3><p>有两个重要的bean 生命周期方法，第一个是setup ， 它是在容器加载bean的时候被调用。第二个方法是 teardown  它是在容器卸载类的时候被调用。</p><p>The bean 标签有两个重要的属性（init-method和destroy-method）。用它们你可以自己定制初始化和注销方法。它们也有相应的注解（@PostConstruct和@PreDestroy）。</p><h3 id="【Spring】在-Spring中如何注入一个java集合？"><a href="#【Spring】在-Spring中如何注入一个java集合？" class="headerlink" title="【Spring】在 Spring中如何注入一个java集合？"></a>【Spring】<strong>在 Spring中如何注入一个java集合？</strong></h3><p>Spring提供以下几种集合的配置元素：</p><p><list>类型用于注入一列值，允许有相同的值。</list></p><p><set> 类型用于注入一组值，不允许有相同的值。</set></p><p><map> 类型用于注入一组键值对，键和值都可以为任意类型。</map></p><p><props>类型用于注入一组键值对，键和值都只能为String类型。</props></p><h3 id="【Spring】什么是bean装配？"><a href="#【Spring】什么是bean装配？" class="headerlink" title="【Spring】什么是bean装配？"></a>【Spring】<strong>什么是bean装配？</strong></h3><p>装配，或bean 装配是指在Spring 容器中把bean组装到一起，前提是容器需要知道bean的依赖关系，如何通过依赖注入来把它们装配到一起。</p><h3 id="【Spring】什么是bean的自动装配？"><a href="#【Spring】什么是bean的自动装配？" class="headerlink" title="【Spring】什么是bean的自动装配？"></a>【Spring】<strong>什么是bean的自动装配？</strong></h3><p>Spring 容器能够自动装配相互合作的bean，这意味着容器不需要<constructor-arg>和<property>配置，能通过Bean工厂自动处理bean之间的协作。</property></constructor-arg></p><h3 id="【Spring】解释不同方式的自动装配"><a href="#【Spring】解释不同方式的自动装配" class="headerlink" title="【Spring】解释不同方式的自动装配"></a>【Spring】<strong>解释不同方式的自动装配</strong></h3><p>有五种自动装配的方式，可以用来指导Spring容器用自动装配方式来进行依赖注入</p><p>no：默认的方式是不进行自动装配，通过显式设置ref 属性来进行装配。</p><p>byName：通过参数名 自动装配，Spring容器在配置文件中发现bean的autowire属性被设置成byname，之后容器试图匹配、装配和该bean的属性具有相同名字的bean。</p><p>byType：通过参数类型自动装配，Spring容器在配置文件中发现bean的autowire属性被设置成byType，之后容器试图匹配、装配和该bean的属性具有相同类型的bean。如果有多个bean符合条件，则抛出错误。</p><p>constructor：这个方式类似于byType， 但是要提供给构造器参数，如果没有确定的带参数的构造器参数类型，将会抛出异常。</p><p>autodetect：首先尝试使用constructor来自动装配，如果无法工作，则使用byType方式。</p><h3 id="【Spring】自动装配有哪些局限性？"><a href="#【Spring】自动装配有哪些局限性？" class="headerlink" title="【Spring】自动装配有哪些局限性？"></a>【Spring】<strong>自动装配有哪些局限性？</strong></h3><p>自动装配的局限性是：</p><p>重写：你仍需用 <constructor-arg>和 <property> 配置来定义依赖，意味着总要重写自动装配。</property></constructor-arg></p><p>基本数据类型：你不能自动装配简单的属性，如基本数据类型，String字符串，和类。</p><p>模糊特性：自动装配不如显式装配精确，如果有可能，建议使用显式装配。</p><h3 id="【Spring】你可以在Spring中注入一个null-和一个空字符串吗？"><a href="#【Spring】你可以在Spring中注入一个null-和一个空字符串吗？" class="headerlink" title="【Spring】你可以在Spring中注入一个null 和一个空字符串吗？"></a>【Spring】<strong>你可以在Spring中注入一个null 和一个空字符串吗？</strong></h3><p>可以</p><h3 id="【Spring】什么是基于Java的Spring注解配置-给一些注解的例子"><a href="#【Spring】什么是基于Java的Spring注解配置-给一些注解的例子" class="headerlink" title="【Spring】什么是基于Java的Spring注解配置? 给一些注解的例子"></a>【Spring】<strong>什么是基于Java的Spring注解配置? 给一些注解的例子</strong></h3><p>基于Java的配置，允许你在少量的Java注解的帮助下，进行你的大部分Spring配置而非通过XML文件。</p><p>以@Configuration 注解为例，它用来标记类可以当做一个bean的定义，被Spring IOC容器使用。另一个例子是@Bean注解，它表示此方法将要返回一个对象，作为一个bean注册进Spring应用上下文。点击这里学习JAVA几大元注解。</p><h3 id="【Spring】什么是基于注解的容器配置？"><a href="#【Spring】什么是基于注解的容器配置？" class="headerlink" title="【Spring】什么是基于注解的容器配置？"></a>【Spring】<strong>什么是基于注解的容器配置？</strong></h3><p>相对于XML文件，注解型的配置依赖于通过字节码元数据装配组件，而非尖括号的声明。</p><p>开发者通过在相应的类，方法或属性上使用注解的方式，直接组件类中进行配置，而不是使用xml表述bean的装配关系。</p><h3 id="【Spring】怎样开启注解装配？"><a href="#【Spring】怎样开启注解装配？" class="headerlink" title="【Spring】怎样开启注解装配？"></a>【Spring】<strong>怎样开启注解装配？</strong></h3><p>注解装配在默认情况下是不开启的，为了使用注解装配，我们必须在Spring配置文件中配置 context:annotation-config/元素。</p><h3 id="【Spring】-Required-注解"><a href="#【Spring】-Required-注解" class="headerlink" title="【Spring】@Required  注解"></a>【Spring】<strong>@Required  注解</strong></h3><p>这个注解表明bean的属性必须在配置的时候设置，通过一个bean定义的显式的属性值或通过自动装配，若@Required注解的bean属性未被设置，容器将抛出BeanInitializationException。</p><h3 id="【Spring】-Autowired-注解"><a href="#【Spring】-Autowired-注解" class="headerlink" title="【Spring】@Autowired 注解"></a>【Spring】<strong>@Autowired 注解</strong></h3><p>@Autowired 注解提供了更细粒度的控制，包括在何处以及如何完成自动装配。它的用法和@Required一样，修饰setter方法、构造器、属性或者具有任意名称和/或多个参数的PN方法。</p><h3 id="【Spring】-Qualifier-注解"><a href="#【Spring】-Qualifier-注解" class="headerlink" title="【Spring】@Qualifier 注解"></a>【Spring】<strong>@Qualifier 注解</strong></h3><p>当有多个相同类型的bean却只有一个需要自动装配时，将@Qualifier 注解和@Autowire 注解结合使用以消除这种混淆，指定需要装配的确切的bean。</p><h3 id="【Spring】在Spring框架中如何更有效地使用JDBC？"><a href="#【Spring】在Spring框架中如何更有效地使用JDBC？" class="headerlink" title="【Spring】在Spring框架中如何更有效地使用JDBC？"></a>【Spring】<strong>在Spring框架中如何更有效地使用JDBC？</strong></h3><p>使用SpringJDBC 框架，资源管理和错误处理的代价都会被减轻。所以开发者只需写statements 和 queries从数据存取数据，JDBC也可以在Spring框架提供的模板类的帮助下更有效地被使用，这个模板叫JdbcTemplate （例子见这里here）</p><h3 id="【Spring】-JdbcTemplate"><a href="#【Spring】-JdbcTemplate" class="headerlink" title="【Spring】 JdbcTemplate"></a>【Spring】 JdbcTemplate</h3><p>JdbcTemplate 类提供了很多便利的方法解决诸如把数据库数据转变成基本数据类型或对象，执行写好的或可调用的数据库操作语句，提供自定义的数据错误处理。</p><h3 id="【Spring】Spring对DAO的支持"><a href="#【Spring】Spring对DAO的支持" class="headerlink" title="【Spring】Spring对DAO的支持"></a>【Spring】<strong>Spring对DAO的支持</strong></h3><p>Spring对数据访问对象（DAO）的支持旨在简化它和数据访问技术如JDBC，Hibernate or JDO 结合使用。这使我们可以方便切换持久层。编码时也不用担心会捕获每种技术特有的异常。</p><h3 id="【Spring】使用Spring通过什么方式访问Hibernate？"><a href="#【Spring】使用Spring通过什么方式访问Hibernate？" class="headerlink" title="【Spring】使用Spring通过什么方式访问Hibernate？"></a>【Spring】<strong>使用Spring通过什么方式访问Hibernate？</strong></h3><p>在Spring中有两种方式访问Hibernate：</p><p>控制反转  Hibernate Template和 Callback</p><p>继承 HibernateDAOSupport提供一个AOP 拦截器</p><h3 id="【Spring】Spring支持的ORM"><a href="#【Spring】Spring支持的ORM" class="headerlink" title="【Spring】Spring支持的ORM"></a>【Spring】<strong>Spring支持的ORM</strong></h3><p>Spring支持以下ORM：</p><p>Hibernate</p><p>iBatis</p><p>JPA (Java Persistence API)</p><p>TopLink</p><p>JDO (Java Data Objects)</p><p>OJB</p><h3 id="【Spring】如何通过HibernateDaoSupport将Spring和Hibernate结合起来？"><a href="#【Spring】如何通过HibernateDaoSupport将Spring和Hibernate结合起来？" class="headerlink" title="【Spring】如何通过HibernateDaoSupport将Spring和Hibernate结合起来？"></a>【Spring】<strong>如何通过HibernateDaoSupport将Spring和Hibernate结合起来？</strong></h3><p>用Spring的 SessionFactory 调用 LocalSessionFactory。集成过程分三步：</p><p>配置the Hibernate SessionFactory</p><p>继承HibernateDaoSupport实现一个DAO</p><p>在AOP支持的事务中装配</p><h3 id="【Spring】Spring支持的事务管理类型"><a href="#【Spring】Spring支持的事务管理类型" class="headerlink" title="【Spring】Spring支持的事务管理类型"></a>【Spring】<strong>Spring支持的事务管理类型</strong></h3><p>Spring支持两种类型的事务管理：</p><p>编程式事务管理：这意味你通过编程的方式管理事务，给你带来极大的灵活性，但是难维护。</p><p>声明式事务管理：这意味着你可以将业务代码和事务管理分离，你只需用注解和XML配置来管理事务。</p><h3 id="【Spring】Spring框架的事务管理有哪些优点？"><a href="#【Spring】Spring框架的事务管理有哪些优点？" class="headerlink" title="【Spring】Spring框架的事务管理有哪些优点？"></a>【Spring】<strong>Spring框架的事务管理有哪些优点？</strong></h3><p>它为不同的事务API  如 JTA，JDBC，Hibernate，JPA 和JDO，提供一个不变的编程模式。</p><p>它为编程式事务管理提供了一套简单的API而不是一些复杂的事务API如</p><p>它支持声明式事务管理。</p><p>它和Spring各种数据访问抽象层很好得集成。</p><h3 id="【Spring】你更倾向用那种事务管理类型？"><a href="#【Spring】你更倾向用那种事务管理类型？" class="headerlink" title="【Spring】你更倾向用那种事务管理类型？"></a>【Spring】<strong>你更倾向用那种事务管理类型？</strong></h3><p>大多数Spring框架的用户选择声明式事务管理，因为它对应用代码的影响最小，因此更符合一个无侵入的轻量级容器的思想。声明式事务管理要优于编程式事务管理，虽然比编程式事务管理（这种方式允许你通过代码控制事务）少了一点灵活性。</p><h3 id="【Spring】-解释AOP"><a href="#【Spring】-解释AOP" class="headerlink" title="【Spring】 解释AOP"></a>【Spring】 解释AOP</h3><p>面向切面的编程，或AOP， 是一种编程技术，允许程序模块化横向切割关注点，或横切典型的责任划分，如日志和事务管理。</p><h3 id="【Spring】Aspect-切面"><a href="#【Spring】Aspect-切面" class="headerlink" title="【Spring】Aspect 切面"></a>【Spring】<strong>Aspect 切面</strong></h3><p>AOP核心就是切面，它将多个类的通用行为封装成可重用的模块，该模块含有一组API提供横切功能。比如，一个日志模块可以被称作日志的AOP切面。根据需求的不同，一个应用程序可以有若干切面。在Spring AOP中，切面通过带有@Aspect注解的类实现。</p><h3 id="【Spring】在Spring-AOP-中，关注点和横切关注的区别是什么？"><a href="#【Spring】在Spring-AOP-中，关注点和横切关注的区别是什么？" class="headerlink" title="【Spring】在Spring AOP 中，关注点和横切关注的区别是什么？"></a>【Spring】<strong>在Spring AOP 中，关注点和横切关注的区别是什么？</strong></h3><p>关注点是应用中一个模块的行为，一个关注点可能会被定义成一个我们想实现的一个功能。</p><p>横切关注点是一个关注点，此关注点是整个应用都会使用的功能，并影响整个应用，比如日志，安全和数据传输，几乎应用的每个模块都需要的功能。因此这些都属于横切关注点。</p><h3 id="【Spring】连接点"><a href="#【Spring】连接点" class="headerlink" title="【Spring】连接点"></a>【Spring】<strong>连接点</strong></h3><p>连接点代表一个应用程序的某个位置，在这个位置我们可以插入一个AOP切面，它实际上是个应用程序执行Spring AOP的位置。</p><h3 id="【Spring】通知"><a href="#【Spring】通知" class="headerlink" title="【Spring】通知"></a>【Spring】<strong>通知</strong></h3><p>通知是个在方法执行前或执行后要做的动作，实际上是程序执行时要通过SpringAOP框架触发的代码段。</p><p>Spring切面可以应用五种类型的通知：</p><p>before：前置通知，在一个方法执行前被调用</p><p>after：在方法执行之后调用的通知，无论方法执行是否成功</p><p>after-returning：仅当方法成功完成后执行的通知</p><p>after-throwing：在方法抛出异常退出时执行的通知</p><p>around：在方法执行之前和之后调用的通知</p><h3 id="【Spring】切点"><a href="#【Spring】切点" class="headerlink" title="【Spring】切点"></a>【Spring】<strong>切点</strong></h3><p>切入点是一个或一组连接点，通知将在这些位置执行。可以通过表达式或匹配的方式指明切入点。</p><h3 id="【Spring】什么是引入？"><a href="#【Spring】什么是引入？" class="headerlink" title="【Spring】什么是引入？"></a>【Spring】<strong>什么是引入？</strong></h3><p>引入允许我们在已存在的类中增加新的方法和属性。</p><h3 id="【Spring】什么是目标对象？"><a href="#【Spring】什么是目标对象？" class="headerlink" title="【Spring】什么是目标对象？"></a>【Spring】<strong>什么是目标对象？</strong></h3><p>被一个或者多个切面所通知的对象。它通常是一个代理对象。也指被通知（advised）对象。</p><h3 id="【Spring】什么是代理？"><a href="#【Spring】什么是代理？" class="headerlink" title="【Spring】什么是代理？"></a>【Spring】<strong>什么是代理？</strong></h3><p>代理是通知目标对象后创建的对象。从客户端的角度看，代理对象和目标对象是一样的。</p><h3 id="【Spring】有几种不同类型的自动代理？"><a href="#【Spring】有几种不同类型的自动代理？" class="headerlink" title="【Spring】有几种不同类型的自动代理？"></a>【Spring】<strong>有几种不同类型的自动代理？</strong></h3><p>BeanNameAutoProxyCreator</p><p>DefaultAdvisorAutoProxyCreator</p><p>Metadata autoproxying</p><h3 id="【Spring】什么是织入。什么是织入应用的不同点？"><a href="#【Spring】什么是织入。什么是织入应用的不同点？" class="headerlink" title="【Spring】什么是织入。什么是织入应用的不同点？"></a>【Spring】<strong>什么是织入。什么是织入应用的不同点？</strong></h3><p>织入是将切面和到其他应用类型或对象连接或创建一个被通知对象的过程。</p><p>织入可以在编译时，加载时，或运行时完成。</p><h3 id="【Spring】解释基于XML-Schema方式的切面实现"><a href="#【Spring】解释基于XML-Schema方式的切面实现" class="headerlink" title="【Spring】解释基于XML Schema方式的切面实现"></a>【Spring】<strong>解释基于XML Schema方式的切面实现</strong></h3><p>在这种情况下，切面由常规类以及基于XML的配置实现。</p><h3 id="【Spring】解释基于注解的切面实现"><a href="#【Spring】解释基于注解的切面实现" class="headerlink" title="【Spring】解释基于注解的切面实现"></a>【Spring】<strong>解释基于注解的切面实现</strong></h3><p>在这种情况下(基于@AspectJ的实现)，涉及到的切面声明的风格与带有java5标注的普通java类一致。</p><h3 id="【Spring】什么是Spring的MVC框架？"><a href="#【Spring】什么是Spring的MVC框架？" class="headerlink" title="【Spring】什么是Spring的MVC框架？"></a>【Spring】<strong>什么是Spring的MVC框架？</strong></h3><p>Spring 配备构建Web 应用的全功能MVC框架。Spring可以很便捷地和其他MVC框架集成，如Struts，Spring 的MVC框架用控制反转把业务对象和控制逻辑清晰地隔离。它也允许以声明的方式把请求参数和业务对象绑定。</p><h3 id="【Spring】DispatcherServlet"><a href="#【Spring】DispatcherServlet" class="headerlink" title="【Spring】DispatcherServlet"></a>【Spring】<strong>DispatcherServlet</strong></h3><p>Spring的MVC框架是围绕DispatcherServlet来设计的，它用来处理所有的HTTP请求和响应。</p><h3 id="【Spring】WebApplicationContext"><a href="#【Spring】WebApplicationContext" class="headerlink" title="【Spring】WebApplicationContext"></a>【Spring】<strong>WebApplicationContext</strong></h3><p>WebApplicationContext 继承了ApplicationContext  并增加了一些WEB应用必备的特有功能，它不同于一般的ApplicationContext ，因为它能处理主题，并找到被关联的servlet。</p><h3 id="【Spring】什么是Spring-MVC框架的控制器？"><a href="#【Spring】什么是Spring-MVC框架的控制器？" class="headerlink" title="【Spring】什么是Spring MVC框架的控制器？"></a>【Spring】<strong>什么是Spring MVC框架的控制器？</strong></h3><p>控制器提供一个访问应用程序的行为，此行为通常通过服务接口实现。控制器解析用户输入并将其转换为一个由视图呈现给用户的模型。Spring用一个非常抽象的方式实现了一个控制层，允许用户创建多种用途的控制器。</p><h3 id="【Spring】-Controller-注解"><a href="#【Spring】-Controller-注解" class="headerlink" title="【Spring】@Controller 注解"></a>【Spring】<strong>@Controller 注解</strong></h3><p>该注解表明该类扮演控制器的角色，Spring不需要你继承任何其他控制器基类或引用Servlet API。</p><h3 id="【Spring】-RequestMapping-注解"><a href="#【Spring】-RequestMapping-注解" class="headerlink" title="【Spring】@RequestMapping 注解"></a>【Spring】<strong>@RequestMapping 注解</strong></h3><p>该注解是用来映射一个URL到一个类或一个特定的方处理法上。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Java 面试题系列篇-Mybatis 框架</title>
      <link href="/2018/10/20/Java-%E9%9D%A2%E8%AF%95%E9%A2%98%E7%B3%BB%E5%88%97%E7%AF%87-Mybatis-%E6%A1%86%E6%9E%B6/"/>
      <url>/2018/10/20/Java-%E9%9D%A2%E8%AF%95%E9%A2%98%E7%B3%BB%E5%88%97%E7%AF%87-Mybatis-%E6%A1%86%E6%9E%B6/</url>
      
        <content type="html"><![CDATA[<h2 id="Mybatis-框架"><a href="#Mybatis-框架" class="headerlink" title="Mybatis 框架"></a>Mybatis 框架</h2><h3 id="【MyBatis】MyBatis中使用-和-书写占位符有什么区别？"><a href="#【MyBatis】MyBatis中使用-和-书写占位符有什么区别？" class="headerlink" title="【MyBatis】MyBatis中使用#和$书写占位符有什么区别？"></a>【MyBatis】MyBatis中使用#和$书写占位符有什么区别？</h3><p>答：#将传入的数据都当成一个字符串，会对传入的数据自动加上引号；将传入的数据直接显示生成在SQL中。注意：使用​占位符可能会导致SQL注射攻击，能用#的地方就不要使用，写order by子句的时候应该用​而不是#。</p><p>{}是预编译处理，${}是字符串替换。</p><p>Mybatis在处理#{}时，会将sql中的#{}替换为?号，调用PreparedStatement的set方法来赋值；</p><p>Mybatis在处理{}时，就是把​{}替换成变量的值。</p><p>使用#{}可以有效的防止SQL注入，提高系统安全性。</p><h3 id="【MyBatis】解释一下MyBatis中命名空间（namespace）的作用。"><a href="#【MyBatis】解释一下MyBatis中命名空间（namespace）的作用。" class="headerlink" title="【MyBatis】解释一下MyBatis中命名空间（namespace）的作用。"></a>【MyBatis】解释一下MyBatis中命名空间（namespace）的作用。</h3><p>答：在大型项目中，可能存在大量的SQL语句，这时候为每个SQL语句起一个唯一的标识（ID）就变得并不容易了。为了解决这个问题，在MyBatis中，可以为每个映射文件起一个唯一的命名空间，这样定义在这个映射文件中的每个SQL语句就成了定义在这个命名空间中的一个ID。只要我们能够保证每个命名空间中这个ID是唯一的，即使在不同映射文件中的语句ID相同，也不会再产生冲突了。</p><h3 id="【MyBatis】动态SQL是什么意思？"><a href="#【MyBatis】动态SQL是什么意思？" class="headerlink" title="【MyBatis】动态SQL是什么意思？"></a>【MyBatis】动态SQL是什么意思？</h3><p>答：对于一些复杂的查询，我们可能会指定多个查询条件，但是这些条件可能存在也可能不存在，例如在58同城上面找房子，我们可能会指定面积、楼层和所在位置来查找房源，也可能会指定面积、价格、户型和所在位置来查找房源，此时就需要根据用户指定的条件动态生成SQL语句。如果不使用持久层框架我们可能需要自己拼装SQL语句，还好MyBatis提供了动态SQL的功能来解决这个问题。MyBatis中用于实现动态SQL的元素主要有： </p><ul><li>if </li><li>choose / when / otherwise </li><li>trim </li><li>where </li><li>set </li><li>foreach</li></ul><p>下面是映射文件的片段。</p><p>​    <select id="foo" parametertype="Blog" resulttype="Blog"></select></p><p>​        select * from t_blog where 1 = 1</p><p>​        <if test="title != null"></if></p><p>​            and title = #{title}</p><p>​        </p><p>​        <if test="content != null"></if></p><p>​            and content = #{content}</p><p>​        </p><p>​        <if test="owner != null"></if></p><p>​            and owner = #{owner}</p><p>​        </p><p>   </p><p>当然也可以像下面这些书写。</p><p>​    <select id="foo" parametertype="Blog" resulttype="Blog"></select></p><p>​        select * from t_blog where 1 = 1 </p><p>​        <choose></choose></p><p>​            <when test="title != null"></when></p><p>​                and title = #{title}</p><p>​            </p><p>​            <when test="content != null"></when></p><p>​                and content = #{content}</p><p>​            </p><p>​            <otherwise></otherwise></p><p>​                and owner = “owner1”</p><p>​            </p><p>​        </p><p>​    </p><p>再看看下面这个例子。</p><p>​    <select id="bar" resulttype="Blog"></select></p><p>​        select * from t_blog where id in</p><p>​        &lt;foreach collection=”array” index=”index” </p><p>​            item=”item” open=”(“ separator=”,” close=”)”&gt;</p><p>​            #{item}</p><p>​        </p><p></p><h3 id="Mybatis当实体类中的属性名和表中的字段名不一样-，怎么办-？"><a href="#Mybatis当实体类中的属性名和表中的字段名不一样-，怎么办-？" class="headerlink" title="Mybatis当实体类中的属性名和表中的字段名不一样 ，怎么办 ？"></a>Mybatis当实体类中的属性名和表中的字段名不一样 ，怎么办 ？</h3><p>第1种： 通过在查询的sql语句中定义字段名的别名，让字段名的别名和实体类的属性名一致 </p><p>​    <select id="selectorder" parametertype="int" resultetype="me.gacl.domain.order"> </select></p><p>​       select order_id id, order_no orderno ,order_price price form orders where order_id=#{id}; </p><p> </p><p>第2种： 通过<resultmap>来映射字段名和实体类属性名的一一对应的关系 </resultmap></p><p>​    <select id="getOrder" parametertype="int" resultmap="orderresultmap"></select></p><p>​        select * from orders where order_id=#{id}</p><p>​    </p>   <resultmap type="me.gacl.domain.order" id="orderresultmap"><br><br>​        &lt;!–用id属性来映射主键字段–&gt;<br><br>​        <id property="id" column="order_id"><br><br>​        &lt;!–用result属性来映射非主键字段，property为实体类属性名，column为数据表中的属性–&gt;<br><br>​        <result property="“orderno" "="" column="”order_no"><br><br>​        <result property="price" column="order_price"><br><br>​    <br><br><br><br>### Mybatis 模糊查询like语句该怎么写?<br><br>第1种：在Java代码中添加sql通配符。<br><br>​    string wildcardname = “%smi%”;<br><br>​    list<name> names = mapper.selectlike(wildcardname);<br><br><br><br>​    <select id="selectlike"><br><br>​     select <em> from foo where bar like #{value}<br><br>​    </em></select><br><br><br><br>第2种：在sql语句中拼接通配符，会引起sql注入<br><br>​    string wildcardname = “smi”;<br><br>​    list<name> names = mapper.selectlike(wildcardname);<br><br><br><br>​    <select id="selectlike"><br><br>​     select  from foo where bar like “%”#{value}”%”<br><br></select><br><br><br><br>### Mybatis 通常一个Xml映射文件，都会写一个Dao接口与之对应，请问，这个Dao接口的工作原理是什么？Dao接口里的方法，参数不同时，方法能重载吗？<br><br>Dao接口，就是人们常说的Mapper接口，接口的全限名，就是映射文件中的namespace的值，接口的方法名，就是映射文件中MappedStatement的id值，接口方法内的参数，就是传递给sql的参数。Mapper接口是没有实现类的，当调用接口方法时，接口全限名+方法名拼接字符串作为key值，可唯一定位一个MappedStatement，举例：com.mybatis3.mappers.StudentDao.findStudentById，可以唯一找到namespace为com.mybatis3.mappers.StudentDao下面id = findStudentById的MappedStatement。在Mybatis中，每一个<select>、<insert>、<update>、<delete>标签，都会被解析为一个MappedStatement对象。<br><br><br><br>Dao接口里的方法，是不能重载的，因为是全限名+方法名的保存和寻找策略。<br><br><br><br>Dao接口的工作原理是JDK动态代理，Mybatis运行时会使用JDK动态代理为Dao接口生成代理proxy对象，代理对象proxy会拦截接口方法，转而执行MappedStatement所代表的sql，然后将sql执行结果返回。<br><br><br><br>### Mybatis是如何进行分页的？分页插件的原理是什么？<br><br>Mybatis使用RowBounds对象进行分页，它是针对ResultSet结果集执行的内存分页，而非物理分页，可以在sql内直接书写带有物理分页的参数来完成物理分页功能，也可以使用分页插件来完成物理分页。<br><br><br><br>分页插件的基本原理是使用Mybatis提供的插件接口，实现自定义插件，在插件的拦截方法内拦截待执行的sql，然后重写sql，根据dialect方言，添加对应的物理分页语句和物理分页参数。<br><br><br><br>### Mybatis是如何将sql执行结果封装为目标对象并返回的？都有哪些映射形式？<br><br>答：第一种是使用<resultmap>标签，逐一定义列名和对象属性名之间的映射关系。第二种是使用sql列的别名功能，将列别名书写为对象属性名，比如T_NAME AS NAME，对象属性名一般是name，小写，但是列名不区分大小写，Mybatis会忽略列名大小写，智能找到与之对应对象属性名，你甚至可以写成T_NAME AS NaMe，Mybatis一样可以正常工作。<br><br><br><br>有了列名与属性名的映射关系后，Mybatis通过反射创建对象，同时使用反射给对象的属性逐一赋值并返回，那些找不到映射关系的属性，是无法完成赋值的。<br><br><br><br>### Mybatis 如何执行批量插入?<br><br>首先,创建一个简单的insert语句:<br><br>​    <insert id="insertname"><br><br>​     insert into names (name) values (#{value})<br><br>​    </insert><br><br>然后在java代码中像下面这样执行批处理插入:<br><br>​    list<string> names = new arraylist();<br><br>​    names.add(“fred”);<br><br>​    names.add(“barney”);<br><br>​    names.add(“betty”);<br><br>​    names.add(“wilma”);<br><br><br><br>​    // 注意这里 executortype.batch<br><br>​    sqlsession sqlsession = sqlsessionfactory.opensession(executortype.batch);<br><br>​    try {<br><br>​     namemapper mapper = sqlsession.getmapper(namemapper.class);<br><br>​     for (string name : names) {<br><br>​     mapper.insertname(name);<br><br>​     }<br><br>​     sqlsession.commit();<br><br>​    } finally {<br><br>​     sqlsession.close();<br><br>}<br><br><br><br>### Mybatis 如何获取自动生成的(主)键值?<br><br>insert 方法总是返回一个int值 - 这个值代表的是插入的行数。<br><br>而自动生成的键值在 insert 方法执行完后可以被设置到传入的参数对象中。<br><br>示例:<br><br>​    <insert id="insertname" usegeneratedkeys="true" keyproperty="id"><br><br>​     insert into names (name) values (#{name})<br><br>​    </insert><br><br><br><br>​    name name = new name();<br><br>​    name.setname(“fred”);<br><br><br><br>​    int rows = mapper.insertname(name);<br><br>​    // 完成后,id已经被设置到对象中<br><br>​    system.out.println(“rows inserted = ” + rows);<br><br>system.out.println(“generated key value = ” + name.getid());<br><br><br><br>### Mybatis在mapper中如何传递多个参数?<br><br>第1种：<br><br>//DAO层的函数<br><br><br><br>Public UserselectUser(String name,String area);<br><br>//对应的xml,#{0}代表接收的是dao层中的第一个参数，#{1}代表dao层中第二参数，更多参数一致往后加即可。<br><br><br><br>&lt;select id=”selectUser”resultMap=”BaseResultMap”&gt;<br><br>​    select <em>  fromuser_user_t   whereuser_name = #{0} anduser_area=#{1}<br><br></em></string></resultmap></delete></update></insert></select><br><br>第2种：    使用 @param 注解:<br><br>​    import org.apache.ibatis.annotations.param;<br><br>​        public interface usermapper {<br><br>​         user selectuser(@param(“username”) string username,<br><br>​         @param(“hashedpassword”) string hashedpassword);<br><br>​        }<br><br>然后,就可以在xml像下面这样使用(推荐封装为一个map,作为单个参数传递给mapper):<br><br>​    <select id="selectuser" resulttype="user"><br><br>​         select id, username, hashedpassword<br><br>​         from some_table<br><br>​         where username = #{username}<br><br>​         and hashedpassword = #{hashedpassword}<br><br></select><br><br><br><br>### Mybatis动态sql是做什么的？都有哪些动态sql？能简述一下动态sql的执行原理不？<br><br>Mybatis动态sql可以让我们在Xml映射文件内，以标签的形式编写动态sql，完成逻辑判断和动态拼接sql的功能。<br><br>Mybatis提供了9种动态sql标签：trim|where|set|foreach|if|choose|when|otherwise|bind。<br><br>其执行原理为，使用OGNL从sql参数对象中计算表达式的值，根据表达式的值动态拼接sql，以此来完成动态sql的功能。<br><br><br><br>### Mybatis的Xml映射文件中，不同的Xml映射文件，id是否可以重复？<br><br>不同的Xml映射文件，如果配置了namespace，那么id可以重复；如果没有配置namespace，那么id不能重复；毕竟namespace不是必须的，只是最佳实践而已。<br><br><br><br>原因就是namespace+id是作为Map&lt;String, MappedStatement&gt;的key使用的，如果没有namespace，就剩下id，那么，id重复会导致数据互相覆盖。有了namespace，自然id就可以重复，namespace不同，namespace+id自然也就不同。<br><br><br><br>### Mybatis 为什么说是半自动ORM映射工具？它与全自动的区别在哪里？<br><br>Hibernate属于全自动ORM映射工具，使用Hibernate查询关联对象或者关联集合对象时，可以根据对象关系模型直接获取，所以它是全自动的。而Mybatis在查询关联对象或关联集合对象时，需要手动编写sql来完成，所以，称之为半自动ORM映射工具。<br><br><br><br>### Mybatis 一对一、一对多的关联查询 ？<br><br><mapper namespace="com.lcb.mapping.userMapper"><br><br>​    <!--association  一对一关联查询 --><br><br>​    <select id="getClass" parametertype="int" resultmap="ClassesResultMap"><br><br>​        select  from class c,teacher t where c.teacher_id=t.t_id and c.c_id=#{id}<br><br>​    </select><br><br>​    <resultmap type="com.lcb.user.Classes" id="ClassesResultMap"><br><br>​        <!-- 实体类的字段名和数据表的字段名映射 --><br><br>​        <id property="id" column="c_id"><br><br>​        <result property="name" column="c_name"><br><br>​        <association property="teacher" javatype="com.lcb.user.Teacher"><br><br>​            <id property="id" column="t_id"><br><br>​            <result property="name" column="t_name"><br><br>​        </result></id></association><br><br>​    </result></id></resultmap>  <p>​    <!--collection  一对多关联查询 -->  </p><p>​    <select id="getClass2" parametertype="int" resultmap="ClassesResultMap2">  </select></p><p>​        select * from class c,teacher t,student s where c.teacher_id=t.t_id and c.c_id=s.class_id and c.c_id=#{id}  </p><p>​      </p><p>​    <resultmap type="com.lcb.user.Classes" id="ClassesResultMap2">  </resultmap></p><p>​        <id property="id" column="c_id">  </id></p><p>​        <result property="name" column="c_name">  </result></p><p>​        <association property="teacher" javatype="com.lcb.user.Teacher">  </association></p><p>​            <id property="id" column="t_id">  </id></p><p>​            <result property="name" column="t_name">  </result></p><p>​          </p><p>​        <collection property="student" oftype="com.lcb.user.Student">  </collection></p><p>​            <id property="id" column="s_id">  </id></p><p>​            <result property="name" column="s_name">  </result></p><p>​          </p><p>​    </p></mapper></name></name></result></result></id></resultmap>  <p></p><p>  </p>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Java 面试题系列篇-Hibernate 框架</title>
      <link href="/2018/10/20/Java-%E9%9D%A2%E8%AF%95%E9%A2%98%E7%B3%BB%E5%88%97%E7%AF%87-Hibernate-%E6%A1%86%E6%9E%B6/"/>
      <url>/2018/10/20/Java-%E9%9D%A2%E8%AF%95%E9%A2%98%E7%B3%BB%E5%88%97%E7%AF%87-Hibernate-%E6%A1%86%E6%9E%B6/</url>
      
        <content type="html"><![CDATA[<h2 id="Hibernate-框架"><a href="#Hibernate-框架" class="headerlink" title="Hibernate 框架"></a>Hibernate 框架</h2><h3 id="什么是ORM？"><a href="#什么是ORM？" class="headerlink" title="什么是ORM？"></a>什么是ORM？</h3><p>答：对象关系映射（Object-Relational Mapping，简称ORM）是一种为了解决程序的面向对象模型与数据库的关系模型互不匹配问题的技术；简单的说，ORM是通过使用描述对象和数据库之间映射的元数据（在Java中可以用XML或者是注解），将程序中的对象自动持久化到关系数据库中或者将关系数据库表中的行转换成Java对象，其本质上就是将数据从一种形式转换到另外一种形式。</p><h3 id="持久层设计要考虑的问题有哪些？你用过的持久层框架有哪些？"><a href="#持久层设计要考虑的问题有哪些？你用过的持久层框架有哪些？" class="headerlink" title="持久层设计要考虑的问题有哪些？你用过的持久层框架有哪些？"></a>持久层设计要考虑的问题有哪些？你用过的持久层框架有哪些？</h3><p> 答：所谓”持久”就是将数据保存到可掉电式存储设备中以便今后使用，简单的说，就是将内存中的数据保存到关系型数据库、文件系统、消息队列等提供持久化支持的设备中。持久层就是系统中专注于实现数据持久化的相对独立的层面。</p><p>持久层设计的目标包括： </p><ul><li>数据存储逻辑的分离，提供抽象化的数据访问接口。 </li><li>数据访问底层实现的分离，可以在不修改代码的情况下切换底层实现。 </li><li>资源管理和调度的分离，在数据访问层实现统一的资源调度（如缓存机制）。 </li><li>数据抽象，提供更面向对象的数据操作。</li></ul><p>持久层框架有： </p><ul><li>Hibernate </li><li>MyBatis </li><li>TopLink </li><li>Guzz </li><li>jOOQ </li><li>Spring Data </li><li>ActiveJDBC</li></ul><h3 id="Hibernate中SessionFactory是线程安全的吗？Session是线程安全的吗（两个线程能够共享同一个Session吗）？"><a href="#Hibernate中SessionFactory是线程安全的吗？Session是线程安全的吗（两个线程能够共享同一个Session吗）？" class="headerlink" title="Hibernate中SessionFactory是线程安全的吗？Session是线程安全的吗（两个线程能够共享同一个Session吗）？"></a>Hibernate中SessionFactory是线程安全的吗？Session是线程安全的吗（两个线程能够共享同一个Session吗）？</h3><p> 答：SessionFactory对应Hibernate的一个数据存储的概念，它是线程安全的，可以被多个线程并发访问。SessionFactory一般只会在启动的时候构建。对于应用程序，最好将SessionFactory通过单例模式进行封装以便于访问。Session是一个轻量级非线程安全的对象（线程间不能共享session），它表示与数据库进行交互的一个工作单元。Session是由SessionFactory创建的，在任务完成之后它会被关闭。Session是持久层服务对外提供的主要接口。Session会延迟获取数据库连接（也就是在需要的时候才会获取）。为了避免创建太多的session，可以使用ThreadLocal将session和当前线程绑定在一起，这样可以让同一个线程获得的总是同一个session。Hibernate 3中SessionFactory的getCurrentSession()方法就可以做到。</p><h3 id="Hibernate中Session的load和get方法的区别是什么？"><a href="#Hibernate中Session的load和get方法的区别是什么？" class="headerlink" title="Hibernate中Session的load和get方法的区别是什么？"></a>Hibernate中Session的load和get方法的区别是什么？</h3><p>答：主要有以下三项区别：<br>① 如果没有找到符合条件的记录，get方法返回null，load方法抛出异常。<br>② get方法直接返回实体类对象，load方法返回实体类对象的代理。<br>③ 在Hibernate 3之前，get方法只在一级缓存中进行数据查找，如果没有找到对应的数据则越过二级缓存，直接发出SQL语句完成数据读取；load方法则可以从二级缓存中获取数据；从Hibernate 3开始，get方法不再是对二级缓存只写不读，它也是可以访问二级缓存的。</p><p>说明：对于load()方法Hibernate认为该数据在数据库中一定存在可以放心的使用代理来实现延迟加载，如果没有数据就抛出异常，而通过get()方法获取的数据可以不存在。</p><h3 id="Session的save-、update-、merge-、lock-、saveOrUpdate-和persist-方法分别是做什么的？有什么区别？"><a href="#Session的save-、update-、merge-、lock-、saveOrUpdate-和persist-方法分别是做什么的？有什么区别？" class="headerlink" title="Session的save()、update()、merge()、lock()、saveOrUpdate()和persist()方法分别是做什么的？有什么区别？"></a>Session的save()、update()、merge()、lock()、saveOrUpdate()和persist()方法分别是做什么的？有什么区别？</h3><p> 答：Hibernate的对象有三种状态：瞬时态（transient）、持久态（persistent）和游离态（detached），如第135题中的图所示。瞬时态的实例可以通过调用save()、persist()或者saveOrUpdate()方法变成持久态；游离态的实例可以通过调用 update()、saveOrUpdate()、lock()或者replicate()变成持久态。save()和persist()将会引发SQL的INSERT语句，而update()或merge()会引发UPDATE语句。save()和update()的区别在于一个是将瞬时态对象变成持久态，一个是将游离态对象变为持久态。merge()方法可以完成save()和update()方法的功能，它的意图是将新的状态合并到已有的持久化对象上或创建新的持久化对象。对于persist()方法，按照官方文档的说明：① persist()方法把一个瞬时态的实例持久化，但是并不保证标识符被立刻填入到持久化实例中，标识符的填入可能被推迟到flush的时间；② persist()方法保证当它在一个事务外部被调用的时候并不触发一个INSERT语句，当需要封装一个长会话流程的时候，persist()方法是很有必要的；③ save()方法不保证第②条，它要返回标识符，所以它会立即执行INSERT语句，不管是在事务内部还是外部。至于lock()方法和update()方法的区别，update()方法是把一个已经更改过的脱管状态的对象变成持久状态；lock()方法是把一个没有更改过的脱管状态的对象变成持久状态。</p><h3 id="阐述Session加载实体对象的过程。"><a href="#阐述Session加载实体对象的过程。" class="headerlink" title="阐述Session加载实体对象的过程。"></a>阐述Session加载实体对象的过程。</h3><p>答：Session加载实体对象的步骤是：<br>① Session在调用数据库查询功能之前，首先会在一级缓存中通过实体类型和主键进行查找，如果一级缓存查找命中且数据状态合法，则直接返回；<br>② 如果一级缓存没有命中，接下来Session会在当前NonExists记录（相当于一个查询黑名单，如果出现重复的无效查询可以迅速做出判断，从而提升性能）中进行查找，如果NonExists中存在同样的查询条件，则返回null；<br>③ 如果一级缓存查询失败则查询二级缓存，如果二级缓存命中则直接返回；<br>④ 如果之前的查询都未命中，则发出SQL语句，如果查询未发现对应记录则将此次查询添加到Session的NonExists中加以记录，并返回null；<br>⑤ 根据映射配置和SQL语句得到ResultSet，并创建对应的实体对象；<br>⑥ 将对象纳入Session（一级缓存）的管理；<br>⑦ 如果有对应的拦截器，则执行拦截器的onLoad方法；<br>⑧ 如果开启并设置了要使用二级缓存，则将数据对象纳入二级缓存；<br>⑨ 返回数据对象。</p><h3 id="Query接口的list方法和iterate方法有什么区别？"><a href="#Query接口的list方法和iterate方法有什么区别？" class="headerlink" title="Query接口的list方法和iterate方法有什么区别？"></a>Query接口的list方法和iterate方法有什么区别？</h3><p> 答：<br>① list()方法无法利用一级缓存和二级缓存（对缓存只写不读），它只能在开启查询缓存的前提下使用查询缓存；iterate()方法可以充分利用缓存，如果目标数据只读或者读取频繁，使用iterate()方法可以减少性能开销。<br>② list()方法不会引起N+1查询问题，而iterate()方法可能引起N+1查询问题</p><p>说明：关于N+1查询问题，可以参考CSDN上的一篇文章《什么是N+1查询》</p><h3 id="Hibernate如何实现分页查询？"><a href="#Hibernate如何实现分页查询？" class="headerlink" title="Hibernate如何实现分页查询？"></a>Hibernate如何实现分页查询？</h3><p>答：通过Hibernate实现分页查询，开发人员只需要提供HQL语句（调用Session的createQuery()方法）或查询条件（调用Session的createCriteria()方法）、设置查询起始行数（调用Query或Criteria接口的setFirstResult()方法）和最大查询行数（调用Query或Criteria接口的setMaxResults()方法），并调用Query或Criteria接口的list()方法，Hibernate会自动生成分页查询的SQL语句。</p><h3 id="锁机制有什么用？简述Hibernate的悲观锁和乐观锁机制。"><a href="#锁机制有什么用？简述Hibernate的悲观锁和乐观锁机制。" class="headerlink" title="锁机制有什么用？简述Hibernate的悲观锁和乐观锁机制。"></a>锁机制有什么用？简述Hibernate的悲观锁和乐观锁机制。</h3><p>答：有些业务逻辑在执行过程中要求对数据进行排他性的访问，于是需要通过一些机制保证在此过程中数据被锁住不会被外界修改，这就是所谓的锁机制。<br>Hibernate支持悲观锁和乐观锁两种锁机制。悲观锁，顾名思义悲观的认为在数据处理过程中极有可能存在修改数据的并发事务（包括本系统的其他事务或来自外部系统的事务），于是将处理的数据设置为锁定状态。悲观锁必须依赖数据库本身的锁机制才能真正保证数据访问的排他性，关于数据库的锁机制和事务隔离级别在《Java面试题大全（上）》中已经讨论过了。乐观锁，顾名思义，对并发事务持乐观态度（认为对数据的并发操作不会经常性的发生），通过更加宽松的锁机制来解决由于悲观锁排他性的数据访问对系统性能造成的严重影响。最常见的乐观锁是通过数据版本标识来实现的，读取数据时获得数据的版本号，更新数据时将此版本号加1，然后和数据库表对应记录的当前版本号进行比较，如果提交的数据版本号大于数据库中此记录的当前版本号则更新数据，否则认为是过期数据无法更新。Hibernate中通过Session的get()和load()方法从数据库中加载对象时可以通过参数指定使用悲观锁；而乐观锁可以通过给实体类加整型的版本字段再通过XML或@Version注解进行配置。</p><p>提示：使用乐观锁会增加了一个版本字段，很明显这需要额外的空间来存储这个版本字段，浪费了空间，但是乐观锁会让系统具有更好的并发性，这是对时间的节省。因此乐观锁也是典型的空间换时间的策略。</p><h3 id="阐述实体对象的三种状态以及转换关系。"><a href="#阐述实体对象的三种状态以及转换关系。" class="headerlink" title="阐述实体对象的三种状态以及转换关系。"></a>阐述实体对象的三种状态以及转换关系。</h3><p> 答：最新的Hibernate文档中为Hibernate对象定义了四种状态（原来是三种状态，面试的时候基本上问的也是三种状态），分别是：瞬时态（new, or transient）、持久态（managed, or persistent）、游状态（detached）和移除态（removed，以前Hibernate文档中定义的三种状态中没有移除态），如下图所示，就以前的Hibernate文档中移除态被视为是瞬时态。</p><p>瞬时态：当new一个实体对象后，这个对象处于瞬时态，即这个对象只是一个保存临时数据的内存区域，如果没有变量引用这个对象，则会被JVM的垃圾回收机制回收。这个对象所保存的数据与数据库没有任何关系，除非通过Session的save()、saveOrUpdate()、persist()、merge()方法把瞬时态对象与数据库关联，并把数据插入或者更新到数据库，这个对象才转换为持久态对象。</p><p>持久态：持久态对象的实例在数据库中有对应的记录，并拥有一个持久化标识（ID）。对持久态对象进行delete操作后，数据库中对应的记录将被删除，那么持久态对象与数据库记录不再存在对应关系，持久态对象变成移除态（可以视为瞬时态）。持久态对象被修改变更后，不会马上同步到数据库，直到数据库事务提交。</p><p>游离态：当Session进行了close()、clear()、evict()或flush()后，实体对象从持久态变成游离态，对象虽然拥有持久和与数据库对应记录一致的标识值，但是因为对象已经从会话中清除掉，对象不在持久化管理之内，所以处于游离态（也叫脱管态）。游离态的对象与临时状态对象是十分相似的，只是它还含有持久化标识。</p><p>提示：关于这个问题，在Hibernate的官方文档中有更为详细的解读。</p><h3 id="如何理解Hibernate的延迟加载机制？在实际应用中，延迟加载与Session关闭的矛盾是如何处理的？"><a href="#如何理解Hibernate的延迟加载机制？在实际应用中，延迟加载与Session关闭的矛盾是如何处理的？" class="headerlink" title="如何理解Hibernate的延迟加载机制？在实际应用中，延迟加载与Session关闭的矛盾是如何处理的？"></a>如何理解Hibernate的延迟加载机制？在实际应用中，延迟加载与Session关闭的矛盾是如何处理的？</h3><p>答：延迟加载就是并不是在读取的时候就把数据加载进来，而是等到使用时再加载。Hibernate使用了虚拟代理机制实现延迟加载，我们使用Session的load()方法加载数据或者一对多关联映射在使用延迟加载的情况下从一的一方加载多的一方，得到的都是虚拟代理，简单的说返回给用户的并不是实体本身，而是实体对象的代理。代理对象在用户调用getter方法时才会去数据库加载数据。但加载数据就需要数据库连接。而当我们把会话关闭时，数据库连接就同时关闭了。</p><p>延迟加载与session关闭的矛盾一般可以这样处理：<br>① 关闭延迟加载特性。这种方式操作起来比较简单，因为Hibernate的延迟加载特性是可以通过映射文件或者注解进行配置的，但这种解决方案存在明显的缺陷。首先，出现”no session or session was closed”通常说明系统中已经存在主外键关联，如果去掉延迟加载的话，每次查询的开销都会变得很大。<br>② 在session关闭之前先获取需要查询的数据，可以使用工具方法Hibernate.isInitialized()判断对象是否被加载，如果没有被加载则可以使用Hibernate.initialize()方法加载对象。<br>③ 使用拦截器或过滤器延长Session的生命周期直到视图获得数据。Spring整合Hibernate提供的OpenSessionInViewFilter和OpenSessionInViewInterceptor就是这种做法。</p><h3 id="举一个多对多关联的例子，并说明如何实现多对多关联映射。"><a href="#举一个多对多关联的例子，并说明如何实现多对多关联映射。" class="headerlink" title="举一个多对多关联的例子，并说明如何实现多对多关联映射。"></a>举一个多对多关联的例子，并说明如何实现多对多关联映射。</h3><p> 答：例如：商品和订单、学生和课程都是典型的多对多关系。可以在实体类上通过@ManyToMany注解配置多对多关联或者通过映射文件中的和标签配置多对多关联，但是实际项目开发中，很多时候都是将多对多关联映射转换成两个多对一关联映射来实现的。</p><h3 id="谈一下你对继承映射的理解。"><a href="#谈一下你对继承映射的理解。" class="headerlink" title="谈一下你对继承映射的理解。"></a>谈一下你对继承映射的理解。</h3><p> 答：继承关系的映射策略有三种：<br>① 每个继承结构一张表（table per class hierarchy），不管多少个子类都用一张表。<br>② 每个子类一张表（table per subclass），公共信息放一张表，特有信息放单独的表。<br>③ 每个具体类一张表（table per concrete class），有多少个子类就有多少张表。<br>第一种方式属于单表策略，其优点在于查询子类对象的时候无需表连接，查询速度快，适合多态查询；缺点是可能导致表很大。后两种方式属于多表策略，其优点在于数据存储紧凑，其缺点是需要进行连接查询，不适合多态查询。</p><h3 id="简述Hibernate常见优化策略。"><a href="#简述Hibernate常见优化策略。" class="headerlink" title="简述Hibernate常见优化策略。"></a>简述Hibernate常见优化策略。</h3><p> 答：这个问题应当挑自己使用过的优化策略回答，常用的有：<br>① 制定合理的缓存策略（二级缓存、查询缓存）。<br>② 采用合理的Session管理机制。<br>③ 尽量使用延迟加载特性。<br>④ 设定合理的批处理参数。<br>⑤ 如果可以，选用UUID作为主键生成器。<br>⑥ 如果可以，选用基于版本号的乐观锁替代悲观锁。<br>⑦ 在开发过程中, 开启hibernate.show_sql选项查看生成的SQL，从而了解底层的状况；开发完成后关闭此选项。<br>⑧ 考虑数据库本身的优化，合理的索引、恰当的数据分区策略等都会对持久层的性能带来可观的提升，但这些需要专业的DBA（数据库管理员）提供支持。</p><h3 id="谈一谈Hibernate的一级缓存、二级缓存和查询缓存。"><a href="#谈一谈Hibernate的一级缓存、二级缓存和查询缓存。" class="headerlink" title="谈一谈Hibernate的一级缓存、二级缓存和查询缓存。"></a>谈一谈Hibernate的一级缓存、二级缓存和查询缓存。</h3><p>答：Hibernate的Session提供了一级缓存的功能，默认总是有效的，当应用程序保存持久化实体、修改持久化实体时，Session并不会立即把这种改变提交到数据库，而是缓存在当前的Session中，除非显示调用了Session的flush()方法或通过close()方法关闭Session。通过一级缓存，可以减少程序与数据库的交互，从而提高数据库访问性能。<br>SessionFactory级别的二级缓存是全局性的，所有的Session可以共享这个二级缓存。不过二级缓存默认是关闭的，需要显示开启并指定需要使用哪种二级缓存实现类（可以使用第三方提供的实现）。一旦开启了二级缓存并设置了需要使用二级缓存的实体类，SessionFactory就会缓存访问过的该实体类的每个对象，除非缓存的数据超出了指定的缓存空间。<br>一级缓存和二级缓存都是对整个实体进行缓存，不会缓存普通属性，如果希望对普通属性进行缓存，可以使用查询缓存。查询缓存是将HQL或SQL语句以及它们的查询结果作为键值对进行缓存，对于同样的查询可以直接从缓存中获取数据。查询缓存默认也是关闭的，需要显示开启。</p><h3 id="Hibernate中DetachedCriteria类是做什么的？"><a href="#Hibernate中DetachedCriteria类是做什么的？" class="headerlink" title="Hibernate中DetachedCriteria类是做什么的？"></a>Hibernate中DetachedCriteria类是做什么的？</h3><p>答：DetachedCriteria和Criteria的用法基本上是一致的，但Criteria是由Session的createCriteria()方法创建的，也就意味着离开创建它的Session，Criteria就无法使用了。DetachedCriteria不需要Session就可以创建（使用DetachedCriteria.forClass()方法创建），所以通常也称其为离线的Criteria，在需要进行查询操作的时候再和Session绑定（调用其getExecutableCriteria(Session)方法），这也就意味着一个DetachedCriteria可以在需要的时候和不同的Session进行绑定。</p><h3 id="OneToMany注解的mappedBy属性有什么作用？"><a href="#OneToMany注解的mappedBy属性有什么作用？" class="headerlink" title="@OneToMany注解的mappedBy属性有什么作用？"></a>@OneToMany注解的mappedBy属性有什么作用？</h3><p>答：@OneToMany用来配置一对多关联映射，但通常情况下，一对多关联映射都由多的一方来维护关联关系，例如学生和班级，应该在学生类中添加班级属性来维持学生和班级的关联关系（在数据库中是由学生表中的外键班级编号来维护学生表和班级表的多对一关系），如果要使用双向关联，在班级类中添加一个容器属性来存放学生，并使用@OneToMany注解进行映射，此时mappedBy属性就非常重要。如果使用XML进行配置，可以用<set>标签的inverse=”true”设置来达到同样的效果。</set></p><h3 id="Hibernate-的缓存原理是什么？延迟加载原理是什么？"><a href="#Hibernate-的缓存原理是什么？延迟加载原理是什么？" class="headerlink" title="Hibernate 的缓存原理是什么？延迟加载原理是什么？"></a>Hibernate 的缓存原理是什么？延迟加载原理是什么？</h3>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Java 面试题系列篇-概念解释</title>
      <link href="/2018/10/20/Java-%E9%9D%A2%E8%AF%95%E9%A2%98%E7%B3%BB%E5%88%97%E7%AF%87-%E6%A6%82%E5%BF%B5%E8%A7%A3%E9%87%8A/"/>
      <url>/2018/10/20/Java-%E9%9D%A2%E8%AF%95%E9%A2%98%E7%B3%BB%E5%88%97%E7%AF%87-%E6%A6%82%E5%BF%B5%E8%A7%A3%E9%87%8A/</url>
      
        <content type="html"><![CDATA[<h2 id="概念解释"><a href="#概念解释" class="headerlink" title="概念解释"></a>概念解释</h2><h3 id="解释一下网络应用的模式及其特点。"><a href="#解释一下网络应用的模式及其特点。" class="headerlink" title="解释一下网络应用的模式及其特点。"></a>解释一下网络应用的模式及其特点。</h3><p>答：典型的网络应用模式大致有三类：B/S、C/S、P2P。其中B代表浏览器（Browser）、C代表客户端（Client）、S代表服务器（Server），P2P是对等模式，不区分客户端和服务器。B/S应用模式中可以视为特殊的C/S应用模式，只是将C/S应用模式中的特殊的客户端换成了浏览器，因为几乎所有的系统上都有浏览器，那么只要打开浏览器就可以使用应用，没有安装、配置、升级客户端所带来的各种开销。P2P应用模式中，成千上万台彼此连接的计算机都处于对等的地位，整个网络一般来说不依赖专用的集中服务器。网络中的每一台计算机既能充当网络服务的请求者，又对其它计算机的请求作出响应，提供资源和服务。通常这些资源和服务包括：信息的共享和交换、计算资源（如CPU的共享）、存储共享（如缓存和磁盘空间的使用）等，这种应用模式最大的阻力安全性、版本等问题，目前有很多应用都混合使用了多种应用模型，最常见的网络视频应用，它几乎把三种模式都用上了。</p><p>补充：此题要跟”电子商务模式”区分开，因为有很多人被问到这个问题的时候马上想到的是B2B（如阿里巴巴）、B2C（如当当、亚马逊、京东）、C2C（如淘宝、拍拍）、C2B（如威客）、O2O（如美团、饿了么）。对于这类问题，可以去百度上面科普一下。</p><h3 id="什么是Web-Service（Web服务）？"><a href="#什么是Web-Service（Web服务）？" class="headerlink" title="什么是Web Service（Web服务）？"></a>什么是Web Service（Web服务）？</h3><p>答：从表面上看，Web Service就是一个应用程序，它向外界暴露出一个能够通过Web进行调用的API。这就是说，你能够用编程的方法透明的调用这个应用程序，不需要了解它的任何细节，跟你使用的编程语言也没有关系。例如可以创建一个提供天气预报的Web Service，那么无论你用哪种编程语言开发的应用都可以通过调用它的API并传入城市信息来获得该城市的天气预报。之所以称之为Web Service，是因为它基于HTTP协议传输数据，这使得运行在不同机器上的不同应用无须借助附加的、专门的第三方软件或硬件，就可相互交换数据或集成。</p><p>补充：这里必须要提及的一个概念是SOA（Service-Oriented Architecture，面向服务的架构），SOA是一种思想，它将应用程序的不同功能单元通过中立的契约联系起来，独立于硬件平台、操作系统和编程语言，使得各种形式的功能单元能够更好的集成。显然，Web Service是SOA的一种较好的解决方案，它更多的是一种标准，而不是一种具体的技术。</p><h3 id="概念解释：SOAP、WSDL、UDDI。"><a href="#概念解释：SOAP、WSDL、UDDI。" class="headerlink" title="概念解释：SOAP、WSDL、UDDI。"></a>概念解释：SOAP、WSDL、UDDI。</h3><p>答： </p><ul><li>SOAP：简单对象访问协议（Simple Object Access Protocol），是Web Service中交换数据的一种协议规范。 </li><li>WSDL：Web服务描述语言（Web Service Description Language），它描述了Web服务的公共接口。这是一个基于XML的关于如何与Web服务通讯和使用的服务描述；也就是描述与目录中列出的Web服务进行交互时需要绑定的协议和信息格式。通常采用抽象语言描述该服务支持的操作和信息，使用的时候再将实际的网络协议和信息格式绑定给该服务。 </li><li>UDDI：统一描述、发现和集成（Universal Description, Discovery and Integration），它是一个基于XML的跨平台的描述规范，可以使世界范围内的企业在互联网上发布自己所提供的服务。简单的说，UDDI是访问各种WSDL的一个门面（可以参考设计模式中的门面模式）。</li></ul><p>提示：关于Web Service的相关概念和知识可以在W3CSchool上找到相关的资料。</p><h3 id="Java规范中和Web-Service相关的规范有哪些？"><a href="#Java规范中和Web-Service相关的规范有哪些？" class="headerlink" title="Java规范中和Web Service相关的规范有哪些？"></a>Java规范中和Web Service相关的规范有哪些？</h3><p>答：Java规范中和Web Service相关的有三个： </p><ul><li>JAX-WS(JSR 224)：这个规范是早期的基于SOAP的Web Service规范JAX-RPC的替代版本，它并不提供向下兼容性，因为RPC样式的WSDL以及相关的API已经在Java EE5中被移除了。WS-MetaData是JAX-WS的依赖规范，提供了基于注解配置Web Service和SOAP消息的相关API。 </li><li>JAXM(JSR 67)：定义了发送和接收消息所需的API,相当于Web Service的服务器端。 </li><li>JAX-RS(JSR 311 &amp; JSR 339 &amp; JSR 370)：是Java针对REST（Representation State Transfer）架构风格制定的一套Web Service规范。REST是一种软件架构模式，是一种风格，它不像SOAP那样本身承载着一种消息协议， (两种风格的Web Service均采用了HTTP做传输协议，因为HTTP协议能穿越防火墙，Java的远程方法调用（RMI）等是重量级协议，通常不能穿越防火墙），因此可以将REST视为基于HTTP协议的软件架构。REST中最重要的两个概念是资源定位和资源操作，而HTTP协议恰好完整的提供了这两个点。HTTP协议中的URI可以完成资源定位，而GET、POST、OPTION、DELETE方法可以完成资源操作。因此REST完全依赖HTTP协议就可以完成Web Service，而不像SOAP协议那样只利用了HTTP的传输特性，定位和操作都是由SOAP协议自身完成的，也正是由于SOAP消息的存在使得基于SOAP的Web Service显得笨重而逐渐被淘汰。</li></ul><h3 id="介绍一下你了解的Java领域的Web-Service框架。"><a href="#介绍一下你了解的Java领域的Web-Service框架。" class="headerlink" title="介绍一下你了解的Java领域的Web Service框架。"></a>介绍一下你了解的Java领域的Web Service框架。</h3><p>答：Java领域的Web Service框架很多，包括Axis2（Axis的升级版本）、Jersey（RESTful的Web Service框架）、CXF（XFire的延续版本）、Hessian、Turmeric、JBoss SOA等，其中绝大多数都是开源框架。</p><p>提示：面试被问到这类问题的时候一定选择自己用过的最熟悉的作答，如果之前没有了解过就应该在面试前花一些时间了解其中的两个，并比较其优缺点，这样才能在面试时给出一个漂亮的答案。</p><h3 id="JDK和JRE的区别是什么？"><a href="#JDK和JRE的区别是什么？" class="headerlink" title="JDK和JRE的区别是什么？"></a>JDK和JRE的区别是什么？</h3><p>Java运行时环境(JRE)。它包括Java虚拟机、Java核心类库和支持文件。它不包含开发工具（JDK）–编译器、调试器和其他工具。</p><p>Java开发工具包(JDK)是完整的Java软件开发包，包含了JRE，编译器和其他的工具(比如：JavaDoc，Java调试器)，可以让开发者开发、编译、执行Java应用程序。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Java 面试题系列篇-JSP和servlet</title>
      <link href="/2018/10/20/Java-%E9%9D%A2%E8%AF%95%E9%A2%98%E7%B3%BB%E5%88%97%E7%AF%87-JSP%E5%92%8Cservlet/"/>
      <url>/2018/10/20/Java-%E9%9D%A2%E8%AF%95%E9%A2%98%E7%B3%BB%E5%88%97%E7%AF%87-JSP%E5%92%8Cservlet/</url>
      
        <content type="html"><![CDATA[<h2 id="JSP-和-Servlet"><a href="#JSP-和-Servlet" class="headerlink" title="JSP 和 Servlet"></a>JSP 和 Servlet</h2><h3 id="什么是JSP页面？"><a href="#什么是JSP页面？" class="headerlink" title="什么是JSP页面？"></a>什么是JSP页面？</h3><p>JSP页面是一种包含了静态数据和JSP元素两种类型的文本的文本文档。静态数据可以用任何基于文本的格式来表示，比如：HTML或者XML。JSP是一种混合了静态内容和动态产生的内容的技术。这里看下JSP的例子。</p><h3 id="JSP请求是如何被处理的？"><a href="#JSP请求是如何被处理的？" class="headerlink" title="JSP请求是如何被处理的？"></a>JSP请求是如何被处理的？</h3><p>浏览器首先要请求一个以.jsp扩展名结尾的页面，发起JSP请求，然后，Web服务器读取这个请求，使用JSP编译器把JSP页面转化成一个Servlet类。需要注意的是，只有当第一次请求页面或者是JSP文件发生改变的时候JSP文件才会被编译，然后服务器调用servlet类，处理浏览器的请求。一旦请求执行结束，servlet会把响应发送给客户端。这里看下如何在JSP中获取请求参数。</p><h3 id="JSP有哪些内置对象？作用分别是什么？"><a href="#JSP有哪些内置对象？作用分别是什么？" class="headerlink" title="JSP有哪些内置对象？作用分别是什么？"></a>JSP有哪些内置对象？作用分别是什么？</h3><p>答：JSP有9个内置对象： </p><ul><li>request：封装客户端的请求，其中包含来自GET或POST请求的参数； </li><li>response：封装服务器对客户端的响应； </li><li>pageContext：通过该对象可以获取其他对象； </li><li>session：封装用户会话的对象； </li><li>application：封装服务器运行环境的对象； </li><li>out：输出服务器响应的输出流对象； </li><li>config：Web应用的配置对象； </li><li>page：JSP页面本身（相当于Java程序中的this）； </li><li>exception：封装页面抛出异常的对象。</li></ul><p>补充：如果用Servlet来生成网页中的动态内容无疑是非常繁琐的工作，另一方面，所有的文本和HTML标签都是硬编码，即使做出微小的修改，都需要进行重新编译。JSP解决了Servlet的这些问题，它是Servlet很好的补充，可以专门用作为用户呈现视图（View），而Servlet作为控制器（Controller）专门负责处理用户请求并转发或重定向到某个页面。基于Java的Web开发很多都同时使用了Servlet和JSP。JSP页面其实是一个Servlet，能够运行Servlet的服务器（Servlet容器）通常也是JSP容器，可以提供JSP页面的运行环境，Tomcat就是一个Servlet/JSP容器。第一次请求一个JSP页面时，Servlet/JSP容器首先将JSP页面转换成一个JSP页面的实现类，这是一个实现了JspPage接口或其子接口HttpJspPage的Java类。JspPage接口是Servlet的子接口，因此每个JSP页面都是一个Servlet。转换成功后，容器会编译Servlet类，之后容器加载和实例化Java字节码，并执行它通常对Servlet所做的生命周期操作。对同一个JSP页面的后续请求，容器会查看这个JSP页面是否被修改过，如果修改过就会重新转换并重新编译并执行。如果没有则执行内存中已经存在的Servlet实例。我们可以看一段JSP代码对应的Java程序就知道一切了，而且9个内置对象的神秘面纱也会被揭开。</p><p>JSP页面：</p><p>&lt;%@ page pageEncoding=”UTF-8”%&gt;</p><p>&lt;%</p><p>String path = request.getContextPath();</p><p>String basePath = request.getScheme() + “://“ + request.getServerName() + “:” + request.getServerPort() + path + “/“;</p><p>%&gt;</p><p>&lt;!DOCTYPE html&gt;</p><html><br><br>  <head><meta name="generator" content="Hexo 3.8.0"><br><br>​    <base href="<%=basePath%>"><br><br>​    <title>首页</title><br><br>    <style type="text/css"><br><br>​        * { font-family: “Arial”; }<br><br>​    </style><br><br>  </head><br><br><br><br>  <body><br><br>​    <h1>Hello, World!</h1><br><br>​    <hr><br><br>​    <h2>Current time is: &lt;%= new java.util.Date().toString() %&gt;</h2><br><br>  </body><br><br></html><p>对应的Java代码：</p><p>/*</p><ul><li>Generated by the Jasper component of Apache Tomcat</li><li>Version: Apache Tomcat/7.0.52</li><li>Generated at: 2014-10-13 13:28:38 UTC</li><li>Note: The last modified time of this file was set to</li><li>the last modified time of the source file after</li><li><p>generation to assist with modification tracking.</p><p>*/</p></li></ul><p>package org.apache.jsp;</p><p>import javax.servlet.*;</p><p>import javax.servlet.http.*;</p><p>import javax.servlet.jsp.*;</p><p>public final class index_jsp extends org.apache.jasper.runtime.HttpJspBase</p><p>​        implements org.apache.jasper.runtime.JspSourceDependent {</p><p>​    private static final javax.servlet.jsp.JspFactory _jspxFactory = javax.servlet.jsp.JspFactory</p><p>​            .getDefaultFactory();</p><p>​    private static java.util.Map&lt;java.lang.String, java.lang.Long&gt; _jspx_dependants;</p><p>​    private javax.el.ExpressionFactory _el_expressionfactory;</p><p>​    private org.apache.tomcat.InstanceManager _jsp_instancemanager;</p><p>​    public java.util.Map&lt;java.lang.String, java.lang.Long&gt; getDependants() {</p><p>​        return _jspx_dependants;</p><p>​    }</p><p>​    public void _jspInit() {</p><p>​        _el_expressionfactory = _jspxFactory.getJspApplicationContext(</p><p>​                getServletConfig().getServletContext()).getExpressionFactory();</p><p>​        _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory</p><p>​                .getInstanceManager(getServletConfig());</p><p>​    }</p><p>​    public void _jspDestroy() {</p><p>​    }</p><p>​    public void _jspService(</p><p>​            final javax.servlet.http.HttpServletRequest request,</p><p>​            final javax.servlet.http.HttpServletResponse response)</p><p>​            throws java.io.IOException, javax.servlet.ServletException {</p><p>​        // 内置对象就是在这里定义的</p><p>​        final javax.servlet.jsp.PageContext pageContext;</p><p>​        javax.servlet.http.HttpSession session = null;</p><p>​        final javax.servlet.ServletContext application;</p><p>​        final javax.servlet.ServletConfig config;</p><p>​        javax.servlet.jsp.JspWriter out = null;</p><p>​        final java.lang.Object page = this;</p><p>​        javax.servlet.jsp.JspWriter _jspx_out = null;</p><p>​        javax.servlet.jsp.PageContext _jspx_page_context = null;</p><p>​        try {</p><p>​            response.setContentType(“text/html;charset=UTF-8”);</p><p>​            pageContext = _jspxFactory.getPageContext(this, request, response,</p><p>​                    null, true, 8192, true);</p><p>​            _jspx_page_context = pageContext;</p><p>​            application = pageContext.getServletContext();</p><p>​            config = pageContext.getServletConfig();</p><p>​            session = pageContext.getSession();</p><p>​            out = pageContext.getOut();</p><p>​            _jspx_out = out;</p><p>​            out.write(‘\r’);</p><p>​            out.write(‘\n’);</p><p>​            String path = request.getContextPath();</p><p>​            String basePath = request.getScheme() + “://“</p><p>​                    + request.getServerName() + “:” + request.getServerPort()</p><p>​                    + path + “/“;</p><p>// 以下代码通过输出流将HTML标签输出到浏览器中</p><p>​            out.write(“\r\n”);</p><p>​            out.write(“\r\n”);</p><p>​            out.write(“&lt;!DOCTYPE html&gt;\r\n”);</p><p>​            out.write(“<html>\r\n”);</html></p><p>​            out.write(“  <head><meta name="generator" content="Hexo 3.8.0">\r\n”);</head></p><p>​            out.write(“    &lt;base href=””);</p><p>​            out.print(basePath);</p><p>​            out.write(“”&gt;\r\n”);</p><p>​            out.write(“    <title>首页</title>\r\n”);</p><p>​            out.write(“    <style type="text/css">\r\n”);</p><p>​            out.write(“    \t* { font-family: “Arial”; }\r\n”);</p><p>​            out.write(“    </style>\r\n”);</p><p>​            out.write(“  \r\n”);</p><p>​            out.write(“  \r\n”);</p><p>​            out.write(“  <body>\r\n”);</body></p><p>​            out.write(“    </p><h1>Hello, World!</h1>\r\n”);<p></p><p>​            out.write(“    <hr>\r\n”);</p><p>​            out.write(“    </p><h2>Current time is: “);<p></p><p>​            out.print(new java.util.Date().toString());</p><p>​            out.write(“</p></h2>\r\n”);<p></p><p>​            out.write(“  \r\n”);</p><p>​            out.write(“\r\n”);</p><p>​        } catch (java.lang.Throwable t) {</p><p>​            if (!(t instanceof javax.servlet.jsp.SkipPageException)) {</p><p>​                out = _jspx_out;</p><p>​                if (out != null &amp;&amp; out.getBufferSize() != 0)</p><p>​                    try {</p><p>​                        out.clearBuffer();</p><p>​                    } catch (java.io.IOException e) {</p><p>​                    }</p><p>​                if (_jspx_page_context != null)</p><p>​                    _jspx_page_context.handlePageException(t);</p><p>​                else</p><p>​                    throw new ServletException(t);</p><p>​            }</p><p>​        } finally {</p><p>​            jspxFactory.releasePageContext(jspx_page_context);</p><p>​        }</p><p>​    }</p><p>}</p><h3 id="JSP有什么优点？"><a href="#JSP有什么优点？" class="headerlink" title="JSP有什么优点？"></a>JSP有什么优点？</h3><p>下面列出了使用JSP的优点：</p><p>JSP页面是被动态编译成Servlet的，因此，开发者可以很容易的更新展现代码。</p><p>JSP页面可以被预编译。</p><p>JSP页面可以很容易的和静态模板结合，包括：HTML或者XML，也可以很容易的和产生动态内容的代码结合起来。</p><p>开发者可以提供让页面设计者以类XML格式来访问的自定义的JSP标签库。</p><p>开发者可以在组件层做逻辑上的改变，而不需要编辑单独使用了应用层逻辑的页面。</p><h3 id="什么是JSP指令-Directive-？JSP中有哪些不同类型的指令？"><a href="#什么是JSP指令-Directive-？JSP中有哪些不同类型的指令？" class="headerlink" title="什么是JSP指令(Directive)？JSP中有哪些不同类型的指令？"></a>什么是JSP指令(Directive)？JSP中有哪些不同类型的指令？</h3><p>Directive是当JSP页面被编译成Servlet的时候，JSP引擎要处理的指令。Directive用来设置页面级别的指令，从外部文件插入数据，指定自定义的标签库。Directive是定义在 &lt;%@ 和 %&gt;之间的。下面列出了不同类型的Directive：</p><p>包含指令(Include directive)：用来包含文件和合并文件内容到当前的页面。</p><p>页面指令(Page directive)：用来定义JSP页面中特定的属性，比如错误页面和缓冲区。</p><p>Taglib指令： 用来声明页面中使用的自定义的标签库。</p><h3 id="什么是JSP动作-JSP-action-？"><a href="#什么是JSP动作-JSP-action-？" class="headerlink" title="什么是JSP动作(JSP action)？"></a>什么是JSP动作(JSP action)？</h3><p>JSP动作以XML语法的结构来控制Servlet引擎的行为。当JSP页面被请求的时候，JSP动作会被执行。它们可以被动态的插入到文件中，重用JavaBean组件，转发用户到其他的页面，或者是给Java插件产生HTML代码。下面列出了可用的动作：</p><p>jsp:include-当JSP页面被请求的时候包含一个文件。</p><p>jsp:useBean-找出或者是初始化Javabean。</p><p>jsp:setProperty-设置JavaBean的属性。</p><p>jsp:getProperty-获取JavaBean的属性。</p><p>jsp:forward-把请求转发到新的页面。</p><p>jsp:plugin-产生特定浏览器的代码。</p><h3 id="什么是Scriptlets？"><a href="#什么是Scriptlets？" class="headerlink" title="什么是Scriptlets？"></a>什么是Scriptlets？</h3><p>JSP技术中，scriptlet是嵌入在JSP页面中的一段Java代码。scriptlet是位于标签内部的所有的东西，在标签与标签之间，用户可以添加任意有效的scriplet。</p><h3 id="get和post请求的区别？"><a href="#get和post请求的区别？" class="headerlink" title="get和post请求的区别？"></a>get和post请求的区别？</h3><p>答： </p><p>get请求用来从服务器上获得资源，而post是用来向服务器提交数据； </p><p>get将表单中数据按照name=value的形式，添加到action 所指向的URL 后面，并且两者使用”?”连接，而各个变量之间使用”&amp;”连接；post是将表单中的数据放在HTTP协议的请求头或消息体中，传递到action所指向URL； </p><p>get传输的数据要受到URL长度限制（1024字节）；而post可以传输大量的数据，上传文件通常要使用post方式； </p><p>使用get时参数会显示在地址栏上，如果这些数据不是敏感数据，那么可以使用get；对于敏感数据还是应用使用post； </p><p>get使用MIME类型application/x-www-form-urlencoded的URL编码（也叫百分号编码）文本的格式传递参数，保证被传送的参数由遵循规范的文本组成，例如一个空格的编码是”%20”。</p><h3 id="声明-Decalaration-在哪里？"><a href="#声明-Decalaration-在哪里？" class="headerlink" title="声明(Decalaration)在哪里？"></a>声明(Decalaration)在哪里？</h3><p>声明跟Java中的变量声明很相似，它用来声明随后要被表达式或者scriptlet使用的变量。添加的声明必须要用开始和结束标签包起来。</p><h3 id="什么是表达式-Expression-？"><a href="#什么是表达式-Expression-？" class="headerlink" title="什么是表达式(Expression)？"></a>什么是表达式(Expression)？</h3><p>【列表很长，可以分上、中、下发布】</p><p>JSP表达式是Web服务器把脚本语言表达式的值转化成一个String对象，插入到返回给客户端的数据流中。表达式是在&lt;%=和%&gt;这两个标签之间定义的。</p><h3 id="隐含对象是什么意思？有哪些隐含对象？"><a href="#隐含对象是什么意思？有哪些隐含对象？" class="headerlink" title="隐含对象是什么意思？有哪些隐含对象？"></a>隐含对象是什么意思？有哪些隐含对象？</h3><p>JSP隐含对象是页面中的一些Java对象，JSP容器让这些Java对象可以为开发者所使用。开发者不用明确的声明就可以直接使用他们。JSP隐含对象也叫做预定义变量。下面列出了JSP页面中的隐含对象：</p><p>application</p><p>page</p><p>request</p><p>response</p><p>session</p><p>exception</p><p>out</p><p>config</p><p>pageContext</p><h3 id="JSP和Servlet是什么关系？"><a href="#JSP和Servlet是什么关系？" class="headerlink" title="JSP和Servlet是什么关系？"></a>JSP和Servlet是什么关系？</h3><p>答：其实这个问题在上面已经阐述过了，Servlet是一个特殊的Java程序，它运行于服务器的JVM中，能够依靠服务器的支持向浏览器提供显示内容。JSP本质上是Servlet的一种简易形式，JSP会被服务器处理成一个类似于Servlet的Java程序，可以简化页面内容的生成。Servlet和JSP最主要的不同点在于，Servlet的应用逻辑是在Java文件中，并且完全从表示层中的HTML分离开来。而JSP的情况是Java和HTML可以组合成一个扩展名为.jsp的文件。有人说，Servlet就是在Java中写HTML，而JSP就是在HTML中写Java代码，当然这个说法是很片面且不够准确的。JSP侧重于视图，Servlet更侧重于控制逻辑，在MVC架构模式中，JSP适合充当视图（view）而Servlet适合充当控制器（controller）。</p><h3 id="常用的Web服务器有哪些？"><a href="#常用的Web服务器有哪些？" class="headerlink" title="常用的Web服务器有哪些？"></a>常用的Web服务器有哪些？</h3><p>答：Unix和Linux平台下使用最广泛的免费HTTP服务器是Apache服务器，而Windows平台的服务器通常使用IIS作为Web服务器。选择Web服务器应考虑的因素有：性能、安全性、日志和统计、虚拟主机、代理服务器、缓冲服务和集成应用程序等。下面是对常见服务器的简介： </p><ul><li>IIS：Microsoft的Web服务器产品，全称是Internet Information Services。IIS是允许在公共Intranet或Internet上发布信息的Web服务器。IIS是目前最流行的Web服务器产品之一，很多著名的网站都是建立在IIS的平台上。IIS提供了一个图形界面的管理工具，称为Internet服务管理器，可用于监视配置和控制Internet服务。IIS是一种Web服务组件，其中包括Web服务器、FTP服务器、NNTP服务器和SMTP服务器，分别用于网页浏览、文件传输、新闻服务和邮件发送等方面，它使得在网络（包括互联网和局域网）上发布信息成了一件很容易的事。它提供ISAPI(Intranet Server API）作为扩展Web服务器功能的编程接口；同时，它还提供一个Internet数据库连接器，可以实现对数据库的查询和更新。 </li><li>Kangle：Kangle Web服务器是一款跨平台、功能强大、安全稳定、易操作的高性能Web服务器和反向代理服务器软件。此外，Kangle也是一款专为做虚拟主机研发的Web服务器。实现虚拟主机独立进程、独立身份运行。用户之间安全隔离，一个用户出问题不影响其他用户。支持PHP、ASP、ASP.NET、Java、Ruby等多种动态开发语言。 </li><li>WebSphere：WebSphere Application Server是功能完善、开放的Web应用程序服务器，是IBM电子商务计划的核心部分，它是基于Java的应用环境，用于建立、部署和管理Internet和Intranet Web应用程序，适应各种Web应用程序服务器的需要。 </li><li>WebLogic：WebLogic Server是一款多功能、基于标准的Web应用服务器，为企业构建企业应用提供了坚实的基础。针对各种应用开发、关键性任务的部署，各种系统和数据库的集成、跨Internet协作等Weblogic都提供了相应的支持。由于它具有全面的功能、对开放标准的遵从性、多层架构、支持基于组件的开发等优势，很多公司的企业级应用都选择它来作为开发和部署的环境。WebLogic Server在使应用服务器成为企业应用架构的基础方面一直处于领先地位，为构建集成化的企业级应用提供了稳固的基础。 </li><li>Apache：目前Apache仍然是世界上用得最多的Web服务器，其市场占有率很长时间都保持在60%以上（目前的市场份额约40%左右）。世界上很多著名的网站都是Apache的产物，它的成功之处主要在于它的源代码开放、有一支强大的开发团队、支持跨平台的应用（可以运行在几乎所有的Unix、Windows、Linux系统平台上）以及它的可移植性等方面。 </li><li>Tomcat：Tomcat是一个开放源代码、运行Servlet和JSP的容器。Tomcat实现了Servlet和JSP规范。此外，Tomcat还实现了Apache-Jakarta规范而且比绝大多数商业应用软件服务器要好，因此目前也有不少的Web服务器都选择了Tomcat。 </li><li>Nginx：读作”engine x”，是一个高性能的HTTP和反向代理服务器，也是一个IMAP/POP3/SMTP代理服务器。 Nginx是由Igor Sysoev为俄罗斯访问量第二的Rambler站点开发的，第一个公开版本0.1.0发布于2004年10月4日。其将源代码以类BSD许可证的形式发布，因它的稳定性、丰富的功能集、示例配置文件和低系统资源的消耗而闻名。在2014年下半年，Nginx的市场份额达到了14%。</li></ul><h3 id="如何实现JSP或Servlet的单线程模式？"><a href="#如何实现JSP或Servlet的单线程模式？" class="headerlink" title="如何实现JSP或Servlet的单线程模式？"></a>如何实现JSP或Servlet的单线程模式？</h3><p>答：<br>对于JSP页面，可以通过page指令进行设置。</p><p>&lt;%@page isThreadSafe=”false”%&gt;</p><p>1</p><p>对于Servlet，可以让自定义的Servlet实现SingleThreadModel标识接口。</p><p>说明：如果将JSP或Servlet设置成单线程工作模式，会导致每个请求创建一个Servlet实例，这种实践将导致严重的性能问题（服务器的内存压力很大，还会导致频繁的垃圾回收），所以通常情况下并不会这么做。</p><h3 id="实现会话跟踪的技术有哪些？"><a href="#实现会话跟踪的技术有哪些？" class="headerlink" title="实现会话跟踪的技术有哪些？"></a>实现会话跟踪的技术有哪些？</h3><p>答：由于HTTP协议本身是无状态的，服务器为了区分不同的用户，就需要对用户会话进行跟踪，简单的说就是为用户进行登记，为用户分配唯一的ID，下一次用户在请求中包含此ID，服务器据此判断到底是哪一个用户。<br>①URL 重写：在URL中添加用户会话的信息作为请求的参数，或者将唯一的会话ID添加到URL结尾以标识一个会话。<br>②设置表单隐藏域：将和会话跟踪相关的字段添加到隐式表单域中，这些信息不会在浏览器中显示但是提交表单时会提交给服务器。<br>这两种方式很难处理跨越多个页面的信息传递，因为如果每次都要修改URL或在页面中添加隐式表单域来存储用户会话相关信息，事情将变得非常麻烦。<br>③cookie：cookie有两种，一种是基于窗口的，浏览器窗口关闭后，cookie就没有了；另一种是将信息存储在一个临时文件中，并设置存在的时间。当用户通过浏览器和服务器建立一次会话后，会话ID就会随响应信息返回存储在基于窗口的cookie中，那就意味着只要浏览器没有关闭，会话没有超时，下一次请求时这个会话ID又会提交给服务器让服务器识别用户身份。会话中可以为用户保存信息。会话对象是在服务器内存中的，而基于窗口的cookie是在客户端内存中的。如果浏览器禁用了cookie，那么就需要通过下面两种方式进行会话跟踪。当然，在使用cookie时要注意几点：首先不要在cookie中存放敏感信息；其次cookie存储的数据量有限（4k），不能将过多的内容存储cookie中；再者浏览器通常只允许一个站点最多存放20个cookie。当然，和用户会话相关的其他信息（除了会话ID）也可以存在cookie方便进行会话跟踪。<br>④HttpSession：在所有会话跟踪技术中，HttpSession对象是最强大也是功能最多的。当一个用户第一次访问某个网站时会自动创建HttpSession，每个用户可以访问他自己的HttpSession。可以通过HttpServletRequest对象的getSession方法获得HttpSession，通过HttpSession的setAttribute方法可以将一个值放在HttpSession中，通过调用HttpSession对象的getAttribute方法，同时传入属性名就可以获取保存在HttpSession中的对象。与上面三种方式不同的是，HttpSession放在服务器的内存中，因此不要将过大的对象放在里面，即使目前的Servlet容器可以在内存将满时将HttpSession中的对象移到其他存储设备中，但是这样势必影响性能。添加到HttpSession中的值可以是任意Java对象，这个对象最好实现了Serializable接口，这样Servlet容器在必要的时候可以将其序列化到文件中，否则在序列化时就会出现异常。</p><p>补充：HTML5中可以使用Web Storage技术通过JavaScript来保存数据，例如可以使用localStorage和sessionStorage来保存用户会话的信息，也能够实现会话跟踪。</p><h3 id="过滤器有哪些作用和用法？"><a href="#过滤器有哪些作用和用法？" class="headerlink" title="过滤器有哪些作用和用法？"></a>过滤器有哪些作用和用法？</h3><p> 答： Java Web开发中的过滤器（filter）是从Servlet 2.3规范开始增加的功能，并在Servlet 2.4规范中得到增强。对Web应用来说，过滤器是一个驻留在服务器端的Web组件，它可以截取客户端和服务器之间的请求与响应信息，并对这些信息进行过滤。当Web容器接受到一个对资源的请求时，它将判断是否有过滤器与这个资源相关联。如果有，那么容器将把请求交给过滤器进行处理。在过滤器中，你可以改变请求的内容，或者重新设置请求的报头信息，然后再将请求发送给目标资源。当目标资源对请求作出响应时候，容器同样会将响应先转发给过滤器，在过滤器中你可以对响应的内容进行转换，然后再将响应发送到客户端。</p><p>常见的过滤器用途主要包括：对用户请求进行统一认证、对用户的访问请求进行记录和审核、对用户发送的数据进行过滤或替换、转换图象格式、对响应内容进行压缩以减少传输量、对请求或响应进行加解密处理、触发资源访问事件、对XML的输出应用XSLT等。</p><p>和过滤器相关的接口主要有：Filter、FilterConfig和FilterChain。</p><p>编码过滤器的例子：</p><p>import java.io.IOException;</p><p>import javax.servlet.Filter;</p><p>import javax.servlet.FilterChain;</p><p>import javax.servlet.FilterConfig;</p><p>import javax.servlet.ServletException;</p><p>import javax.servlet.ServletRequest;</p><p>import javax.servlet.ServletResponse;</p><p>import javax.servlet.annotation.WebFilter;</p><p>import javax.servlet.annotation.WebInitParam;</p><p>@WebFilter(urlPatterns = { “*” }, </p><p>​        initParams = {@WebInitParam(name=”encoding”, value=”utf-8”)})</p><p>public class CodingFilter implements Filter {</p><p>​    private String defaultEncoding = “utf-8”;</p><p>​    @Override</p><p>​    public void destroy() {</p><p>​    }</p><p>​    @Override</p><p>​    public void doFilter(ServletRequest req, ServletResponse resp,</p><p>​            FilterChain chain) throws IOException, ServletException {</p><p>​        req.setCharacterEncoding(defaultEncoding);</p><p>​        resp.setCharacterEncoding(defaultEncoding);</p><p>​        chain.doFilter(req, resp);</p><p>​    }</p><p>​    @Override</p><p>​    public void init(FilterConfig config) throws ServletException {</p><p>​        String encoding = config.getInitParameter(“encoding”);</p><p>​        if (encoding != null) {</p><p>​            defaultEncoding = encoding;</p><p>​        }</p><p>​    }</p><p>}</p><p>下载计数过滤器的例子：</p><p>import java.io.File;</p><p>import java.io.FileReader;</p><p>import java.io.FileWriter;</p><p>import java.io.IOException;</p><p>import java.util.Properties;</p><p>import java.util.concurrent.ExecutorService;</p><p>import java.util.concurrent.Executors;</p><p>import javax.servlet.Filter;</p><p>import javax.servlet.FilterChain;</p><p>import javax.servlet.FilterConfig;</p><p>import javax.servlet.ServletException;</p><p>import javax.servlet.ServletRequest;</p><p>import javax.servlet.ServletResponse;</p><p>import javax.servlet.annotation.WebFilter;</p><p>import javax.servlet.http.HttpServletRequest;</p><p>@WebFilter(urlPatterns = {“/*”})</p><p>public class DownloadCounterFilter implements Filter {</p><p>​    private ExecutorService executorService = Executors.newSingleThreadExecutor();</p><p>​    private Properties downloadLog;</p><p>​    private File logFile;</p><p>​    @Override</p><p>​    public void destroy() {</p><p>​        executorService.shutdown();</p><p>​    }</p><p>​    @Override</p><p>​    public void doFilter(ServletRequest req, ServletResponse resp,</p><p>​            FilterChain chain) throws IOException, ServletException {</p><p>​        HttpServletRequest request = (HttpServletRequest) req;</p><p>​        final String uri = request.getRequestURI();</p><p>​        executorService.execute(new Runnable() {</p><p>​            @Override</p><p>​            public void run() {</p><p>​                String value = downloadLog.getProperty(uri);</p><p>​                if(value == null) {</p><p>​                    downloadLog.setProperty(uri, “1”);</p><p>​                }</p><p>​                else {</p><p>​                    int count = Integer.parseInt(value);</p><p>​                    downloadLog.setProperty(uri, String.valueOf(++count));</p><p>​                }</p><p>​                try {</p><p>​                    downloadLog.store(new FileWriter(logFile), “”);</p><p>​                } </p><p>​                catch (IOException e) {</p><p>​                    e.printStackTrace();</p><p>​                }</p><p>​            }</p><p>​        });</p><p>​        chain.doFilter(req, resp);</p><p>​    }</p><p>​    @Override</p><p>​    public void init(FilterConfig config) throws ServletException {</p><p>​        String appPath = config.getServletContext().getRealPath(“/“);</p><p>​        logFile = new File(appPath, “downloadLog.txt”);</p><p>​        if(!logFile.exists()) {</p><p>​            try {</p><p>​                logFile.createNewFile();</p><p>​            } </p><p>​            catch(IOException e) {</p><p>​                e.printStackTrace();</p><p>​            }</p><p>​        }</p><p>​        downloadLog = new Properties();</p><p>​        try {</p><p>​            downloadLog.load(new FileReader(logFile));</p><p>​        } catch (IOException e) {</p><p>​            e.printStackTrace();</p><p>​        }</p><p>​    }</p><p>}</p><p>说明：这里使用了Servlet 3规范中的注解来部署过滤器，当然也可以在web.xml中使用<filter>和<filter-mapping>标签部署过滤器，如108题中所示。</filter-mapping></filter></p><h3 id="监听器有哪些作用和用法？"><a href="#监听器有哪些作用和用法？" class="headerlink" title="监听器有哪些作用和用法？"></a>监听器有哪些作用和用法？</h3><p>答：Java Web开发中的监听器（listener）就是application、session、request三个对象创建、销毁或者往其中添加修改删除属性时自动执行代码的功能组件，如下所示：<br>①ServletContextListener：对Servlet上下文的创建和销毁进行监听。<br>②ServletContextAttributeListener：监听Servlet上下文属性的添加、删除和替换。<br>③HttpSessionListener：对Session的创建和销毁进行监听。</p><p>补充：session的销毁有两种情况：1). session超时（可以在web.xml中通过<session-config>/<session-timeout>标签配置超时时间）；2). 通过调用session对象的invalidate()方法使session失效。</session-timeout></session-config></p><p>④HttpSessionAttributeListener：对Session对象中属性的添加、删除和替换进行监听。<br>⑤ServletRequestListener：对请求对象的初始化和销毁进行监听。<br>⑥ServletRequestAttributeListener：对请求对象属性的添加、删除和替换进行监听。</p><p>下面是一个统计网站最多在线人数监听器的例子。</p><p>import javax.servlet.ServletContextEvent;</p><p>import javax.servlet.ServletContextListener;</p><p>import javax.servlet.annotation.WebListener;</p><p>/**</p><p> 上下文监听器，在服务器启动时初始化onLineCount和maxOnLineCount两个变量</p><p> 并将其置于服务器上下文（ServletContext）中，其初始值都是0</p><p>*/</p><p>@WebListener</p><p>public class InitListener implements ServletContextListener {</p><p>​    @Override</p><p>​    public void contextDestroyed(ServletContextEvent evt) {</p><p>​    }</p><p>​    @Override</p><p>​    public void contextInitialized(ServletContextEvent evt) {</p><p>​        evt.getServletContext().setAttribute(“onLineCount”, 0);</p><p>​        evt.getServletContext().setAttribute(“maxOnLineCount”, 0);</p><p>​    }</p><p>}</p><p>import java.text.DateFormat;</p><p>import java.text.SimpleDateFormat;</p><p>import java.util.Date;</p><p>import javax.servlet.ServletContext;</p><p>import javax.servlet.annotation.WebListener;</p><p>import javax.servlet.http.HttpSessionEvent;</p><p>import javax.servlet.http.HttpSessionListener;</p><p>/**</p><p> 会话监听器，在用户会话创建和销毁的时候根据情况</p><p> 修改onLineCount和maxOnLineCount的值</p><p>*/</p><p>@WebListener</p><p>public class MaxCountListener implements HttpSessionListener {</p><p>​    @Override</p><p>​    public void sessionCreated(HttpSessionEvent event) {</p><p>​        ServletContext ctx = event.getSession().getServletContext();</p><p>​        int count = Integer.parseInt(ctx.getAttribute(“onLineCount”).toString());</p><p>​        count++;</p><p>​        ctx.setAttribute(“onLineCount”, count);</p><p>​        int maxOnLineCount = Integer.parseInt(ctx.getAttribute(“maxOnLineCount”).toString());</p><p>​        if (count &gt; maxOnLineCount) {</p><p>​            ctx.setAttribute(“maxOnLineCount”, count);</p><p>​            DateFormat df = new SimpleDateFormat(“yyyy-MM-dd HH:mm:ss”);</p><p>​            ctx.setAttribute(“date”, df.format(new Date()));</p><p>​        }</p><p>​    }</p><p>​    @Override</p><p>​    public void sessionDestroyed(HttpSessionEvent event) {</p><p>​        ServletContext app = event.getSession().getServletContext();</p><p>​        int count = Integer.parseInt(app.getAttribute(“onLineCount”).toString());</p><p>​        count–;</p><p>​        app.setAttribute(“onLineCount”, count);</p><p>​    }</p><p>}</p><p>说明：这里使用了Servlet 3规范中的@WebListener注解配置监听器，当然你可以在web.xml文件中用<listener>标签配置监听器，如108题中所示。</listener></p><h3 id="web-xml文件中可以配置哪些内容？"><a href="#web-xml文件中可以配置哪些内容？" class="headerlink" title="web.xml文件中可以配置哪些内容？"></a>web.xml文件中可以配置哪些内容？</h3><p>答：web.xml用于配置Web应用的相关信息，如：监听器（listener）、过滤器（filter）、 Servlet、相关参数、会话超时时间、安全验证方式、错误页面等，下面是一些开发中常见的配置：</p><p>①配置Spring上下文加载监听器加载Spring配置文件并创建IoC容器：</p><p>  <context-param></context-param></p><p>​     <param-name>contextConfigLocation</param-name></p><p>​    <param-value>classpath:applicationContext.xml</param-value></p><p>  </p>  <listener><br><br>​     <listener-class><br><br>​       org.springframework.web.context.ContextLoaderListener<br><br>​     </listener-class><br><br>  </listener><p>②配置Spring的OpenSessionInView过滤器来解决延迟加载和Hibernate会话关闭的矛盾：</p>  <filter><br><br>​      <filter-name>openSessionInView</filter-name><br><br>​      <filter-class><br><br>​         org.springframework.orm.hibernate3.support.OpenSessionInViewFilter<br><br>​      </filter-class><br><br>  </filter><p>  <filter-mapping></filter-mapping></p><p>​      <filter-name>openSessionInView</filter-name></p><p>​      <url-pattern>/*</url-pattern></p><p>  </p><p>③配置会话超时时间为10分钟：</p><p>  <session-config></session-config></p><p>​      <session-timeout>10</session-timeout></p><p>  </p><p>④配置404和Exception的错误页面：</p><p>  <error-page></error-page></p><p>​      <error-code>404</error-code></p><p>​      <location>/error.jsp</location></p><p>  </p><p>  <error-page></error-page></p><p>​      <exception-type>java.lang.Exception</exception-type></p><p>​      <location>/error.jsp</location></p><p>  </p><p>⑤配置安全认证方式：</p><p>  <security-constraint></security-constraint></p><p>​      <web-resource-collection></web-resource-collection></p><p>​          <web-resource-name>ProtectedArea</web-resource-name></p><p>​          <url-pattern>/admin/*</url-pattern></p><p>​          <http-method>GET</http-method></p><p>​          <http-method>POST</http-method></p><p>​      </p><p>​      <auth-constraint></auth-constraint></p><p>​          <role-name>admin</role-name></p><p>​      </p><p>  </p><p>  <login-config></login-config></p><p>​      <auth-method>BASIC</auth-method></p><p>  </p><p>  <security-role></security-role></p><p>​      <role-name>admin</role-name></p><p>  </p><p>说明：对Servlet（小服务）、Listener（监听器）和Filter（过滤器）等Web组件的配置，Servlet 3规范提供了基于注解的配置方式，可以分别使用@WebServlet、@WebListener、@WebFilter注解进行配置。 </p><p>补充：如果Web提供了有价值的商业信息或者是敏感数据，那么站点的安全性就是必须考虑的问题。安全认证是实现安全性的重要手段，认证就是要解决“Are you who you say you are?”的问题。认证的方式非常多，简单说来可以分为三类：<br>A. What you know? — 口令<br>B. What you have? — 数字证书（U盾、密保卡）<br>C. Who you are? — 指纹识别、虹膜识别<br>在Tomcat中可以通过建立安全套接字层（Secure Socket Layer, SSL）以及通过基本验证或表单验证来实现对安全性的支持。</p><h3 id="你的项目中使用过哪些JSTL标签？"><a href="#你的项目中使用过哪些JSTL标签？" class="headerlink" title="你的项目中使用过哪些JSTL标签？"></a>你的项目中使用过哪些JSTL标签？</h3><p>答：项目中主要使用了JSTL的核心标签库，包括c:if、c:choose、&lt;c: when&gt;、&lt;c: otherwise&gt;、c:forEach等，主要用于构造循环和分支结构以控制显示逻辑。</p><p>说明：虽然JSTL标签库提供了core、sql、fmt、xml等标签库，但是实际开发中建议只使用核心标签库（core），而且最好只使用分支和循环标签并辅以表达式语言（EL），这样才能真正做到数据显示和业务逻辑的分离，这才是最佳实践。</p><h3 id="使用标签库有什么好处？如何自定义JSP标签？"><a href="#使用标签库有什么好处？如何自定义JSP标签？" class="headerlink" title="使用标签库有什么好处？如何自定义JSP标签？"></a>使用标签库有什么好处？如何自定义JSP标签？</h3><p>答：使用标签库的好处包括以下几个方面： </p><ul><li>分离JSP页面的内容和逻辑，简化了Web开发； </li><li>开发者可以创建自定义标签来封装业务逻辑和显示逻辑； </li><li>标签具有很好的可移植性、可维护性和可重用性； </li><li>避免了对Scriptlet（小脚本）的使用（很多公司的项目开发都不允许在JSP中书写小脚本）</li></ul><p>自定义JSP标签包括以下几个步骤： </p><ul><li>编写一个Java类实现实现Tag/BodyTag/IterationTag接口（开发中通常不直接实现这些接口而是继承TagSupport/BodyTagSupport/SimpleTagSupport类，这是对缺省适配模式的应用），重写doStartTag()、doEndTag()等方法，定义标签要完成的功能 </li><li>编写扩展名为tld的标签描述文件对自定义标签进行部署，tld文件通常放在WEB-INF文件夹下或其子目录中 </li><li>在JSP页面中使用taglib指令引用该标签库</li></ul><p>下面是一个自定义标签库的例子。</p><p>步骤1 - 标签类源代码TimeTag.java：</p><p>package com.jackfrued.tags;</p><p>import java.io.IOException;</p><p>import java.text.SimpleDateFormat;</p><p>import java.util.Date;</p><p>import javax.servlet.jsp.JspException;</p><p>import javax.servlet.jsp.JspWriter;</p><p>import javax.servlet.jsp.tagext.TagSupport;</p><p>public class TimeTag extends TagSupport {</p><p>​    private static final long serialVersionUID = 1L;</p><p>​    private String format = “yyyy-MM-dd hh:mm:ss”;</p><p>​    private String foreColor = “black”;</p><p>​    private String backColor = “white”;</p><p>​    public int doStartTag() throws JspException {</p><p>​         SimpleDateFormat sdf = new SimpleDateFormat(format);</p><p>​         JspWriter writer = pageContext.getOut();</p><p>​         StringBuilder sb = new StringBuilder();</p><p>​         sb.append(String.format(“%s”,</p><p>​             foreColor, backColor, sdf.format(new Date())));</p><p>​         try {</p><p>​           writer.print(sb.toString());</p><p>​         } catch(IOException e) {</p><p>​           e.printStackTrace();</p><p>​         }</p><p>​         return SKIP_BODY;</p><p>​      }</p><p>​    public void setFormat(String format) {</p><p>​        this.format = format;</p><p>​    }</p><p>​    public void setForeColor(String foreColor) {</p><p>​        this.foreColor = foreColor;</p><p>​    }</p><p>​    public void setBackColor(String backColor) {</p><p>​        this.backColor = backColor;</p><p>​    }</p><p>}</p><p>步骤2 - 编写标签库描述文件my.tld：</p><p>&lt;?xml version=”1.0” encoding=”UTF-8” ?&gt;</p><taglib xmlns="http://java.sun.com/xml/ns/j2ee" ​="" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemalocation="http://java.sun.com/xml/ns/j2ee ​    http://java.sun.com/xml/ns/j2ee/web-jsptaglibrary_2_0.xsd" version="2.0"><br><br><br><br>​    <description>定义标签库</description><br><br>​    <tlib-version>1.0</tlib-version><br><br>​    <short-name>MyTag</short-name><br><br>​    <tag><br><br>​        <name>time</name><br><br>​        <tag-class>com.jackfrued.tags.TimeTag</tag-class><br><br>​        <body-content>empty</body-content><br><br>​        <attribute><br><br>​            <name>format</name><br><br>​            <required>false</required><br><br>​        </attribute><br><br>​        <attribute><br><br>​            <name>foreColor</name><br><br>​        </attribute><br><br>​        <attribute><br><br>​            <name>backColor</name><br><br>​        </attribute><br><br>​    </tag><br><br></taglib><p>步骤3 - 在JSP页面中使用自定义标签：</p><p>&lt;%@ page pageEncoding=”UTF-8”%&gt;</p><p>&lt;%@ taglib prefix=”my” uri=”/WEB-INF/tld/my.tld” %&gt;</p><p>&lt;%</p><p>String path = request.getContextPath();</p><p>String basePath = request.getScheme() + “://“ + request.getServerName() + “:” + request.getServerPort() + path + “/“;</p><p>%&gt;</p><p>&lt;!DOCTYPE html&gt;</p><html><br><br>  <head><meta name="generator" content="Hexo 3.8.0"><br><br>​    <base href="<%=basePath%>"><br><br>​    <title>首页</title><br><br>    <style type="text/css"><br><br>​        * { font-family: “Arial”; font-size:72px; }<br><br>​    </style><br><br>  </head><br><br><br><br>  <body><br><br>​    &lt;my:time format=”yyyy-MM-dd” backColor=”blue” foreColor=”yellow”/&gt;<br><br>  </body><br><br></html><p>提示：如果要将自定义的标签库发布成JAR文件，需要将标签库描述文件（tld文件）放在JAR文件的META-INF目录下，可以JDK中的jar工具完成JAR文件的生成，如果不清楚如何操作，可以请教谷老师和百老师。</p><h3 id="说一下表达式语言（EL）的隐式对象及其作用。"><a href="#说一下表达式语言（EL）的隐式对象及其作用。" class="headerlink" title="说一下表达式语言（EL）的隐式对象及其作用。"></a>说一下表达式语言（EL）的隐式对象及其作用。</h3><p> 答：EL的隐式对象包括：pageContext、initParam（访问上下文参数）、param（访问请求参数）、paramValues、header（访问请求头）、headerValues、cookie（访问cookie）、applicationScope（访问application作用域）、sessionScope（访问session作用域）、requestScope（访问request作用域）、pageScope（访问page作用域）。</p><p>用法如下所示：</p><p>${pageContext.request.method}</p><p>${pageContext”request”}</p><p>${pageContext.request[“method”]}</p><p>${pageContext[“request”].method}</p><p>${initParam.defaultEncoding}</p><p>${header[“accept-language”]}</p><p>${headerValues”accept-language”}</p><p>${cookie.jsessionid.value}</p><p>${sessionScope.loginUser.username}</p><p>补充：表达式语言的.和[]运算作用是一致的，唯一的差别在于如果访问的属性名不符合Java标识符命名规则，例如上面的accept-language就不是一个有效的Java标识符，那么这时候就只能用[]运算符而不能使用.运算符获取它的值</p><h3 id="表达式语言（EL）支持哪些运算符？"><a href="#表达式语言（EL）支持哪些运算符？" class="headerlink" title="表达式语言（EL）支持哪些运算符？"></a>表达式语言（EL）支持哪些运算符？</h3><p>答：除了.和[]运算符，EL还提供了： </p><ul><li>算术运算符：+、-、*、/或div、%或mod </li><li>关系运算符：==或eq、!=或ne、&gt;或gt、&gt;=或ge、&lt;或lt、&lt;=或le </li><li>逻辑运算符：&amp;&amp;或and、||或or、!或not </li><li>条件运算符：${statement? A : B}（跟Java的条件运算符类似） </li><li>empty运算符：检查一个值是否为null或者空（数组长度为0或集合中没有元素也返回true）</li></ul><h3 id="Java-Web开发的Model-1和Model-2分别指的是什么？"><a href="#Java-Web开发的Model-1和Model-2分别指的是什么？" class="headerlink" title="Java Web开发的Model 1和Model 2分别指的是什么？"></a>Java Web开发的Model 1和Model 2分别指的是什么？</h3><p>答：Model 1是以页面为中心的Java Web开发，使用JSP+JavaBean技术将页面显示逻辑和业务逻辑处理分开，JSP实现页面显示，JavaBean对象用来保存数据和实现业务逻辑。Model 2是基于MVC（模型-视图-控制器，Model-View-Controller）架构模式的开发模型，实现了模型和视图的彻底分离，利于团队开发和代码复用，如下图所示。</p><h3 id="Servlet-3中的异步处理指的是什么？"><a href="#Servlet-3中的异步处理指的是什么？" class="headerlink" title="Servlet 3中的异步处理指的是什么？"></a>Servlet 3中的异步处理指的是什么？</h3><p>答：在Servlet 3中引入了一项新的技术可以让Servlet异步处理请求。有人可能会质疑，既然都有多线程了，还需要异步处理请求吗？答案是肯定的，因为如果一个任务处理时间相当长，那么Servlet或Filter会一直占用着请求处理线程直到任务结束，随着并发用户的增加，容器将会遭遇线程超出的风险，这这种情况下很多的请求将会被堆积起来而后续的请求可能会遭遇拒绝服务，直到有资源可以处理请求为止。异步特性可以帮助应用节省容器中的线程，特别适合执行时间长而且用户需要得到结果的任务，如果用户不需要得到结果则直接将一个Runnable对象交给Executor并立即返回即可。（如果不清楚多线程和线程池的相关内容，请查看《Java面试题全集（上）》关于多线程和线程池的部分或阅读我的另一篇文章《关于Java并发编程的总结和思考》）</p><p>补充：多线程在Java诞生初期无疑是一个亮点，而Servlet单实例多线程的工作方式也曾为其赢得美名，然而技术的发展往往会颠覆我们很多的认知，就如同当年爱因斯坦的相对论颠覆了牛顿的经典力学一般。事实上，异步处理绝不是Serlvet 3首创，如果你了解Node.js的话，对Servlet 3的这个重要改进就不以为奇了。</p><p>下面是一个支持异步处理请求的Servlet的例子。</p><p>import java.io.IOException;</p><p>import javax.servlet.AsyncContext;</p><p>import javax.servlet.ServletException;</p><p>import javax.servlet.annotation.WebServlet;</p><p>import javax.servlet.http.HttpServlet;</p><p>import javax.servlet.http.HttpServletRequest;</p><p>import javax.servlet.http.HttpServletResponse;</p><p>@WebServlet(urlPatterns = {“/async”}, asyncSupported = true)</p><p>public class AsyncServlet extends HttpServlet {</p><p>​    private static final long serialVersionUID = 1L;</p><p>​    @Override</p><p>​    public void doGet(HttpServletRequest req, HttpServletResponse resp) </p><p>​            throws ServletException, IOException {</p><p>​        // 开启Tomcat异步Servlet支持</p><p>​        req.setAttribute(“org.apache.catalina.ASYNC_SUPPORTED”, true);</p><p>​        final AsyncContext ctx = req.startAsync();  // 启动异步处理的上下文</p><p>​        // ctx.setTimeout(30000);</p><p>​        ctx.start(new Runnable() {</p><p>​            @Override</p><p>​            public void run() {</p><p>​                // 在此处添加异步处理的代码</p><p>​                ctx.complete();</p><p>​            }</p><p>​        });</p><p>​    }</p><p>}</p><h3 id="讲解JSP中的四种作用域。"><a href="#讲解JSP中的四种作用域。" class="headerlink" title="讲解JSP中的四种作用域。"></a>讲解JSP中的四种作用域。</h3><p>答：JSP中的四种作用域包括page、request、session和application，具体来说： </p><ul><li>page代表与一个页面相关的对象和属性。 </li><li>request代表与Web客户机发出的一个请求相关的对象和属性。一个请求可能跨越多个页面，涉及多个Web组件；需要在页面显示的临时数据可以置于此作用域。 </li><li>session代表与某个用户与服务器建立的一次会话相关的对象和属性。跟某个用户相关的数据应该放在用户自己的session中。 </li><li>application代表与整个Web应用程序相关的对象和属性，它实质上是跨越整个Web应用程序，包括多个页面、请求和会话的一个全局作用域。</li></ul><h3 id="如何在基于Java的Web项目中实现文件上传和下载？"><a href="#如何在基于Java的Web项目中实现文件上传和下载？" class="headerlink" title="如何在基于Java的Web项目中实现文件上传和下载？"></a>如何在基于Java的Web项目中实现文件上传和下载？</h3><p>答：在Sevlet 3 以前，Servlet API中没有支持上传功能的API，因此要实现上传功能需要引入第三方工具从POST请求中获得上传的附件或者通过自行处理输入流来获得上传的文件，我们推荐使用Apache的commons-fileupload。<br>从Servlet 3开始，文件上传变得无比简单，相信看看下面的例子一切都清楚了。</p><p>上传页面index.jsp：</p><p>&lt;%@ page pageEncoding=”utf-8”%&gt;</p><p>&lt;!DOCTYPE html&gt;</p><html><br><br><head><meta name="generator" content="Hexo 3.8.0"><br><br><meta http-equiv="Content-Type" content="text/html; charset=UTF-8"><br><br><title>Photo Upload</title><br><br></head><br><br><body><br><br><h1>Select your photo and upload</h1><br><br><hr><br><br><div style="color:red;font-size:14px;">${hint}</div><br><br><form action="UploadServlet" method="post" enctype="multipart/form-data"><br><br>​    Photo file: <input type="file" name="photo"><br><br>​    <input type="submit" value="Upload"><br><br></form><br><br></body><br><br></html><p>支持上传的Servlet：</p><p>package com.jackfrued.servlet;</p><p>import java.io.IOException;</p><p>import javax.servlet.ServletException;</p><p>import javax.servlet.annotation.MultipartConfig;</p><p>import javax.servlet.annotation.WebServlet;</p><p>import javax.servlet.http.HttpServlet;</p><p>import javax.servlet.http.HttpServletRequest;</p><p>import javax.servlet.http.HttpServletResponse;</p><p>import javax.servlet.http.Part;</p><p>@WebServlet(“/UploadServlet”)</p><p>@MultipartConfig</p><p>public class UploadServlet extends HttpServlet {</p><p>​    private static final long serialVersionUID = 1L;</p><p>​    protected void doPost(HttpServletRequest request,</p><p>​            HttpServletResponse response) throws ServletException, IOException {</p><p>​        // 可以用request.getPart()方法获得名为photo的上传附件</p><p>​        // 也可以用request.getParts()获得所有上传附件（多文件上传）</p><p>​        // 然后通过循环分别处理每一个上传的文件</p><p>​        Part part = request.getPart(“photo”);</p><p>​        if (part != null &amp;&amp; part.getSubmittedFileName().length() &gt; 0) {</p><p>​            // 用ServletContext对象的getRealPath()方法获得上传文件夹的绝对路径</p><p>​            String savePath = request.getServletContext().getRealPath(“/upload”);</p><p>​            // Servlet 3.1规范中可以用Part对象的getSubmittedFileName()方法获得上传的文件名</p><p>​            // 更好的做法是为上传的文件进行重命名（避免同名文件的相互覆盖）</p><p>​            part.write(savePath + “/“ + part.getSubmittedFileName());</p><p>​            request.setAttribute(“hint”, “Upload Successfully!”);</p><p>​        } else {</p><p>​            request.setAttribute(“hint”, “Upload failed!”);</p><p>​        }</p><p>​        // 跳转回到上传页面</p><p>​        request.getRequestDispatcher(“index.jsp”).forward(request, response);</p><p>​    }</p><p>}</p><h3 id="服务器收到用户提交的表单数据，到底是调用Servlet的doGet-还是doPost-方法？"><a href="#服务器收到用户提交的表单数据，到底是调用Servlet的doGet-还是doPost-方法？" class="headerlink" title="服务器收到用户提交的表单数据，到底是调用Servlet的doGet()还是doPost()方法？"></a>服务器收到用户提交的表单数据，到底是调用Servlet的doGet()还是doPost()方法？</h3><p> 答：HTML的<form>元素有一个method属性，用来指定提交表单的方式，其值可以是get或post。我们自定义的Servlet一般情况下会重写doGet()或doPost()两个方法之一或全部，如果是GET请求就调用doGet()方法，如果是POST请求就调用doPost()方法，那为什么为什么这样呢？我们自定义的Servlet通常继承自HttpServlet，HttpServlet继承自GenericServlet并重写了其中的service()方法，这个方法是Servlet接口中定义的。HttpServlet重写的service()方法会先获取用户请求的方法，然后根据请求方法调用doGet()、doPost()、doPut()、doDelete()等方法，如果在自定义Servlet中重写了这些方法，那么显然会调用重写过的（自定义的）方法，这显然是对模板方法模式的应用（如果不理解，请参考阎宏博士的《Java与模式》一书的第37章）。当然，自定义Servlet中也可以直接重写service()方法，那么不管是哪种方式的请求，都可以通过自己的代码进行处理，这对于不区分请求方法的场景比较合适。</form></p><p>117、JSP中的静态包含和动态包含有什么区别？<br>答：静态包含是通过JSP的include指令包含页面，动态包含是通过JSP标准动作jsp:forward包含页面。静态包含是编译时包含，如果包含的页面不存在则会产生编译错误，而且两个页面的”contentType”属性应保持一致，因为两个页面会合二为一，只产生一个class文件，因此被包含页面发生的变动再包含它的页面更新前不会得到更新。动态包含是运行时包含，可以向被包含的页面传递参数，包含页面和被包含页面是独立的，会编译出两个class文件，如果被包含的页面不存在，不会产生编译错误，也不影响页面其他部分的执行。代码如下所示：</p><p>&lt;%– 静态包含 –%&gt;</p><p>&lt;%@ include file=”…” %&gt;</p><p>&lt;%– 动态包含 –%&gt;</p><p>&lt;jsp:include page=”…”&gt;</p><p>​    &lt;jsp:param name=”…” value=”…” /&gt;</p><p>/jsp:include</p><h3 id="Servlet中如何获取用户提交的查询参数或表单数据？"><a href="#Servlet中如何获取用户提交的查询参数或表单数据？" class="headerlink" title="Servlet中如何获取用户提交的查询参数或表单数据？"></a>Servlet中如何获取用户提交的查询参数或表单数据？</h3><p>答：可以通过请求对象（HttpServletRequest）的getParameter()方法通过参数名获得参数值。如果有包含多个值的参数（例如复选框），可以通过请求对象的getParameterValues()方法获得。当然也可以通过请求对象的getParameterMap()获得一个参数名和参数值的映射（Map）。</p><p>119、Servlet中如何获取用户配置的初始化参数以及服务器上下文参数？<br>答：可以通过重写Servlet接口的init(ServletConfig)方法并通过ServletConfig对象的getInitParameter()方法来获取Servlet的初始化参数。可以通过ServletConfig对象的getServletContext()方法获取ServletContext对象，并通过该对象的getInitParameter()方法来获取服务器上下文参数。当然，ServletContext对象也在处理用户请求的方法（如doGet()方法）中通过请求对象的getServletContext()方法来获得。</p><h3 id="如何设置请求的编码以及响应内容的类型？"><a href="#如何设置请求的编码以及响应内容的类型？" class="headerlink" title="如何设置请求的编码以及响应内容的类型？"></a>如何设置请求的编码以及响应内容的类型？</h3><p>答：通过请求对象（ServletRequest）的setCharacterEncoding(String)方法可以设置请求的编码，其实要彻底解决乱码问题就应该让页面、服务器、请求和响应、Java程序都使用统一的编码，最好的选择当然是UTF-8；通过响应对象（ServletResponse）的setContentType(String)方法可以设置响应内容的类型，当然也可以通过HttpServletResponsed对象的setHeader(String, String)方法来设置。</p><p>说明：现在如果还有公司在面试的时候问JSP的声明标记、表达式标记、小脚本标记这些内容的话，这样的公司也不用去了，其实JSP内置对象、JSP指令这些东西基本上都可以忘却了，关于Java Web开发的相关知识，可以看一下我的《Servlet&amp;JSP思维导图》，上面有完整的知识点的罗列。想了解如何实现自定义MVC框架的，可以看一下我的《Java Web自定义MVC框架详解》。</p><h3 id="阐述Servlet和CGI的区别"><a href="#阐述Servlet和CGI的区别" class="headerlink" title="阐述Servlet和CGI的区别?"></a>阐述Servlet和CGI的区别?</h3><p>答：Servlet与CGI的区别在于Servlet处于服务器进程中，它通过多线程方式运行其service()方法，一个实例可以服务于多个请求，并且其实例一般不会销毁，而CGI对每个请求都产生新的进程，服务完成后就销毁，所以效率上低于Servlet。</p><p>补充：Sun Microsystems公司在1996年发布Servlet技术就是为了和CGI进行竞争，Servlet是一个特殊的Java程序，一个基于Java的Web应用通常包含一个或多个Servlet类。Servlet不能够自行创建并执行，它是在Servlet容器中运行的，容器将用户的请求传递给Servlet程序，并将Servlet的响应回传给用户。通常一个Servlet会关联一个或多个JSP页面。以前CGI经常因为性能开销上的问题被诟病，然而Fast CGI早就已经解决了CGI效率上的问题，所以面试的时候大可不必信口开河的诟病CGI，事实上有很多你熟悉的网站都使用了CGI技术。</p><h3 id="什么是Servlet？"><a href="#什么是Servlet？" class="headerlink" title="什么是Servlet？"></a>什么是Servlet？</h3><p>Servlet是用来处理客户端请求并产生动态网页内容的Java类。Servlet主要是用来处理或者是存储HTML表单提交的数据，产生动态内容，在无状态的HTTP协议下管理状态信息。</p><h3 id="Servlet接口中有哪些方法？"><a href="#Servlet接口中有哪些方法？" class="headerlink" title="Servlet接口中有哪些方法？"></a>Servlet接口中有哪些方法？</h3><p>答：Servlet接口定义了5个方法，其中前三个方法与Servlet生命周期相关： </p><ul><li>void init(ServletConfig config) throws ServletException </li><li>void service(ServletRequest req, ServletResponse resp) throws ServletException, java.io.IOException </li><li>void destory() </li><li>java.lang.String getServletInfo() </li><li>ServletConfig getServletConfig()</li></ul><p>Web容器加载Servlet并将其实例化后，Servlet生命周期开始，容器运行其init()方法进行Servlet的初始化；请求到达时调用Servlet的service()方法，service()方法会根据需要调用与请求对应的doGet或doPost等方法；当服务器关闭或项目被卸载时服务器会将Servlet实例销毁，此时会调用Servlet的destroy()方法。</p><h3 id="说一下Servlet的体系结构。"><a href="#说一下Servlet的体系结构。" class="headerlink" title="说一下Servlet的体系结构。"></a>说一下Servlet的体系结构。</h3><p>所有的Servlet都必须要实现的核心的接口是javax.servlet.Servlet。每一个Servlet都必须要直接或者是间接实现这个接口，或者是继承javax.servlet.GenericServlet或者javax.servlet.http.HTTPServlet。最后，Servlet使用多线程可以并行的为多个请求服务。</p><h3 id="Applet和Servlet有什么区别？"><a href="#Applet和Servlet有什么区别？" class="headerlink" title="Applet和Servlet有什么区别？"></a>Applet和Servlet有什么区别？</h3><p>Applet是运行在客户端主机的浏览器上的客户端Java程序。而Servlet是运行在web服务器上的服务端的组件。applet可以使用用户界面类，而Servlet没有用户界面，相反，Servlet是等待客户端的HTTP请求，然后为请求产生响应。</p><h3 id="GenericServlet和HttpServlet有什么区别？"><a href="#GenericServlet和HttpServlet有什么区别？" class="headerlink" title="GenericServlet和HttpServlet有什么区别？"></a>GenericServlet和HttpServlet有什么区别？</h3><p>GenericServlet类实现了Servlet和ServletConfig接口。实现了除了service()之外的其他方法，在创建Servlet对象时，可以继承GenericServlet类来简化程序的代码，但需要实现service()方法。</p><p>HttpServlet类继承了GeneriServlet类，为实际开发中大多数用Servlet处理 HTTP请求的应用灵活的方法。</p><h3 id="解释下Servlet的生命周期。"><a href="#解释下Servlet的生命周期。" class="headerlink" title="解释下Servlet的生命周期。"></a>解释下Servlet的生命周期。</h3><p>对每一个客户端的请求，Servlet引擎载入Servlet，调用它的init()方法，完成Servlet的初始化。然后，Servlet对象通过为每一个请求单独调用service()方法来处理所有随后来自客户端的请求，最后，调用Servlet(译者注：这里应该是Servlet而不是server)的destroy()方法把Servlet删除掉。</p><h3 id="doGet-方法和doPost-方法有什么区别？"><a href="#doGet-方法和doPost-方法有什么区别？" class="headerlink" title="doGet()方法和doPost()方法有什么区别？"></a>doGet()方法和doPost()方法有什么区别？</h3><p>doGet：GET方法会把名值对追加在请求的URL后面。因为URL对字符数目有限制，进而限制了用在客户端请求的参数值的数目。并且请求中的参数值是可见的，因此，敏感信息不能用这种方式传递。</p><p>doPOST：POST方法通过把请求参数值放在请求体中来克服GET方法的限制，因此，可以发送的参数的数目是没有限制的。最后，通过POST请求传递的敏感信息对外部客户端是不可见的。</p><h3 id="什么是Web应用程序？"><a href="#什么是Web应用程序？" class="headerlink" title="什么是Web应用程序？"></a>什么是Web应用程序？</h3><p>Web应用程序是对Web或者是应用服务器的动态扩展。有两种类型的Web应用：面向表现的和面向服务的。面向表现的Web应用程序会产生包含了很多种标记语言和动态内容的交互的web页面作为对请求的响应。而面向服务的Web应用实现了Web服务的端点(endpoint)。一般来说，一个Web应用可以看成是一组安装在服务器URL名称空间的特定子集下面的Servlet的集合。</p><h3 id="什么是服务端包含-Server-Side-Include-？"><a href="#什么是服务端包含-Server-Side-Include-？" class="headerlink" title="什么是服务端包含(Server Side Include)？"></a>什么是服务端包含(Server Side Include)？</h3><p>服务端包含(SSI)是一种简单的解释型服务端脚本语言，大多数时候仅用在Web上，用servlet标签嵌入进来。SSI最常用的场景把一个或多个文件包含到Web服务器的一个Web页面中。当浏览器访问Web页面的时候，Web服务器会用对应的servlet产生的文本来替换Web页面中的servlet标签。</p><h3 id="什么是Servlet链-Servlet-Chaining-？"><a href="#什么是Servlet链-Servlet-Chaining-？" class="headerlink" title="什么是Servlet链(Servlet Chaining)？"></a>什么是Servlet链(Servlet Chaining)？</h3><p>Servlet链是把一个Servlet的输出发送给另一个Servlet的方法。第二个Servlet的输出可以发送给第三个Servlet，依次类推。链条上最后一个Servlet负责把响应发送给客户端。</p><h3 id="如何知道是哪一个客户端的机器正在请求你的Servlet？"><a href="#如何知道是哪一个客户端的机器正在请求你的Servlet？" class="headerlink" title="如何知道是哪一个客户端的机器正在请求你的Servlet？"></a>如何知道是哪一个客户端的机器正在请求你的Servlet？</h3><p>ServletRequest类可以找出客户端机器的IP地址或者是主机名。getRemoteAddr()方法获取客户端主机的IP地址，getRemoteHost()可以获取主机名。看下这里的例子。</p><h3 id="HTTP响应的结构是怎么样的？"><a href="#HTTP响应的结构是怎么样的？" class="headerlink" title="HTTP响应的结构是怎么样的？"></a>HTTP响应的结构是怎么样的？</h3><p>HTTP响应由三个部分组成：</p><p>状态码(Status Code)：描述了响应的状态。可以用来检查是否成功的完成了请求。请求失败的情况下，状态码可用来找出失败的原因。如果Servlet没有返回状态码，默认会返回成功的状态码HttpServletResponse.SC_OK。</p><p>HTTP头部(HTTP Header)：它们包含了更多关于响应的信息。比如：头部可以指定认为响应过期的过期日期，或者是指定用来给用户安全的传输实体内容的编码格式。如何在Serlet中检索HTTP的头部看这里。</p><p>主体(Body)：它包含了响应的内容。它可以包含HTML代码，图片，等等。主体是由传输在HTTP消息中紧跟在头部后面的数据字节组成的。</p><h3 id="什么是cookie？session和cookie有什么区别？"><a href="#什么是cookie？session和cookie有什么区别？" class="headerlink" title="什么是cookie？session和cookie有什么区别？"></a>什么是cookie？session和cookie有什么区别？</h3><p>cookie是Web服务器发送给浏览器的一块信息。浏览器会在本地文件中给每一个Web服务器存储cookie。以后浏览器在给特定的Web服务器发请求的时候，同时会发送所有为该服务器存储的cookie。下面列出了session和cookie的区别：</p><p>无论客户端浏览器做怎么样的设置，session都应该能正常工作。客户端可以选择禁用cookie，但是，session仍然是能够工作的，因为客户端无法禁用服务端的session。</p><p>在存储的数据量方面session和cookies也是不一样的。session能够存储任意的Java对象，cookie只能存储String类型的对象。</p><h3 id="浏览器和Servlet通信使用的是什么协议？"><a href="#浏览器和Servlet通信使用的是什么协议？" class="headerlink" title="浏览器和Servlet通信使用的是什么协议？"></a>浏览器和Servlet通信使用的是什么协议？</h3><p>浏览器和Servlet通信使用的是HTTP协议。</p><h3 id="什么是HTTP隧道？"><a href="#什么是HTTP隧道？" class="headerlink" title="什么是HTTP隧道？"></a>什么是HTTP隧道？</h3><p>HTTP隧道是一种利用HTTP或者是HTTPS把多种网络协议封装起来进行通信的技术。因此，HTTP协议扮演了一个打通用于通信的网络协议的管道的包装器的角色。把其他协议的请求掩盖成HTTP的请求就是HTTP隧道。</p><h3 id="sendRedirect-和forward-方法有什么区别？"><a href="#sendRedirect-和forward-方法有什么区别？" class="headerlink" title="sendRedirect()和forward()方法有什么区别？"></a>sendRedirect()和forward()方法有什么区别？</h3><p>sendRedirect()方法会创建一个新的请求，而forward()方法只是把请求转发到一个新的目标上。重定向(redirect)以后，之前请求作用域范围以内的对象就失效了，因为会产生一个新的请求，而转发(forwarding)以后，之前请求作用域范围以内的对象还是能访问的。一般认为sendRedirect()比forward()要慢。</p><h3 id="什么是URL编码和URL解码？"><a href="#什么是URL编码和URL解码？" class="headerlink" title="什么是URL编码和URL解码？"></a>什么是URL编码和URL解码？</h3><p>URL编码是负责把URL里面的空格和其他的特殊字符替换成对应的十六进制表示，反之就是解码。</p><h3 id="转发（forward）和重定向（redirect）的区别？"><a href="#转发（forward）和重定向（redirect）的区别？" class="headerlink" title="转发（forward）和重定向（redirect）的区别？"></a>转发（forward）和重定向（redirect）的区别？</h3><p>答：forward是容器中控制权的转向，是服务器请求资源，服务器直接访问目标地址的URL，把那个URL 的响应内容读取过来，然后把这些内容再发给浏览器，浏览器根本不知道服务器发送的内容是从哪儿来的，所以它的地址栏中还是原来的地址。redirect就是服务器端根据逻辑，发送一个状态码，告诉浏览器重新去请求那个地址，因此从浏览器的地址栏中可以看到跳转后的链接地址，很明显redirect无法访问到服务器保护起来资源，但是可以从一个网站redirect到其他网站。forward更加高效，所以在满足需要时尽量使用forward（通过调用RequestDispatcher对象的forward()方法，该对象可以通过ServletRequest对象的getRequestDispatcher()方法获得），并且这样也有助于隐藏实际的链接；在有些情况下，比如需要访问一个其它服务器上的资源，则必须使用重定向（通过HttpServletResponse对象调用其sendRedirect()方法实现）。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Java 面试题系列篇-序列化相关</title>
      <link href="/2018/10/20/Java-%E9%9D%A2%E8%AF%95%E9%A2%98%E7%B3%BB%E5%88%97%E7%AF%87-%E5%BA%8F%E5%88%97%E5%8C%96%E7%9B%B8%E5%85%B3/"/>
      <url>/2018/10/20/Java-%E9%9D%A2%E8%AF%95%E9%A2%98%E7%B3%BB%E5%88%97%E7%AF%87-%E5%BA%8F%E5%88%97%E5%8C%96%E7%9B%B8%E5%85%B3/</url>
      
        <content type="html"><![CDATA[<h2 id="序列化相关"><a href="#序列化相关" class="headerlink" title="序列化相关"></a>序列化相关</h2><h3 id="解释下Marshalling和demarshalling。"><a href="#解释下Marshalling和demarshalling。" class="headerlink" title="解释下Marshalling和demarshalling。"></a>解释下Marshalling和demarshalling。</h3><p>当应用程序希望把内存对象跨网络传递到另一台主机或者是持久化到存储的时候，就必须要把对象在内存里面的表示转化成合适的格式。这个过程就叫做Marshalling，反之就是demarshalling。</p><h3 id="解释下Serialization和Deserialization。"><a href="#解释下Serialization和Deserialization。" class="headerlink" title="解释下Serialization和Deserialization。"></a>解释下Serialization和Deserialization。</h3><p>Java提供了一种叫做对象序列化的机制，他把对象表示成一连串的字节，里面包含了对象的数据，对象的类型信息，对象内部的数据的类型信息等等。因此，序列化可以看成是为了把对象存储在磁盘上或者是从磁盘上读出来并重建对象而把对象扁平化的一种方式。反序列化是把对象从扁平状态转化成活动对象的相反的步骤。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Java 面试题系列篇-基础算法</title>
      <link href="/2018/10/20/Java-%E9%9D%A2%E8%AF%95%E9%A2%98%E7%B3%BB%E5%88%97%E7%AF%87-%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/"/>
      <url>/2018/10/20/Java-%E9%9D%A2%E8%AF%95%E9%A2%98%E7%B3%BB%E5%88%97%E7%AF%87-%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h2 id="基础算法"><a href="#基础算法" class="headerlink" title="基础算法"></a>基础算法</h2><h3 id="用Java写一个冒泡排序。"><a href="#用Java写一个冒泡排序。" class="headerlink" title="用Java写一个冒泡排序。"></a>用Java写一个冒泡排序。</h3><p>答：冒泡排序几乎是个程序员都写得出来，但是面试的时候如何写一个逼格高的冒泡排序却不是每个人都能做到，下面提供一个参考代码：</p><p>import java.util.Comparator;</p><p>/**</p><ul><li>排序器接口(策略模式: 将算法封装到具有共同接口的独立的类中使得它们可以相互替换)</li><li><p>@author骆昊</p><p>*</p><p>*/</p></li></ul><p>public interface Sorter {</p><p>   /**</p><p>​    * 排序</p><p>​    * @param list 待排序的数组</p><p>​    */</p><p>   public &lt;T extends Comparable<t>&gt; void sort(T[] list);</t></p><p>   /**</p><p>​    * 排序</p><p>​    * @param list 待排序的数组</p><p>​    * @param comp 比较两个对象的比较器</p><p>​    */</p><p>   public <t> void sort(T[] list, Comparator<t> comp);</t></t></p><p>}</p><p>import java.util.Comparator;</p><p>/**</p><ul><li>冒泡排序</li><li></li><li><p>@author骆昊</p><p>*</p><p>*/</p></li></ul><p>public class BubbleSorter implements Sorter {</p><p>​    @Override</p><p>​    public &lt;T extends Comparable<t>&gt; void sort(T[] list) {</t></p><p>​        boolean swapped = true;</p><p>​        for (int i = 1, len = list.length; i &lt; len &amp;&amp; swapped; ++i) {</p><p>​            swapped = false;</p><p>​            for (int j = 0; j &lt; len - i; ++j) {</p><p>​                if (list[j].compareTo(list[j + 1]) &gt; 0) {</p><p>​                    T temp = list[j];</p><p>​                    list[j] = list[j + 1];</p><p>​                    list[j + 1] = temp;</p><p>​                    swapped = true;</p><p>​                }</p><p>​            }</p><p>​        }</p><p>​    }</p><p>​    @Override</p><p>​    public <t> void sort(T[] list, Comparator<t> comp) {</t></t></p><p>​        boolean swapped = true;</p><p>​        for (int i = 1, len = list.length; i &lt; len &amp;&amp; swapped; ++i) {</p><p>​            swapped = false;</p><p>​            for (int j = 0; j &lt; len - i; ++j) {</p><p>​                if (comp.compare(list[j], list[j + 1]) &gt; 0) {</p><p>​                    T temp = list[j];</p><p>​                    list[j] = list[j + 1];</p><p>​                    list[j + 1] = temp;</p><p>​                    swapped = true;</p><p>​                }</p><p>​            }</p><p>​        }</p><p>​    }</p><p>}</p><h3 id="用Java写一个折半查找。"><a href="#用Java写一个折半查找。" class="headerlink" title="用Java写一个折半查找。"></a>用Java写一个折半查找。</h3><p>答：折半查找，也称二分查找、二分搜索，是一种在有序数组中查找某一特定元素的搜索算法。搜素过程从数组的中间元素开始，如果中间元素正好是要查找的元素，则搜素过程结束；如果某一特定元素大于或者小于中间元素，则在数组大于或小于中间元素的那一半中查找，而且跟开始一样从中间元素开始比较。如果在某一步骤数组已经为空，则表示找不到指定的元素。这种搜索算法每一次比较都使搜索范围缩小一半，其时间复杂度是O(logN)。</p><p>import java.util.Comparator;</p><p>public class MyUtil {</p><p>   public static &lt;T extends Comparable<t>&gt; int binarySearch(T[] x, T key) {</t></p><p>​      return binarySearch(x, 0, x.length- 1, key);</p><p>   }</p><p>   // 使用循环实现的二分查找</p><p>   public static <t> int binarySearch(T[] x, T key, Comparator<t> comp) {</t></t></p><p>​      int low = 0;</p><p>​      int high = x.length - 1;</p><p>​      while (low &lt;= high) {</p><p>​          int mid = (low + high) &gt;&gt;&gt; 1;</p><p>​          int cmp = comp.compare(x[mid], key);</p><p>​          if (cmp &lt; 0) {</p><p>​            low= mid + 1;</p><p>​          }</p><p>​          else if (cmp &gt; 0) {</p><p>​            high= mid - 1;</p><p>​          }</p><p>​          else {</p><p>​            return mid;</p><p>​          }</p><p>​      }</p><p>​      return -1;</p><p>   }</p><p>   // 使用递归实现的二分查找</p><p>   private static&lt;T extends Comparable<t>&gt; int binarySearch(T[] x, int low, int high, T key) {</t></p><p>​      if(low &lt;= high) {</p><p>​        int mid = low + ((high -low) &gt;&gt; 1);</p><p>​        if(key.compareTo(x[mid])== 0) {</p><p>​           return mid;</p><p>​        }</p><p>​        else if(key.compareTo(x[mid])&lt; 0) {</p><p>​           return binarySearch(x,low, mid - 1, key);</p><p>​        }</p><p>​        else {</p><p>​           return binarySearch(x,mid + 1, high, key);</p><p>​        }</p><p>​      }</p><p>​      return -1;</p><p>   }</p><p>}</p><p>说明：上面的代码中给出了折半查找的两个版本，一个用递归实现，一个用循环实现。需要注意的是计算中间位置时不应该使用(high+ low) / 2的方式，因为加法运算可能导致整数越界，这里应该使用以下三种方式之一：low + (high - low) / 2或low + (high – low) &gt;&gt; 1或(low + high) &gt;&gt;&gt; 1（&gt;&gt;&gt;是逻辑右移，是不带符号位的右移）</p><h3 id="什么是Java虚拟机？为什么Java被称作是“平台无关的编程语言”？"><a href="#什么是Java虚拟机？为什么Java被称作是“平台无关的编程语言”？" class="headerlink" title="什么是Java虚拟机？为什么Java被称作是“平台无关的编程语言”？"></a>什么是Java虚拟机？为什么Java被称作是“平台无关的编程语言”？</h3><p>Java虚拟机是一个可以执行Java字节码的虚拟机进程。Java源文件被编译成能被Java虚拟机执行的字节码文件。</p><p>Java被设计成允许应用程序可以运行在任意的平台，而不需要程序员为每一个平台单独重写或者是重新编译。Java虚拟机让这个变为可能，因为它知道底层硬件平台的指令长度和其他特性。</p><h3 id="”static”关键字是什么意思？Java中是否可以覆盖-override-一个private或者是static的方法？"><a href="#”static”关键字是什么意思？Java中是否可以覆盖-override-一个private或者是static的方法？" class="headerlink" title="”static”关键字是什么意思？Java中是否可以覆盖(override)一个private或者是static的方法？"></a>”static”关键字是什么意思？Java中是否可以覆盖(override)一个private或者是static的方法？</h3><p>“static”关键字表明一个成员变量或者是成员方法可以在没有所属的类的实例变量的情况下被访问。</p><p>Java中static方法不能被覆盖，因为方法覆盖是基于运行时动态绑定的，而static方法是编译时静态绑定的。static方法跟类的任何实例都不相关，所以概念上不适用。</p><p>java中也不可以覆盖private的方法，因为private修饰的变量和方法只能在当前类中使用，如果是其他的类继承当前类是不能访问到private变量或方法的，当然也不能覆盖。</p><h3 id="是否可以在static环境中访问非static变量？"><a href="#是否可以在static环境中访问非static变量？" class="headerlink" title="是否可以在static环境中访问非static变量？"></a>是否可以在static环境中访问非static变量？</h3><p>static变量在Java中是属于类的，它在所有的实例中的值是一样的。当类被Java虚拟机载入的时候，会对static变量进行初始化。如果你的代码尝试不用实例来访问非static的变量，编译器会报错，因为这些变量还没有被创建出来，还没有跟任何实例关联上。</p><h3 id="Java支持的数据类型有哪些？什么是自动拆装箱？"><a href="#Java支持的数据类型有哪些？什么是自动拆装箱？" class="headerlink" title="Java支持的数据类型有哪些？什么是自动拆装箱？"></a>Java支持的数据类型有哪些？什么是自动拆装箱？</h3><p>Java语言支持的8种基本数据类型是：</p><p>byte</p><p>short</p><p>int</p><p>long</p><p>float</p><p>double</p><p>boolean</p><p>char</p><p>自动装箱是Java编译器在基本数据类型和对应的对象包装类型之间做的一个转化。比如：把int转化成Integer，double转化成Double，等等。反之就是自动拆箱。</p><p>Java支持的数据类型包括两种：一种是基本数据类型，包含byte，char,short, boolean ,int , long, float,double;另一种是引用类型：如String等，其实是对象的引用，JVM中虚拟栈中存的是对象的地址，创建的对象实质在堆中，通过地址来找到堆中的对象的过程，即为引用类型。自动装箱就是Java编译器在基本数据类型和对应的对象包装类型间的转化，即int转化为Integer,自动拆箱是Integer调用其方法将其转化为int的过程</p><h3 id="Java中的方法覆盖-Overriding-和方法重载-Overloading-是什么意思？"><a href="#Java中的方法覆盖-Overriding-和方法重载-Overloading-是什么意思？" class="headerlink" title="Java中的方法覆盖(Overriding)和方法重载(Overloading)是什么意思？"></a>Java中的方法覆盖(Overriding)和方法重载(Overloading)是什么意思？</h3><p>Java中的方法重载发生在同一个类里面两个或者是多个方法的方法名相同但是参数不同的情况。与此相对，方法覆盖是说子类重新定义了父类的方法。方法覆盖必须有相同的方法名，参数列表和返回类型。覆盖者可能不会限制它所覆盖的方法的访问。</p><h3 id="Java中，什么是构造方法？什么是构造方法重载？什么是复制构造方法？"><a href="#Java中，什么是构造方法？什么是构造方法重载？什么是复制构造方法？" class="headerlink" title="Java中，什么是构造方法？什么是构造方法重载？什么是复制构造方法？"></a>Java中，什么是构造方法？什么是构造方法重载？什么是复制构造方法？</h3><p>当新对象被创建的时候，构造方法会被调用。每一个类都有构造方法。在程序员没有给类提供构造方法的情况下，Java编译器会为这个类创建一个默认的构造方法。</p><p>Java中构造方法重载和方法重载很相似。可以为一个类创建多个构造方法。每一个构造方法必须有它自己唯一的参数列表。</p><p>Java不支持像C++中那样的复制构造方法，这个不同点是因为如果你不自己写构造方法的情况下，Java不会创建默认的复制构造方法。</p><h3 id="Java支持多继承么？"><a href="#Java支持多继承么？" class="headerlink" title="Java支持多继承么？"></a>Java支持多继承么？</h3><p>Java中类不支持多继承，只支持单继承（即一个类只有一个父类）。 但是java中的接口支持多继承，，即一个子接口可以有多个父接口。（接口的作用是用来扩展对象的功能，一个子接口继承多个父接口，说明子接口扩展了多个功能，当类实现接口时，类就扩展了相应的功能）。</p><h3 id="接口和抽象类的区别是什么？"><a href="#接口和抽象类的区别是什么？" class="headerlink" title="接口和抽象类的区别是什么？"></a>接口和抽象类的区别是什么？</h3><p>Java提供和支持创建抽象类和接口。它们的实现有共同点，不同点在于：</p><p>接口中所有的方法隐含的都是抽象的。而抽象类则可以同时包含抽象和非抽象的方法。</p><p>类可以实现很多个接口，但是只能继承一个抽象类</p><p>类可以不实现抽象类和接口声明的所有方法，当然，在这种情况下，类也必须得声明成是抽象的。</p><p>抽象类可以在不提供接口方法实现的情况下实现接口。</p><p>Java接口中声明的变量默认都是final的。抽象类可以包含非final的变量。</p><p>Java接口中的成员函数默认是public的。抽象类的成员函数可以是private，protected或者是public。</p><p>接口是绝对抽象的，不可以被实例化。抽象类也不可以被实例化，但是，如果它包含main方法的话是可以被调用的。</p><p>也可以参考JDK8中抽象类和接口的区别</p><h3 id="什么是值传递和引用传递？"><a href="#什么是值传递和引用传递？" class="headerlink" title="什么是值传递和引用传递？"></a>什么是值传递和引用传递？</h3><p>值传递是对基本型变量而言的,传递的是该变量的一个副本,改变副本不影响原变量.</p><p>引用传递一般是对于对象型变量而言的,传递的是该对象地址的一个副本, 并不是原对象本身 。</p><p>一般认为,java内的传递都是值传递. java中实例对象的传递是引用传递  </p><h3 id="进程和线程的区别是什么？"><a href="#进程和线程的区别是什么？" class="headerlink" title="进程和线程的区别是什么？"></a>进程和线程的区别是什么？</h3><p>进程是执行着的应用程序，而线程是进程内部的一个执行序列。一个进程可以有多个线程。线程又叫做轻量级进程。</p><p>线程的划分小于进程，线程隶属于某个进程。 进程是程序的一种动态形式，是CPU、内存等资源占用的基本单位，而线程是不能占有这些资源的。 进程之间相互独立，通信比较困难，而线程之间共享一块内存区域，通信比较方便。 进程在执行的过程中，包含比较固定的入口，执行顺序，出口，而线程的这些过程会被应用程序所控制。</p><h3 id="创建线程有几种不同的方式？你喜欢哪一种？为什么？"><a href="#创建线程有几种不同的方式？你喜欢哪一种？为什么？" class="headerlink" title="创建线程有几种不同的方式？你喜欢哪一种？为什么？"></a>创建线程有几种不同的方式？你喜欢哪一种？为什么？</h3><p>有4种方式可以用来创建线程：</p><p>继承Thread类</p><p>实现Runnable接口</p><p>应用程序可以使用Executor框架来创建线程池</p><p>实现Runnable接口这种方式更受欢迎，因为这不需要继承Thread类。在应用设计中已经继承了别的对象的情况下，这需要多继承（而Java不支持多继承），只能实现接口。同时，线程池也是非常高效的，很容易实现和使用。</p><p>还有一种方式是实现Callable接口。</p><h3 id="概括的解释下线程的几种可用状态。"><a href="#概括的解释下线程的几种可用状态。" class="headerlink" title="概括的解释下线程的几种可用状态。"></a>概括的解释下线程的几种可用状态。</h3><p>\1. 新建( new )：新创建了一个线程对象。</p><p>\2. 可运行( runnable )：线程对象创建后，其他线程(比如 main 线程）调用了该对象 的 start ()方法。该状态的线程位于可运行线程池中，等待被线程调度选中，获 取 cpu 的使用权 。</p><p>\3. 运行( running )：可运行状态( runnable )的线程获得了 cpu 时间片（ timeslice ） ，执行程序代码。</p><p>\4. 阻塞( block )：阻塞状态是指线程因为某种原因放弃了 cpu 使用权，也即让出了 cpu timeslice ，暂时停止运行。直到线程进入可运行( runnable )状态，才有 机会再次获得 cpu timeslice 转到运行( running )状态。阻塞的情况分三种：</p><p>(一). 等待阻塞：运行( running )的线程执行 o . wait ()方法， JVM 会把该线程放 入等待队列( waitting queue )中。</p><p>(二). 同步阻塞：运行( running )的线程在获取对象的同步锁时，若该同步锁 被别的线程占用，则 JVM 会把该线程放入锁池( lock pool )中。</p><p>(三). 其他阻塞: 运行( running )的线程执行 Thread . sleep ( long ms )或 t . join ()方法，或者发出了 I / O 请求时， JVM 会把该线程置为阻塞状态。            当 sleep ()状态超时、 join ()等待线程终止或者超时、或者 I / O 处理完毕时，线程重新转入可运行( runnable )状态。</p><p>\5. 死亡( dead )：线程 run ()、 main () 方法执行结束，或者因异常退出了 run ()方法，则该线程结束生命周期。死亡的线程不可再次复生。</p><h3 id="同步方法和同步代码块的区别是什么？"><a href="#同步方法和同步代码块的区别是什么？" class="headerlink" title="同步方法和同步代码块的区别是什么？"></a>同步方法和同步代码块的区别是什么？</h3><p>区别：</p><p>同步方法默认用this或者当前类class对象作为锁；</p><p>同步代码块可以选择以什么来加锁，比同步方法要更细颗粒度，我们可以选择只同步会发生同步问题的部分代码而不是整个方法；</p><p>同步方法使用关键字 synchronized修饰方法，而同步代码块主要是修饰需要进行同步的代码，用   synchronized（object）{代码内容}进行修饰；</p><h3 id="在监视器-Monitor-内部，是如何做线程同步的？程序应该做哪种级别的同步？"><a href="#在监视器-Monitor-内部，是如何做线程同步的？程序应该做哪种级别的同步？" class="headerlink" title="在监视器(Monitor)内部，是如何做线程同步的？程序应该做哪种级别的同步？"></a>在监视器(Monitor)内部，是如何做线程同步的？程序应该做哪种级别的同步？</h3><p>监视器和锁在Java虚拟机中是一块使用的。监视器监视一块同步代码块，确保一次只有一个线程执行同步代码块。每一个监视器都和一个对象引用相关联。线程在获取锁之前不允许执行同步代码。</p><h3 id="什么是死锁-deadlock-？"><a href="#什么是死锁-deadlock-？" class="headerlink" title="什么是死锁(deadlock)？"></a>什么是死锁(deadlock)？</h3><p>所谓死锁是指多个进 程因竞争资源而造成的一种僵局（互相等待），若无外力作用，这些进程都将无法向前推进。死锁产生的4个必要条件：</p><p>互斥条件：进程要求对所分配的资源（如打印机）进行排他性控制，即在一段时间内某 资源仅为一个进程所占有。此时若有其他进程请求该资源，则请求进程只能等待。</p><p>不剥夺条件：进程所获得的资源在未使用完毕之前，不能被其他进程强行夺走，即只能 由获得该资源的进程自己来释放（只能是主动释放)。</p><p>请求和保持条件：进程已经保持了至少一个资源，但又提出了新的资源请求，而该资源 已被其他进程占有，此时请求进程被阻塞，但对自己已获得的资源保持不放。</p><p>循环等待条件：存在一种进程资源的循环等待链，链中每一个进程已获得的资源同时被 链中下一个进程所请求。</p><h3 id="如何确保N个线程可以访问N个资源同时又不导致死锁？"><a href="#如何确保N个线程可以访问N个资源同时又不导致死锁？" class="headerlink" title="如何确保N个线程可以访问N个资源同时又不导致死锁？"></a>如何确保N个线程可以访问N个资源同时又不导致死锁？</h3><p>使用多线程的时候，一种非常简单的避免死锁的方式就是：指定获取锁的顺序，并强制线程按照指定的顺序获取锁。因此，如果所有的线程都是以同样的顺序加锁和释放锁，就不会出现死锁了。</p><h3 id="Java集合类框架的基本接口有哪些？"><a href="#Java集合类框架的基本接口有哪些？" class="headerlink" title="Java集合类框架的基本接口有哪些？"></a>Java集合类框架的基本接口有哪些？</h3><p>集合类接口指定了一组叫做元素的对象。集合类接口的每一种具体的实现类都可以选择以它自己的方式对元素进行保存和排序。有的集合类允许重复的键，有些不允许。</p><p>Java集合类提供了一套设计良好的支持对一组对象进行操作的接口和类。Java集合类里面最基本的接口有：</p><p>Collection：代表一组对象，每一个对象都是它的子元素。</p><p>Set：不包含重复元素的Collection。</p><p>List：有顺序的collection，并且可以包含重复元素。</p><p>Map：可以把键(key)映射到值(value)的对象，键不能重复。</p><h3 id="为什么集合类没有实现Cloneable和Serializable接口？"><a href="#为什么集合类没有实现Cloneable和Serializable接口？" class="headerlink" title="为什么集合类没有实现Cloneable和Serializable接口？"></a>为什么集合类没有实现Cloneable和Serializable接口？</h3><p>克隆(cloning)或者是序列化(serialization)的语义和含义是跟具体的实现相关的。因此，应该由集合类的具体实现来决定如何被克隆或者是序列化。</p><h3 id="什么是迭代器-Iterator-？"><a href="#什么是迭代器-Iterator-？" class="headerlink" title="什么是迭代器(Iterator)？"></a>什么是迭代器(Iterator)？</h3><p>Iterator接口提供了很多对集合元素进行迭代的方法。每一个集合类都包含了可以返回迭代器实例的</p><p>迭代方法。迭代器可以在迭代的过程中删除底层集合的元素,但是不可以直接调用集合的</p><p>remove(Object Obj)删除，可以通过迭代器的remove()方法删除。</p><h3 id="Iterator和ListIterator的区别是什么？"><a href="#Iterator和ListIterator的区别是什么？" class="headerlink" title="Iterator和ListIterator的区别是什么？"></a>Iterator和ListIterator的区别是什么？</h3><p>下面列出了他们的区别：</p><p>Iterator可用来遍历Set和List集合，但是ListIterator只能用来遍历List。</p><p>Iterator对集合只能是前向遍历，ListIterator既可以前向也可以后向。</p><p>ListIterator实现了Iterator接口，并包含其他的功能，比如：增加元素，替换元素，获取前一个和后一个元素的索引，等等。</p><h3 id="快速失败-fail-fast-和安全失败-fail-safe-的区别是什么？"><a href="#快速失败-fail-fast-和安全失败-fail-safe-的区别是什么？" class="headerlink" title="快速失败(fail-fast)和安全失败(fail-safe)的区别是什么？"></a>快速失败(fail-fast)和安全失败(fail-safe)的区别是什么？</h3><p>Iterator的安全失败是基于对底层集合做拷贝，因此，它不受源集合上修改的影响。java.util包下面的所有的集合类都是快速失败的，而java.util.concurrent包下面的所有的类都是安全失败的。快速失败的迭代器会抛出ConcurrentModificationException异常，而安全失败的迭代器永远不会抛出这样的异常。</p><h3 id="Java中的HashMap的工作原理是什么？"><a href="#Java中的HashMap的工作原理是什么？" class="headerlink" title="Java中的HashMap的工作原理是什么？"></a>Java中的HashMap的工作原理是什么？</h3><p>Java中的HashMap是以键值对(key-value)的形式存储元素的。HashMap需要一个hash函数，它使用hashCode()和equals()方法来向集合/从集合添加和检索元素。当调用put()方法的时候，HashMap会计算key的hash值，然后把键值对存储在集合中合适的索引上。如果key已经存在了，value会被更新成新值。HashMap的一些重要的特性是它的容量(capacity)，负载因子(load factor)和扩容极限(threshold resizing)。</p><h3 id="hashCode-和equals-方法的重要性体现在什么地方？"><a href="#hashCode-和equals-方法的重要性体现在什么地方？" class="headerlink" title="hashCode()和equals()方法的重要性体现在什么地方？"></a>hashCode()和equals()方法的重要性体现在什么地方？</h3><p>Java中的HashMap使用hashCode()和equals()方法来确定键值对的索引，当根据键获取值的时候也会用到这两个方法。如果没有正确的实现这两个方法，两个不同的键可能会有相同的hash值，因此，可能会被集合认为是相等的。而且，这两个方法也用来发现重复元素。所以这两个方法的实现对HashMap的精确性和正确性是至关重要的。</p><h3 id="HashMap和Hashtable有什么区别？"><a href="#HashMap和Hashtable有什么区别？" class="headerlink" title="HashMap和Hashtable有什么区别？"></a>HashMap和Hashtable有什么区别？</h3><p>HashMap和Hashtable都实现了Map接口，因此很多特性非常相似。但是，他们有以下不同点：</p><p>HashMap允许键和值是null，而Hashtable不允许键或者值是null。</p><p>Hashtable是同步的，而HashMap不是。因此，HashMap更适合于单线程环境，而Hashtable适合于多线程环境。</p><p>HashMap提供了可供应用迭代的键的集合，因此，HashMap是快速失败的。另一方面，Hashtable提供了对键的列举(Enumeration)。</p><p>一般认为Hashtable是一个遗留的类。</p><h3 id="数组-Array-和列表-ArrayList-有什么区别？什么时候应该使用Array而不是ArrayList？"><a href="#数组-Array-和列表-ArrayList-有什么区别？什么时候应该使用Array而不是ArrayList？" class="headerlink" title="数组(Array)和列表(ArrayList)有什么区别？什么时候应该使用Array而不是ArrayList？"></a>数组(Array)和列表(ArrayList)有什么区别？什么时候应该使用Array而不是ArrayList？</h3><p>下面列出了Array和ArrayList的不同点：</p><p>Array可以包含基本类型和对象类型，ArrayList只能包含对象类型。</p><p>Array大小是固定的，ArrayList的大小是动态变化的。</p><p>ArrayList提供了更多的方法和特性，比如：addAll()，removeAll()，iterator()等等。</p><p>对于基本类型数据，集合使用自动装箱来减少编码工作量。但是，当处理固定大小的基本数据类型的时候，这种方式相对比较慢。</p><h3 id="ArrayList和LinkedList有什么区别？"><a href="#ArrayList和LinkedList有什么区别？" class="headerlink" title="ArrayList和LinkedList有什么区别？"></a>ArrayList和LinkedList有什么区别？</h3><p>ArrayList和LinkedList都实现了List接口，他们有以下的不同点：</p><p>ArrayList是基于索引的数据接口，它的底层是数组。它可以以O(1)时间复杂度对元素进行随机访问。与此对应，LinkedList是以元素列表的形式存储它的数据，每一个元素都和它的前一个和后一个元素链接在一起，在这种情况下，查找某个元素的时间复杂度是O(n)。</p><p>相对于ArrayList，LinkedList的插入，添加，删除操作速度更快，因为当元素被添加到集合任意位置的时候，不需要像数组那样重新计算大小或者是更新索引。</p><p>LinkedList比ArrayList更占内存，因为LinkedList为每一个节点存储了两个引用，一个指向前一个元素，一个指向下一个元素。</p><p>也可以参考ArrayList vs. LinkedList。</p><h3 id="Comparable和Comparator接口是干什么的？列出它们的区别。"><a href="#Comparable和Comparator接口是干什么的？列出它们的区别。" class="headerlink" title="Comparable和Comparator接口是干什么的？列出它们的区别。"></a>Comparable和Comparator接口是干什么的？列出它们的区别。</h3><p>Java提供了只包含一个compareTo()方法的Comparable接口。这个方法可以个给两个对象排序。具体来说，它返回负数，0，正数来表明已经存在的对象小于，等于，大于输入对象。</p><p>Java提供了包含compare()和equals()两个方法的Comparator接口。compare()方法用来给两个输入参数排序，返回负数，0，正数表明第一个参数是小于，等于，大于第二个参数。equals()方法需要一个对象作为参数，它用来决定输入参数是否和comparator相等。只有当输入参数也是一个comparator并且输入参数和当前comparator的排序结果是相同的时候，这个方法才返回true。</p><h3 id="什么是Java优先级队列-Priority-Queue-？"><a href="#什么是Java优先级队列-Priority-Queue-？" class="headerlink" title="什么是Java优先级队列(Priority Queue)？"></a>什么是Java优先级队列(Priority Queue)？</h3><p>PriorityQueue是一个基于优先级堆的无界队列，它的元素是按照自然顺序(natural order)排序的。在创建的时候，我们可以给它提供一个负责给元素排序的比较器。PriorityQueue不允许null值，因为他们没有自然顺序，或者说他们没有任何的相关联的比较器。最后，PriorityQueue不是线程安全的，入队和出队的时间复杂度是O(log(n))。</p><h3 id="你了解大O符号-big-O-notation-么？你能给出不同数据结构的例子么？"><a href="#你了解大O符号-big-O-notation-么？你能给出不同数据结构的例子么？" class="headerlink" title="你了解大O符号(big-O notation)么？你能给出不同数据结构的例子么？"></a>你了解大O符号(big-O notation)么？你能给出不同数据结构的例子么？</h3><p>大O符号描述了当数据结构里面的元素增加的时候，算法的规模或者是一个渐进上界 。</p><p>大O符号也可用来描述其他的行为，比如：内存消耗。因为集合类实际上是数据结构，我们一般使用大O符号基于时间，内存和性能来选择最好的实现。大O符号可以对大量数据的性能给出一个很好的说明。</p><h3 id="如何权衡是使用无序的数组还是有序的数组？"><a href="#如何权衡是使用无序的数组还是有序的数组？" class="headerlink" title="如何权衡是使用无序的数组还是有序的数组？"></a>如何权衡是使用无序的数组还是有序的数组？</h3><p>有序数组最大的好处在于查找的时间复杂度是O(log n)，而无序数组是O(n)。有序数组的缺点是插入操作的时间复杂度是O(n)，因为值大的元素需要往后移动来给新元素腾位置。相反，无序数组的插入时间复杂度是常量O(1)。</p><h3 id="Java集合类框架的最佳实践有哪些？"><a href="#Java集合类框架的最佳实践有哪些？" class="headerlink" title="Java集合类框架的最佳实践有哪些？"></a>Java集合类框架的最佳实践有哪些？</h3><p>根据应用的需要正确选择要使用的集合的类型对性能非常重要，比如：假如元素的数量是固定的，而且能事先知道，我们就应该用Array而不是ArrayList。</p><p>有些集合类允许指定初始容量。因此，如果我们能估计出存储的元素的数目，我们可以设置初始容量来避免重新计算hash值或者是扩容。</p><p>为了类型安全，可读性和健壮性的原因总是要使用泛型。同时，使用泛型还可以避免运行时的ClassCastException。</p><p>使用JDK提供的不变类(immutable class)作为Map的键可以避免为我们自己的类实现hashCode()和equals()方法。</p><p>编程的时候接口优于实现。</p><p>底层的集合实际上是空的情况下，返回长度是0的集合或者是数组，不要返回null。</p><h3 id="Enumeration接口和Iterator接口的区别有哪些？"><a href="#Enumeration接口和Iterator接口的区别有哪些？" class="headerlink" title="Enumeration接口和Iterator接口的区别有哪些？"></a>Enumeration接口和Iterator接口的区别有哪些？</h3><p>Enumeration速度是Iterator的2倍，同时占用更少的内存。但是，Iterator远远比Enumeration安全，因为其他线程不能够修改正在被iterator遍历的集合里面的对象。同时，Iterator允许调用者删除底层集合里面的元素，这对Enumeration来说是不可能的。</p><h3 id="HashSet和TreeSet有什么区别？"><a href="#HashSet和TreeSet有什么区别？" class="headerlink" title="HashSet和TreeSet有什么区别？"></a>HashSet和TreeSet有什么区别？</h3><p>HashSet是由一个hash表来实现的，因此，它的元素是无序的。add()，remove()，contains()方法的时间复杂度是O(1)。</p><p>另一方面，TreeSet是由一个树形的结构来实现的，它里面的元素是有序的。因此，add()，remove()，contains()方法的时间复杂度是O(logn)。</p><h3 id="Java中垃圾回收有什么目的？什么时候进行垃圾回收？"><a href="#Java中垃圾回收有什么目的？什么时候进行垃圾回收？" class="headerlink" title="Java中垃圾回收有什么目的？什么时候进行垃圾回收？"></a>Java中垃圾回收有什么目的？什么时候进行垃圾回收？</h3><p>垃圾回收是在内存中存在没有引用的对象或超过作用域的对象时进行。</p><p>垃圾回收的目的是通过识别并且丢弃应用不再使用的对象来释放和重用资源。</p><h3 id="System-gc-和Runtime-gc-会做什么事情？"><a href="#System-gc-和Runtime-gc-会做什么事情？" class="headerlink" title="System.gc()和Runtime.gc()会做什么事情？"></a>System.gc()和Runtime.gc()会做什么事情？</h3><p>这两个方法用来提示JVM要进行垃圾回收。但是，立即开始还是延迟进行垃圾回收是取决于JVM的。</p><h3 id="finalize-方法什么时候被调用？析构函数-finalization-的目的是什么？"><a href="#finalize-方法什么时候被调用？析构函数-finalization-的目的是什么？" class="headerlink" title="finalize()方法什么时候被调用？析构函数(finalization)的目的是什么？"></a>finalize()方法什么时候被调用？析构函数(finalization)的目的是什么？</h3><p>垃圾回收器(garbage colector)决定回收某对象时，就会运行该对象的finalize()方法 但是在Java中很不幸，如果内存总是充足的，那么垃圾回收可能永远不会进行，也就是说filalize()可能永远不被执行，显然指望它做收尾工作是靠不住的。 那么finalize()究竟是做什么的呢？它最主要 的用途是回收特殊渠道申请的内存。Java程序有垃圾回收器，所以一般情况下内存问题不用程序员操心。但有一种JNI(Java Native Interface)调用non-Java程序（C或C++），finalize()的工作就是回收这部分的内存。</p><h3 id="如果对象的引用被置为null，垃圾收集器是否会立即释放对象占用的内存？"><a href="#如果对象的引用被置为null，垃圾收集器是否会立即释放对象占用的内存？" class="headerlink" title="如果对象的引用被置为null，垃圾收集器是否会立即释放对象占用的内存？"></a>如果对象的引用被置为null，垃圾收集器是否会立即释放对象占用的内存？</h3><p>不会，在下一个垃圾回收周期中，这个对象将是可被回收的。</p><h3 id="Java堆的结构是什么样子的？什么是堆中的永久代-Perm-Gen-space"><a href="#Java堆的结构是什么样子的？什么是堆中的永久代-Perm-Gen-space" class="headerlink" title="Java堆的结构是什么样子的？什么是堆中的永久代(Perm Gen space)?"></a>Java堆的结构是什么样子的？什么是堆中的永久代(Perm Gen space)?</h3><p>JVM的堆是运行时数据区，所有类的实例和数组都是在堆上分配内存。它在JVM启动的时候被创建。对象所占的堆内存是由自动内存管理系统也就是垃圾收集器回收。</p><p>堆内存是由存活和死亡的对象组成的。存活的对象是应用可以访问的，不会被垃圾回收。死亡的对象是应用不可访问尚且还没有被垃圾收集器回收掉的对象。一直到垃圾收集器把这些对象回收掉之前，他们会一直占据堆内存空间。</p><p>永久代是用于存放静态文件，如Java类、方法等。持久代对垃圾回收没有显著影响，但是有些应用可能动态生成或者调用一些class，例如Hibernate 等，在这种时候需要设置一个比较大的持久代空间来存放这些运行过程中新增的类，永久代中一般包含：</p><p>类的方法(字节码…)</p><p>类名(Sring对象)</p><p>.class文件读到的常量信息</p><p>class对象相关的对象列表和类型列表 (e.g., 方法对象的array).</p><p>JVM创建的内部对象</p><p>JIT编译器优化用的信息</p><h3 id="串行-serial-收集器和吞吐量-throughput-收集器的区别是什么？"><a href="#串行-serial-收集器和吞吐量-throughput-收集器的区别是什么？" class="headerlink" title="串行(serial)收集器和吞吐量(throughput)收集器的区别是什么？"></a>串行(serial)收集器和吞吐量(throughput)收集器的区别是什么？</h3><p>吞吐量收集器使用并行版本的新生代垃圾收集器，它用于中等规模和大规模数据的应用程序。而串行收集器对大多数的小应用(在现代处理器上需要大概100M左右的内存)就足够了。</p><h3 id="在Java中，对象什么时候可以被垃圾回收？"><a href="#在Java中，对象什么时候可以被垃圾回收？" class="headerlink" title="在Java中，对象什么时候可以被垃圾回收？"></a>在Java中，对象什么时候可以被垃圾回收？</h3><p>当对象对当前使用这个对象的应用程序变得不可触及的时候，这个对象就可以被回收了。</p><h3 id="JVM的永久代中会发生垃圾回收么？"><a href="#JVM的永久代中会发生垃圾回收么？" class="headerlink" title="JVM的永久代中会发生垃圾回收么？"></a>JVM的永久代中会发生垃圾回收么？</h3><p>垃圾回收不会发生在永久代，如果永久代满了或者是超过了临界值，会触发完全垃圾回收(Full GC)。如果你仔细查看垃圾收集器的输出信息，就会发现永久代也是被回收的。这就是为什么正确的永久代大小对避免Full GC是非常重要的原因。请参考下Java8：从永久代到元数据区</p><p>(注：Java8中已经移除了永久代，新加了一个叫做元数据区的native内存区)</p><h3 id="Java中的两种异常类型是什么？他们有什么区别？"><a href="#Java中的两种异常类型是什么？他们有什么区别？" class="headerlink" title="Java中的两种异常类型是什么？他们有什么区别？"></a>Java中的两种异常类型是什么？他们有什么区别？</h3><p>Java中有两种异常：受检查的(checked)异常和不受检查的(unchecked)异常。不受检查的异常不需要在方法或者是构造函数上声明，就算方法或者是构造函数的执行可能会抛出这样的异常，并且不受检查的异常可以传播到方法或者是构造函数的外面。相反，受检查的异常必须要用throws语句在方法或者是构造函数上声明。这里有Java异常处理的一些小建议。</p><h3 id="Java中Exception和Error有什么区别？"><a href="#Java中Exception和Error有什么区别？" class="headerlink" title="Java中Exception和Error有什么区别？"></a>Java中Exception和Error有什么区别？</h3><p>Exception和Error都是Throwable的子类。Exception用于用户程序可以捕获的异常情况。Error定义了不期望被用户程序捕获的异常。</p><h3 id="throw和throws有什么区别？"><a href="#throw和throws有什么区别？" class="headerlink" title="throw和throws有什么区别？"></a>throw和throws有什么区别？</h3><p>throw关键字用来在程序中明确的抛出异常，相反，throws语句用来表明方法不能处理的异常。每一个方法都必须要指定哪些异常不能处理，所以方法的调用者才能够确保处理可能发生的异常，多个异常是用逗号分隔的。</p><h3 id="异常处理完成以后，Exception对象会发生什么变化？"><a href="#异常处理完成以后，Exception对象会发生什么变化？" class="headerlink" title="异常处理完成以后，Exception对象会发生什么变化？"></a>异常处理完成以后，Exception对象会发生什么变化？</h3><p>Exception对象会在下一个垃圾回收过程中被回收掉。</p><h3 id="finally代码块和finalize-方法有什么区别？"><a href="#finally代码块和finalize-方法有什么区别？" class="headerlink" title="finally代码块和finalize()方法有什么区别？"></a>finally代码块和finalize()方法有什么区别？</h3><p>无论是否抛出异常，finally代码块都会执行，它主要是用来释放应用占用的资源。finalize()方法是Object类的一个protected方法，它是在对象被垃圾回收之前由Java虚拟机来调用的。</p><h3 id="什么是Applet？"><a href="#什么是Applet？" class="headerlink" title="什么是Applet？"></a>什么是Applet？</h3><p>java applet是能够被包含在HTML页面中并且能被启用了java的客户端浏览器执行的程序。Applet主要用来创建动态交互的web应用程序。</p><h3 id="解释一下Applet的生命周期"><a href="#解释一下Applet的生命周期" class="headerlink" title="解释一下Applet的生命周期"></a>解释一下Applet的生命周期</h3><p>applet可以经历下面的状态：</p><p>Init：每次被载入的时候都会被初始化。</p><p>Start：开始执行applet。</p><p>Stop：结束执行applet。</p><p>Destroy：卸载applet之前，做最后的清理工作。</p><h3 id="当applet被载入的时候会发生什么？"><a href="#当applet被载入的时候会发生什么？" class="headerlink" title="当applet被载入的时候会发生什么？"></a>当applet被载入的时候会发生什么？</h3><p>首先，创建applet控制类的实例，然后初始化applet，最后开始运行。</p><h3 id="Applet和普通的Java应用程序有什么区别？"><a href="#Applet和普通的Java应用程序有什么区别？" class="headerlink" title="Applet和普通的Java应用程序有什么区别？"></a>Applet和普通的Java应用程序有什么区别？</h3><p>applet是运行在启用了java的浏览器中，Java应用程序是可以在浏览器之外运行的独立的Java程序。但是，它们都需要有Java虚拟机。</p><p>进一步来说，Java应用程序需要一个有特定方法签名的main函数来开始执行。Java applet不需要这样的函数来开始执行。</p><p>最后，Java applet一般会使用很严格的安全策略，Java应用一般使用比较宽松的安全策略。</p><h3 id="Java-applet有哪些限制条件？"><a href="#Java-applet有哪些限制条件？" class="headerlink" title="Java applet有哪些限制条件？"></a>Java applet有哪些限制条件？</h3><p>主要是由于安全的原因，给applet施加了以下的限制：</p><p>applet不能够载入类库或者定义本地方法。</p><p>applet不能在宿主机上读写文件。</p><p>applet不能读取特定的系统属性。</p><p>applet不能发起网络连接，除非是跟宿主机。</p><p>applet不能够开启宿主机上其他任何的程序。</p><h3 id="什么是不受信任的applet？"><a href="#什么是不受信任的applet？" class="headerlink" title="什么是不受信任的applet？"></a>什么是不受信任的applet？</h3><p>不受信任的applet是不能访问或是执行本地系统文件的Java applet，默认情况下，所有下载的applet都是不受信任的。</p><h3 id="从网络上加载的applet和从本地文件系统加载的applet有什么区别？"><a href="#从网络上加载的applet和从本地文件系统加载的applet有什么区别？" class="headerlink" title="从网络上加载的applet和从本地文件系统加载的applet有什么区别？"></a>从网络上加载的applet和从本地文件系统加载的applet有什么区别？</h3><p>当applet是从网络上加载的时候，applet是由applet类加载器载入的，它受applet安全管理器的限制。</p><p>当applet是从客户端的本地磁盘载入的时候，applet是由文件系统加载器载入的。</p><p>从文件系统载入的applet允许在客户端读文件，写文件，加载类库，并且也允许执行其他程序，但是，却通不过字节码校验。</p><h3 id="applet类加载器是什么？它会做哪些工作？"><a href="#applet类加载器是什么？它会做哪些工作？" class="headerlink" title="applet类加载器是什么？它会做哪些工作？"></a>applet类加载器是什么？它会做哪些工作？</h3><p>当applet是从网络上加载的时候，它是由applet类加载器载入的。类加载器有自己的java名称空间等级结构。类加载器会保证来自文件系统的类有唯一的名称空间，来自网络资源的类有唯一的名称空间。</p><p>当浏览器通过网络载入applet的时候，applet的类被放置于和applet的源相关联的私有的名称空间中。然后，那些被类加载器载入进来的类都是通过了验证器验证的。验证器会检查类文件格式是否遵守Java语言规范，确保不会出现堆栈溢出(stack overflow)或者下溢(underflow)，传递给字节码指令的参数是正确的。</p><h3 id="applet安全管理器是什么？它会做哪些工作？"><a href="#applet安全管理器是什么？它会做哪些工作？" class="headerlink" title="applet安全管理器是什么？它会做哪些工作？"></a>applet安全管理器是什么？它会做哪些工作？</h3><p>applet安全管理器是给applet施加限制条件的一种机制。浏览器可以只有一个安全管理器。安全管理器在启动的时候被创建，之后不能被替换覆盖或者是扩展。</p><h3 id="弹出式选择菜单-Choice-和列表-List-有什么区别"><a href="#弹出式选择菜单-Choice-和列表-List-有什么区别" class="headerlink" title="弹出式选择菜单(Choice)和列表(List)有什么区别"></a>弹出式选择菜单(Choice)和列表(List)有什么区别</h3><p>Choice是以一种紧凑的形式展示的，需要下拉才能看到所有的选项。Choice中一次只能选中一个选项。List同时可以有多个元素可见，支持选中一个或者多个元素。</p><h3 id="什么是布局管理器？"><a href="#什么是布局管理器？" class="headerlink" title="什么是布局管理器？"></a>什么是布局管理器？</h3><p>布局管理器用来在容器中组织组件。</p><h3 id="什么是JDBC？"><a href="#什么是JDBC？" class="headerlink" title="什么是JDBC？"></a>什么是JDBC？</h3><p>JDBC是允许用户在不同数据库之间做选择的一个抽象层。JDBC允许开发者用JAVA写数据库应用程序，而不需要关心底层特定数据库的细节。</p><h3 id="解释下驱动-Driver-在JDBC中的角色。"><a href="#解释下驱动-Driver-在JDBC中的角色。" class="headerlink" title="解释下驱动(Driver)在JDBC中的角色。"></a>解释下驱动(Driver)在JDBC中的角色。</h3><p>JDBC驱动提供了特定厂商对JDBC API接口类的实现，驱动必须要提供java.sql包下面这些类的实现：Connection, Statement, PreparedStatement,CallableStatement, ResultSet和Driver。</p><h3 id="Class-forName-方法有什么作用？"><a href="#Class-forName-方法有什么作用？" class="headerlink" title="Class.forName()方法有什么作用？"></a>Class.forName()方法有什么作用？</h3><p>初始化参数指定的类，并且返回此类对应的Class 对象</p><h3 id="PreparedStatement比Statement有什么优势？"><a href="#PreparedStatement比Statement有什么优势？" class="headerlink" title="PreparedStatement比Statement有什么优势？"></a>PreparedStatement比Statement有什么优势？</h3><p>PreparedStatements是预编译的，因此，性能会更好。同时，不同的查询参数值，PreparedStatement可以重用。</p><h3 id="什么时候使用CallableStatement？用来准备CallableStatement的方法是什么？"><a href="#什么时候使用CallableStatement？用来准备CallableStatement的方法是什么？" class="headerlink" title="什么时候使用CallableStatement？用来准备CallableStatement的方法是什么？"></a>什么时候使用CallableStatement？用来准备CallableStatement的方法是什么？</h3><p>CallableStatement用来执行存储过程。存储过程是由数据库存储和提供的。存储过程可以接受输入参数，也可以有返回结果。非常鼓励使用存储过程，因为它提供了安全性和模块化。准备一个CallableStatement的方法是：</p><p>CallableStatement Connection.prepareCall();</p><h3 id="数据库连接池是什么意思？"><a href="#数据库连接池是什么意思？" class="headerlink" title="数据库连接池是什么意思？"></a>数据库连接池是什么意思？</h3><p>像打开关闭数据库连接这种和数据库的交互可能是很费时的，尤其是当客户端数量增加的时候，会消耗大量的资源，成本是非常高的。可以在应用服务器启动的时候建立很多个数据库连接并维护在一个池中。连接请求由池中的连接提供。在连接使用完毕以后，把连接归还到池中，以用于满足将来更多的请求。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Java 面试题系列篇-设计模式</title>
      <link href="/2018/10/20/Java-%E9%9D%A2%E8%AF%95%E9%A2%98%E7%B3%BB%E5%88%97%E7%AF%87-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
      <url>/2018/10/20/Java-%E9%9D%A2%E8%AF%95%E9%A2%98%E7%B3%BB%E5%88%97%E7%AF%87-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h2><h3 id="简述一下你了解的设计模式。"><a href="#简述一下你了解的设计模式。" class="headerlink" title="简述一下你了解的设计模式。"></a>简述一下你了解的设计模式。</h3><p>答：所谓设计模式，就是一套被反复使用的代码设计经验的总结（情境中一个问题经过证实的一个解决方案）。使用设计模式是为了可重用代码、让代码更容易被他人理解、保证代码可靠性。设计模式使人们可以更加简单方便的复用成功的设计和体系结构。将已证实的技术表述成设计模式也会使新系统开发者更加容易理解其设计思路。<br>在GoF的《Design Patterns: Elements of Reusable Object-Oriented Software》中给出了三类（创建型[对类的实例化过程的抽象化]、结构型[描述如何将类或对象结合在一起形成更大的结构]、行为型[对在不同的对象之间划分责任和算法的抽象化]）共23种设计模式，包括：Abstract Factory（抽象工厂模式），Builder（建造者模式），Factory Method（工厂方法模式），Prototype（原始模型模式），Singleton（单例模式）；Facade（门面模式），Adapter（适配器模式），Bridge（桥梁模式），Composite（合成模式），Decorator（装饰模式），Flyweight（享元模式），Proxy（代理模式）；Command（命令模式），Interpreter（解释器模式），Visitor（访问者模式），Iterator（迭代子模式），Mediator（调停者模式），Memento（备忘录模式），Observer（观察者模式），State（状态模式），Strategy（策略模式），Template Method（模板方法模式）， Chain Of Responsibility（责任链模式）。<br>面试被问到关于设计模式的知识时，可以拣最常用的作答，例如： </p><ul><li>工厂模式：工厂类可以根据条件生成不同的子类实例，这些子类有一个公共的抽象父类并且实现了相同的方法，但是这些方法针对不同的数据进行了不同的操作（多态方法）。当得到子类的实例后，开发人员可以调用基类中的方法而不必考虑到底返回的是哪一个子类的实例。 </li><li>代理模式：给一个对象提供一个代理对象，并由代理对象控制原对象的引用。实际开发中，按照使用目的的不同，代理可以分为：远程代理、虚拟代理、保护代理、Cache代理、防火墙代理、同步化代理、智能引用代理。 </li><li>适配器模式：把一个类的接口变换成客户端所期待的另一种接口，从而使原本因接口不匹配而无法在一起使用的类能够一起工作。 </li><li>模板方法模式：提供一个抽象类，将部分逻辑以具体方法或构造器的形式实现，然后声明一些抽象方法来迫使子类实现剩余的逻辑。不同的子类可以以不同的方式实现这些抽象方法（多态实现），从而实现不同的业务逻辑。<br>除此之外，还可以讲讲上面提到的门面模式、桥梁模式、单例模式、装潢模式（Collections工具类和I/O系统中都使用装潢模式）等，反正基本原则就是拣自己最熟悉的、用得最多的作答，以免言多必失。</li></ul><h3 id="用Java写一个单例类。"><a href="#用Java写一个单例类。" class="headerlink" title="用Java写一个单例类。"></a>用Java写一个单例类。</h3><p>答： </p><ul><li>饿汉式单例</li></ul><p>public class Singleton {</p><p>​    private Singleton(){}</p><p>​    private static Singleton instance = new Singleton();</p><p>​    public static Singleton getInstance(){</p><p>​        return instance;</p><p>​    }</p><p>}</p><p>懒汉式单例</p><p>public class Singleton {</p><p>​    private static Singleton instance = null;</p><p>​    private Singleton() {}</p><p>​    public static synchronized Singleton getInstance(){</p><p>​        if (instance == null) instance ＝ new Singleton();</p><p>​        return instance;</p><p>​    }</p><p>}</p><p>注意：实现一个单例有两点注意事项，①将构造器私有，不允许外界通过构造器创建对象；②通过公开的静态方法向外界返回类的唯一实例。这里有一个问题可以思考：Spring的IoC容器可以为普通的类创建单例，它是怎么做到的呢？</p>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Java 面试题系列篇-正则表达式</title>
      <link href="/2018/10/20/Java-%E9%9D%A2%E8%AF%95%E9%A2%98%E7%B3%BB%E5%88%97%E7%AF%87-%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
      <url>/2018/10/20/Java-%E9%9D%A2%E8%AF%95%E9%A2%98%E7%B3%BB%E5%88%97%E7%AF%87-%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h2><h3 id="简述正则表达式及其用途。"><a href="#简述正则表达式及其用途。" class="headerlink" title="简述正则表达式及其用途。"></a>简述正则表达式及其用途。</h3><p> 答：在编写处理字符串的程序时，经常会有查找符合某些复杂规则的字符串的需要。正则表达式就是用于描述这些规则的工具。换句话说，正则表达式就是记录文本规则的代码。</p><p>说明：计算机诞生初期处理的信息几乎都是数值，但是时过境迁，今天我们使用计算机处理的信息更多的时候不是数值而是字符串，正则表达式就是在进行字符串匹配和处理的时候最为强大的工具，绝大多数语言都提供了对正则表达式的支持。</p><h3 id="Java中是如何支持正则表达式操作的？"><a href="#Java中是如何支持正则表达式操作的？" class="headerlink" title="Java中是如何支持正则表达式操作的？"></a>Java中是如何支持正则表达式操作的？</h3><p>答：Java中的String类提供了支持正则表达式操作的方法，包括：matches()、replaceAll()、replaceFirst()、split()。此外，Java中可以用Pattern类表示正则表达式对象，它提供了丰富的API进行各种正则表达式操作，请参考下面面试题的代码。</p><p>面试题： - 如果要从字符串中截取第一个英文左括号之前的字符串，例如：北京市(朝阳区)(西城区)(海淀区)，截取结果为：北京市，那么正则表达式怎么写？</p><p>import java.util.regex.Matcher;</p><p>import java.util.regex.Pattern;</p><p>class RegExpTest {</p><p>​    public static void main(String[] args) {</p><p>​        String str = “北京市(朝阳区)(西城区)(海淀区)”;</p><p>​        Pattern p = Pattern.compile(“.*?(?=()”);</p><p>​        Matcher m = p.matcher(str);</p><p>​        if(m.find()) {</p><p>​            System.out.println(m.group());</p><p>​        }</p><p>​    }</p><p>}</p><p>说明：上面的正则表达式中使用了懒惰匹配和前瞻，如果不清楚这些内容，推荐读一下网上很有名的《正则表达式30分钟入门教程》。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Java 面试题系列篇-JDBC</title>
      <link href="/2018/10/20/Java-%E9%9D%A2%E8%AF%95%E9%A2%98%E7%B3%BB%E5%88%97%E7%AF%87-JDBC/"/>
      <url>/2018/10/20/Java-%E9%9D%A2%E8%AF%95%E9%A2%98%E7%B3%BB%E5%88%97%E7%AF%87-JDBC/</url>
      
        <content type="html"><![CDATA[<h2 id="JDBC"><a href="#JDBC" class="headerlink" title="JDBC"></a>JDBC</h2><h3 id="阐述JDBC操作数据库的步骤。"><a href="#阐述JDBC操作数据库的步骤。" class="headerlink" title="阐述JDBC操作数据库的步骤。"></a>阐述JDBC操作数据库的步骤。</h3><p>答：下面的代码以连接本机的Oracle数据库为例，演示JDBC操作数据库的步骤。</p><p>加载驱动。</p><p>​    Class.forName(“oracle.jdbc.driver.OracleDriver”);</p><p>创建连接。</p><p>​    Connection con = DriverManager.getConnection(“jdbc:oracle:thin:@localhost:1521:orcl”, “scott”, “tiger”);</p><p>创建语句。</p><p>​    PreparedStatement ps = con.prepareStatement(“select * from emp where sal between ? and ?”);</p><p>​    ps.setInt(1, 1000);</p><p>​    ps.setInt(2, 3000);</p><p>执行语句。</p><p>​    ResultSet rs = ps.executeQuery();</p><p>处理结果。</p><p>​    while(rs.next()) {</p><p>​        System.out.println(rs.getInt(“empno”) + “ - “ + rs.getString(“ename”));</p><p>​    }</p><p>关闭资源。</p><p>​    finally {</p><p>​        if(con != null) {</p><p>​            try {</p><p>​                con.close();</p><p>​            } catch (SQLException e) {</p><p>​                e.printStackTrace();</p><p>​            }</p><p>​        }</p><p>​    }</p><p>提示：关闭外部资源的顺序应该和打开的顺序相反，也就是说先关闭ResultSet、再关闭Statement、在关闭Connection。上面的代码只关闭了Connection（连接），虽然通常情况下在关闭连接时，连接上创建的语句和打开的游标也会关闭，但不能保证总是如此，因此应该按照刚才说的顺序分别关闭。此外，第一步加载驱动在JDBC 4.0中是可以省略的（自动从类路径中加载驱动），但是我们建议保留。</p><h3 id="Statement和PreparedStatement有什么区别？哪个性能更好？"><a href="#Statement和PreparedStatement有什么区别？哪个性能更好？" class="headerlink" title="Statement和PreparedStatement有什么区别？哪个性能更好？"></a>Statement和PreparedStatement有什么区别？哪个性能更好？</h3><p> 答：与Statement相比，①PreparedStatement接口代表预编译的语句，它主要的优势在于可以减少SQL的编译错误并增加SQL的安全性（减少SQL注射攻击的可能性）；②PreparedStatement中的SQL语句是可以带参数的，避免了用字符串连接拼接SQL语句的麻烦和不安全；③当批量处理SQL或频繁执行相同的查询时，PreparedStatement有明显的性能上的优势，由于数据库可以将编译优化后的SQL语句缓存起来，下次执行相同结构的语句时就会很快（不用再次编译和生成执行计划）。</p><p>补充：为了提供对存储过程的调用，JDBC API中还提供了CallableStatement接口。存储过程（Stored Procedure）是数据库中一组为了完成特定功能的SQL语句的集合，经编译后存储在数据库中，用户通过指定存储过程的名字并给出参数（如果该存储过程带有参数）来执行它。虽然调用存储过程会在网络开销、安全性、性能上获得很多好处，但是存在如果底层数据库发生迁移时就会有很多麻烦，因为每种数据库的存储过程在书写上存在不少的差别。</p><h3 id="使用JDBC操作数据库时，如何提升读取数据的性能？如何提升更新数据的性能？"><a href="#使用JDBC操作数据库时，如何提升读取数据的性能？如何提升更新数据的性能？" class="headerlink" title="使用JDBC操作数据库时，如何提升读取数据的性能？如何提升更新数据的性能？"></a>使用JDBC操作数据库时，如何提升读取数据的性能？如何提升更新数据的性能？</h3><p>答：要提升读取数据的性能，可以指定通过结果集（ResultSet）对象的setFetchSize()方法指定每次抓取的记录数（典型的空间换时间策略）；要提升更新数据的性能可以使用PreparedStatement语句构建批处理，将若干SQL语句置于一个批处理中执行。</p><h3 id="在进行数据库编程时，连接池有什么作用？"><a href="#在进行数据库编程时，连接池有什么作用？" class="headerlink" title="在进行数据库编程时，连接池有什么作用？"></a>在进行数据库编程时，连接池有什么作用？</h3><p> 答：由于创建连接和释放连接都有很大的开销（尤其是数据库服务器不在本地时，每次建立连接都需要进行TCP的三次握手，释放连接需要进行TCP四次握手，造成的开销是不可忽视的），为了提升系统访问数据库的性能，可以事先创建若干连接置于连接池中，需要时直接从连接池获取，使用结束时归还连接池而不必关闭连接，从而避免频繁创建和释放连接所造成的开销，这是典型的用空间换取时间的策略（浪费了空间存储连接，但节省了创建和释放连接的时间）。池化技术在Java开发中是很常见的，在使用线程时创建线程池的道理与此相同。基于Java的开源数据库连接池主要有：C3P0、Proxool、DBCP、BoneCP、Druid等。</p><p>补充：在计算机系统中时间和空间是不可调和的矛盾，理解这一点对设计满足性能要求的算法是至关重要的。大型网站性能优化的一个关键就是使用缓存，而缓存跟上面讲的连接池道理非常类似，也是使用空间换时间的策略。可以将热点数据置于缓存中，当用户查询这些数据时可以直接从缓存中得到，这无论如何也快过去数据库中查询。当然，缓存的置换策略等也会对系统性能产生重要影响，对于这个问题的讨论已经超出了这里要阐述的范围。</p><h3 id="什么是DAO模式？"><a href="#什么是DAO模式？" class="headerlink" title="什么是DAO模式？"></a>什么是DAO模式？</h3><p> 答：DAO（Data Access Object）顾名思义是一个为数据库或其他持久化机制提供了抽象接口的对象，在不暴露底层持久化方案实现细节的前提下提供了各种数据访问操作。在实际的开发中，应该将所有对数据源的访问操作进行抽象化后封装在一个公共API中。用程序设计语言来说，就是建立一个接口，接口中定义了此应用程序中将会用到的所有事务方法。在这个应用程序中，当需要和数据源进行交互的时候则使用这个接口，并且编写一个单独的类来实现这个接口，在逻辑上该类对应一个特定的数据存储。DAO模式实际上包含了两个模式，一是Data Accessor（数据访问器），二是Data Object（数据对象），前者要解决如何访问数据的问题，而后者要解决的是如何用对象封装数据。</p><h3 id="事务的ACID是指什么？"><a href="#事务的ACID是指什么？" class="headerlink" title="事务的ACID是指什么？"></a>事务的ACID是指什么？</h3><p>答： </p><ul><li>原子性(Atomic)：事务中各项操作，要么全做要么全不做，任何一项操作的失败都会导致整个事务的失败； </li><li>一致性(Consistent)：事务结束后系统状态是一致的； </li><li>隔离性(Isolated)：并发执行的事务彼此无法看到对方的中间状态； </li><li>持久性(Durable)：事务完成后所做的改动都会被持久化，即使发生灾难性的失败。通过日志和同步备份可以在故障发生后重建数据。</li></ul><p>补充：关于事务，在面试中被问到的概率是很高的，可以问的问题也是很多的。首先需要知道的是，只有存在并发数据访问时才需要事务。当多个事务访问同一数据时，可能会存在5类问题，包括3类数据读取问题（脏读、不可重复读和幻读）和2类数据更新问题（第1类丢失更新和第2类丢失更新）。</p><p>脏读（Dirty Read）：A事务读取B事务尚未提交的数据并在此基础上操作，而B事务执行回滚，那么A读取到的数据就是脏数据。</p><table><thead><tr><th>时间</th><th>转账事务A</th><th>取款事务B</th></tr></thead><tbody><tr><td>T1</td><td></td><td>开始事务</td></tr><tr><td>T2</td><td>开始事务</td><td></td></tr><tr><td>T3</td><td></td><td>查询账户余额为1000元</td></tr><tr><td>T4</td><td></td><td>取出500元余额修改为500元</td></tr><tr><td>T5</td><td>查询账户余额为500元（脏读）</td><td></td></tr><tr><td>T6</td><td></td><td>撤销事务余额恢复为1000元</td></tr><tr><td>T7</td><td>汇入100元把余额修改为600元</td><td></td></tr><tr><td>T8</td><td>提交事务</td></tr></tbody></table><p>不可重复读（Unrepeatable Read）：事务A重新读取前面读取过的数据，发现该数据已经被另一个已提交的事务B修改过了。</p><table><thead><tr><th>时间</th><th>转账事务A</th><th>取款事务B</th></tr></thead><tbody><tr><td>T1</td><td></td><td>开始事务</td></tr><tr><td>T2</td><td>开始事务</td><td></td></tr><tr><td>T3</td><td></td><td>查询账户余额为1000元</td></tr><tr><td>T4</td><td>查询账户余额为1000元</td><td></td></tr><tr><td>T5</td><td></td><td>取出100元修改余额为900元</td></tr><tr><td>T6</td><td></td><td>提交事务</td></tr><tr><td>T7</td><td>查询账户余额为900元（不可重复读）</td></tr></tbody></table><p>幻读（Phantom Read）：事务A重新执行一个查询，返回一系列符合查询条件的行，发现其中插入了被事务B提交的行。</p><table><thead><tr><th>时间</th><th>统计金额事务A</th><th>转账事务B</th></tr></thead><tbody><tr><td>T1</td><td></td><td>开始事务</td></tr><tr><td>T2</td><td>开始事务</td><td></td></tr><tr><td>T3</td><td>统计总存款为10000元</td><td></td></tr><tr><td>T4</td><td></td><td>新增一个存款账户存入100元</td></tr><tr><td>T5</td><td></td><td>提交事务</td></tr><tr><td>T6</td><td>再次统计总存款为10100元（幻读）</td></tr></tbody></table><p>第1类丢失更新：事务A撤销时，把已经提交的事务B的更新数据覆盖了。</p><table><thead><tr><th>时间</th><th>取款事务A</th><th>转账事务B</th></tr></thead><tbody><tr><td>T1</td><td>开始事务</td><td></td></tr><tr><td>T2</td><td></td><td>开始事务</td></tr><tr><td>T3</td><td>查询账户余额为1000元</td><td></td></tr><tr><td>T4</td><td></td><td>查询账户余额为1000元</td></tr><tr><td>T5</td><td></td><td>汇入100元修改余额为1100元</td></tr><tr><td>T6</td><td></td><td>提交事务</td></tr><tr><td>T7</td><td>取出100元将余额修改为900元</td><td></td></tr><tr><td>T8</td><td>撤销事务</td><td></td></tr><tr><td>T9</td><td>余额恢复为1000元（丢失更新）</td></tr></tbody></table><p>第2类丢失更新：事务A覆盖事务B已经提交的数据，造成事务B所做的操作丢失。</p><table><thead><tr><th>时间</th><th>转账事务A</th><th>取款事务B</th></tr></thead><tbody><tr><td>T1</td><td></td><td>开始事务</td></tr><tr><td>T2</td><td>开始事务</td><td></td></tr><tr><td>T3</td><td></td><td>查询账户余额为1000元</td></tr><tr><td>T4</td><td>查询账户余额为1000元</td><td></td></tr><tr><td>T5</td><td></td><td>取出100元将余额修改为900元</td></tr><tr><td>T6</td><td></td><td>提交事务</td></tr><tr><td>T7</td><td>汇入100元将余额修改为1100元</td><td></td></tr><tr><td>T8</td><td>提交事务</td><td></td></tr><tr><td>T9</td><td>查询账户余额为1100元（丢失更新）</td></tr></tbody></table><p>数据并发访问所产生的问题，在有些场景下可能是允许的，但是有些场景下可能就是致命的，数据库通常会通过锁机制来解决数据并发访问问题，按锁定对象不同可以分为表级锁和行级锁；按并发事务锁定关系可以分为共享锁和独占锁，具体的内容大家可以自行查阅资料进行了解。<br>直接使用锁是非常麻烦的，为此数据库为用户提供了自动锁机制，只要用户指定会话的事务隔离级别，数据库就会通过分析SQL语句然后为事务访问的资源加上合适的锁，此外，数据库还会维护这些锁通过各种手段提高系统的性能，这些对用户来说都是透明的（就是说你不用理解，事实上我确实也不知道）。ANSI/ISO SQL 92标准定义了4个等级的事务隔离级别，如下表所示：</p><table><thead><tr><th>隔离级别</th><th>脏读</th><th>不可重复读</th><th>幻读</th><th>第一类丢失更新</th><th>第二类丢失更新</th></tr></thead><tbody><tr><td>READ UNCOMMITED</td><td>允许</td><td>允许</td><td>允许</td><td>不允许</td><td>允许</td></tr><tr><td>READ COMMITTED</td><td>不允许</td><td>允许</td><td>允许</td><td>不允许</td><td>允许</td></tr><tr><td>REPEATABLE READ</td><td>不允许</td><td>不允许</td><td>允许</td><td>不允许</td><td>不允许</td></tr><tr><td>SERIALIZABLE</td><td>不允许</td><td>不允许</td><td>不允许</td><td>不允许</td><td>不允许</td></tr></tbody></table><p>需要说明的是，事务隔离级别和数据访问的并发性是对立的，事务隔离级别越高并发性就越差。所以要根据具体的应用来确定合适的事务隔离级别，这个地方没有万能的原则。</p><h3 id="JDBC中如何进行事务处理？"><a href="#JDBC中如何进行事务处理？" class="headerlink" title="JDBC中如何进行事务处理？"></a>JDBC中如何进行事务处理？</h3><p> 答：Connection提供了事务处理的方法，通过调用setAutoCommit(false)可以设置手动提交事务；当事务完成后用commit()显式提交事务；如果在事务处理过程中发生异常则通过rollback()进行事务回滚。除此之外，从JDBC 3.0中还引入了Savepoint（保存点）的概念，允许通过代码设置保存点并让事务回滚到指定的保存点。 </p><h3 id="JDBC能否处理Blob和Clob？"><a href="#JDBC能否处理Blob和Clob？" class="headerlink" title="JDBC能否处理Blob和Clob？"></a>JDBC能否处理Blob和Clob？</h3><p>答： Blob是指二进制大对象（Binary Large Object），而Clob是指大字符对象（Character Large Objec），因此其中Blob是为存储大的二进制数据而设计的，而Clob是为存储大的文本数据而设计的。JDBC的PreparedStatement和ResultSet都提供了相应的方法来支持Blob和Clob操作。下面的代码展示了如何使用JDBC操作LOB：<br>下面以MySQL数据库为例，创建一个张有三个字段的用户表，包括编号（id）、姓名（name）和照片（photo），建表语句如下：</p><p>create table tb_user</p><p>(</p><p>id int primary key auto_increment,</p><p>name varchar(20) unique not null,</p><p>photo longblob</p><p>);</p><p>下面的Java代码向数据库中插入一条记录：</p><p>import java.io.FileInputStream;</p><p>import java.io.IOException;</p><p>import java.io.InputStream;</p><p>import java.sql.Connection;</p><p>import java.sql.DriverManager;</p><p>import java.sql.PreparedStatement;</p><p>import java.sql.SQLException;</p><p>class JdbcLobTest {</p><p>​    public static void main(String[] args) {</p><p>​        Connection con = null;</p><p>​        try {</p><p>​            // 1. 加载驱动（Java6以上版本可以省略）</p><p>​            Class.forName(“com.mysql.jdbc.Driver”);</p><p>​            // 2. 建立连接</p><p>​            con = DriverManager.getConnection(“jdbc:mysql://localhost:3306/test”, “root”, “123456”);</p><p>​            // 3. 创建语句对象</p><p>​            PreparedStatement ps = con.prepareStatement(“insert into tb_user values (default, ?, ?)”);</p><p>​            ps.setString(1, “骆昊”);              // 将SQL语句中第一个占位符换成字符串</p><p>​            try (InputStream in = new FileInputStream(“test.jpg”)) {    // Java 7的TWR</p><p>​                ps.setBinaryStream(2, in);      // 将SQL语句中第二个占位符换成二进制流</p><p>​                // 4. 发出SQL语句获得受影响行数</p><p>​                System.out.println(ps.executeUpdate() == 1 ? “插入成功” : “插入失败”);</p><p>​            } catch(IOException e) {</p><p>​                System.out.println(“读取照片失败!”);</p><p>​            }</p><p>​        } catch (ClassNotFoundException | SQLException e) {     // Java 7的多异常捕获</p><p>​            e.printStackTrace();</p><p>​        } finally { // 释放外部资源的代码都应当放在finally中保证其能够得到执行</p><p>​            try {</p><p>​                if(con != null &amp;&amp; !con.isClosed()) {</p><p>​                    con.close();    // 5. 释放数据库连接 </p><p>​                    con = null;     // 指示垃圾回收器可以回收该对象</p><p>​                }</p><p>​            } catch (SQLException e) {</p><p>​                e.printStackTrace();</p><p>​            }</p><p>​        }</p><p>​    }</p><p>}</p>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Java 面试题系列篇-数据库</title>
      <link href="/2018/10/20/Java-%E9%9D%A2%E8%AF%95%E9%A2%98%E7%B3%BB%E5%88%97%E7%AF%87-%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
      <url>/2018/10/20/Java-%E9%9D%A2%E8%AF%95%E9%A2%98%E7%B3%BB%E5%88%97%E7%AF%87-%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>Java 面试题系列篇-反射</title>
      <link href="/2018/10/20/Java-%E9%9D%A2%E8%AF%95%E9%A2%98%E7%B3%BB%E5%88%97%E7%AF%87-%E5%8F%8D%E5%B0%84/"/>
      <url>/2018/10/20/Java-%E9%9D%A2%E8%AF%95%E9%A2%98%E7%B3%BB%E5%88%97%E7%AF%87-%E5%8F%8D%E5%B0%84/</url>
      
        <content type="html"><![CDATA[<p>反射 </p><p>获得一个类的类对象有哪些方式？ </p><p>答： </p><ul><li>方法1：类型.class，例如：String.class </li><li>方法2：对象.getClass()，例如：”hello”.getClass() </li><li>方法3：Class.forName()，例如：Class.forName(“java.lang.String”)</li></ul><p>如何通过反射创建对象？</p><p> 答： </p><ul><li>方法1：通过类对象调用newInstance()方法，例如：String.class.newInstance() </li><li>方法2：通过类对象的getConstructor()或getDeclaredConstructor()方法获得构造器（Constructor）对象并调用其newInstance()方法创建对象，例如：String.class.getConstructor(String.class).newInstance(“Hello”);</li></ul><p>如何通过反射获取和设置对象私有字段的值？</p><p> 答：可以通过类对象的getDeclaredField()方法字段（Field）对象，然后再通过字段对象的setAccessible(true)将其设置为可以访问，接下来就可以通过get/set方法来获取/设置字段的值了。下面的代码实现了一个反射的工具类，其中的两个静态方法分别用于获取和设置私有字段的值，字段可以是基本类型也可以是对象类型且支持多级对象操作，例如ReflectionUtil.get(dog, “owner.car.engine.id”);可以获得dog对象的主人的汽车的引擎的ID号。</p><p>import java.lang.reflect.Constructor;</p><p>import java.lang.reflect.Field;</p><p>import java.lang.reflect.Modifier;</p><p>import java.util.ArrayList;</p><p>import java.util.List;</p><p>/**</p><ul><li>反射工具类</li><li><p>@author 骆昊</p><p>*</p><p>*/</p></li></ul><p>public class ReflectionUtil {</p><pre><code>private ReflectionUtil() {    throw new AssertionError();}/** * 通过反射取对象指定字段(属性)的值 * @param target 目标对象 * @param fieldName 字段的名字 * @throws 如果取不到对象指定字段的值则抛出异常 * @return 字段的值 */public static Object getValue(Object target, String fieldName) {    Class&lt;?&gt; clazz = target.getClass();    String[] fs = fieldName.split(&quot;.&quot;);    try {        for(int i = 0; i &lt; fs.length - 1; i++) {            Field f = clazz.getDeclaredField(fs[i]);            f.setAccessible(true);            target = f.get(target);            clazz = target.getClass();        }        Field f = clazz.getDeclaredField(fs[fs.length - 1]);        f.setAccessible(true);        return f.get(target);    }    catch (Exception e) {        throw new RuntimeException(e);    }}/** * 通过反射给对象的指定字段赋值 * @param target 目标对象 * @param fieldName 字段的名称 * @param value 值 */public static void setValue(Object target, String fieldName, Object value) {    Class&lt;?&gt; clazz = target.getClass();    String[] fs = fieldName.split(&quot;.&quot;);    try {        for(int i = 0; i &lt; fs.length - 1; i++) {            Field f = clazz.getDeclaredField(fs[i]);            f.setAccessible(true);            Object val = f.get(target);            if(val == null) {                Constructor&lt;?&gt; c = f.getType().getDeclaredConstructor();                c.setAccessible(true);                val = c.newInstance();                f.set(target, val);            }            target = val;            clazz = target.getClass();        }        Field f = clazz.getDeclaredField(fs[fs.length - 1]);        f.setAccessible(true);        f.set(target, value);    }    catch (Exception e) {        throw new RuntimeException(e);    }}</code></pre><p>}</p><p>如何通过反射调用对象的方法？</p><p> 答：请看下面的代码：</p><p>import java.lang.reflect.Method;</p><p>class MethodInvokeTest {</p><pre><code>public static void main(String[] args) throws Exception {    String str = &quot;hello&quot;;    Method m = str.getClass().getMethod(&quot;toUpperCase&quot;);    System.out.println(m.invoke(str));  // HELLO}</code></pre><p>}</p>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Java 面试题系列篇(五)-IO流</title>
      <link href="/2018/10/20/Java-%E9%9D%A2%E8%AF%95%E9%A2%98%E7%B3%BB%E5%88%97%E7%AF%87-IO%E6%B5%81/"/>
      <url>/2018/10/20/Java-%E9%9D%A2%E8%AF%95%E9%A2%98%E7%B3%BB%E5%88%97%E7%AF%87-IO%E6%B5%81/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>Java 面试题系列篇(四)-集合</title>
      <link href="/2018/10/20/Java-%E9%9D%A2%E8%AF%95%E9%A2%98%E7%B3%BB%E5%88%97%E7%AF%87-%E9%9B%86%E5%90%88/"/>
      <url>/2018/10/20/Java-%E9%9D%A2%E8%AF%95%E9%A2%98%E7%B3%BB%E5%88%97%E7%AF%87-%E9%9B%86%E5%90%88/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>Java 面试题系列篇-常用API</title>
      <link href="/2018/10/20/Java-%E9%9D%A2%E8%AF%95%E9%A2%98%E7%B3%BB%E5%88%97%E7%AF%87-%E5%B8%B8%E7%94%A8API/"/>
      <url>/2018/10/20/Java-%E9%9D%A2%E8%AF%95%E9%A2%98%E7%B3%BB%E5%88%97%E7%AF%87-%E5%B8%B8%E7%94%A8API/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>Java 面试题系列篇-多线程</title>
      <link href="/2018/10/20/Java-%E9%9D%A2%E8%AF%95%E9%A2%98%E7%B3%BB%E5%88%97%E7%AF%87-%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
      <url>/2018/10/20/Java-%E9%9D%A2%E8%AF%95%E9%A2%98%E7%B3%BB%E5%88%97%E7%AF%87-%E5%A4%9A%E7%BA%BF%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h2><h3 id="什么是线程？"><a href="#什么是线程？" class="headerlink" title="什么是线程？"></a>什么是线程？</h3><p>线程是操作系统能够进行运算调度的最小单位，它被包含在进程之中，是进程中的实际运作单位，可以使用多线程对进行运算提速。</p><p>比如，如果一个线程完成一个任务要100毫秒，那么用十个线程完成改任务只需10毫秒</p><h3 id="什么是线程安全和线程不安全？"><a href="#什么是线程安全和线程不安全？" class="headerlink" title="什么是线程安全和线程不安全？"></a>什么是线程安全和线程不安全？</h3><p>通俗的说：加锁的就是是线程安全的，不加锁的就是是线程不安全的</p><p>线程安全</p><p>线程安全: 就是多线程访问时，采用了加锁机制，当一个线程访问该类的某个数据时，进行保护，其他线程不能进行访问，直到该线程读取完，其他线程才可使用。不会出现数据不一致或者数据污染。</p><p>一个线程安全的计数器类的同一个实例对象在被多个线程使用的情况下也不会出现计算失误。很显然你可以将集合类分成两组，线程安全和非线程安全的。 Vector 是用同步方法来实现线程安全的, 而和它相似的ArrayList不是线程安全的。</p><p>线程不安全</p><p>线程不安全：就是不提供数据访问保护，有可能出现多个线程先后更改数据造成所得到的数据是脏数据</p><p>如果你的代码所在的进程中有多个线程在同时运行，而这些线程可能会同时运行这段代码。如果每次运行结果和单线程运行的结果是一样的，而且其他的变量的值也和预期的是一样的，就是线程安全的。</p><p>线程安全问题都是由全局变量及静态变量引起的。 若每个线程中对全局变量、静态变量只有读操作，而无写操作，一般来说，这个全局变量是线程安全的；若有多个线程同时执行写操作，一般都需要考虑线程同步，否则的话就可能影响线程安全。</p><h3 id="什么是自旋锁？"><a href="#什么是自旋锁？" class="headerlink" title="什么是自旋锁？"></a>什么是自旋锁？</h3><p>基本概念</p><p>自旋锁是SMP架构中的一种low-level的同步机制。</p><p>当线程A想要获取一把自选锁而该锁又被其它线程锁持有时，线程A会在一个循环中自选以检测锁是不是已经可用了。</p><p>自选锁需要注意：</p><p>由于自旋时不释放CPU，因而持有自旋锁的线程应该尽快释放自旋锁，否则等待该自旋锁的线程会一直在那里自旋，这就会浪费CPU时间。</p><p>持有自旋锁的线程在sleep之前应该释放自旋锁以便其它线程可以获得自旋锁。</p><p>实现自旋锁</p><p>参考</p><p>segmentfault.com/q/101000000…</p><p>一个简单的while就可以满足你的要求。</p><p>目前的JVM实现自旋会消耗CPU，如果长时间不调用doNotify方法，doWait方法会一直自旋，CPU会消耗太大。</p><p>public class MyWaitNotify3{</p><p>  MonitorObject myMonitorObject = new MonitorObject();</p><p>  boolean wasSignalled = false;</p><p>  public void doWait(){</p><p>​    synchronized(myMonitorObject){</p><p>​      while(!wasSignalled){</p><p>​        try{</p><p>​          myMonitorObject.wait();</p><p>​         } catch(InterruptedException e){…}</p><p>​      }</p><p>​      //clear signal and continue running.</p><p>​      wasSignalled = false;</p><p>​    }</p><p>  }</p><p>  public void doNotify(){</p><p>​    synchronized(myMonitorObject){</p><p>​      wasSignalled = true;</p><p>​      myMonitorObject.notify();</p><p>​    }</p><p>  }</p><p>}</p><h3 id="什么是Java内存模型？"><a href="#什么是Java内存模型？" class="headerlink" title="什么是Java内存模型？"></a>什么是Java内存模型？</h3><p>Java内存模型描述了在多线程代码中哪些行为是合法的，以及线程如何通过内存进行交互。它描述了“程序中的变量“ 和 ”从内存或者寄存器获取或存储它们的底层细节”之间的关系。Java内存模型通过使用各种各样的硬件和编译器的优化来正确实现以上事情。</p><p>Java包含了几个语言级别的关键字，包括：volatile, final以及synchronized，目的是为了帮助程序员向编译器描述一个程序的并发需求。Java内存模型定义了volatile和synchronized的行为，更重要的是保证了同步的java程序在所有的处理器架构下面都能正确的运行。</p><p>“一个线程的写操作对其他线程可见”这个问题是因为编译器对代码进行重排序导致的。例如，只要代码移动不会改变程序的语义，当编译器认为程序中移动一个写操作到后面会更有效的时候，编译器就会对代码进行移动。如果编译器推迟执行一个操作，其他线程可能在这个操作执行完之前都不会看到该操作的结果，这反映了缓存的影响。</p><p>此外，写入内存的操作能够被移动到程序里更前的时候。在这种情况下，其他的线程在程序中可能看到一个比它实际发生更早的写操作。所有的这些灵活性的设计是为了通过给编译器，运行时或硬件灵活性使其能在最佳顺序的情况下来执行操作。在内存模型的限定之内，我们能够获取到更高的性能。</p><p>看下面代码展示的一个简单例子：</p><p>ClassReordering {</p><p>​    </p><p>​    int x = 0, y = 0;</p><p>​    public void writer() {</p><p>​        x = 1;</p><p>​        y = 2;</p><p>​    }</p><p>​    public void reader() {</p><p>​        int r1 = y;</p><p>​        int r2 = x;</p><p>​    }</p><p>}复制代码</p><p>让我们看在两个并发线程中执行这段代码，读取Y变量将会得到2这个值。因为这个写入比写到X变量更晚一些，程序员可能认为读取X变量将肯定会得到1。但是，写入操作可能被重排序过。如果重排序发生了，那么，就能发生对Y变量的写入操作，读取两个变量的操作紧随其后，而且写入到X这个操作能发生。程序的结果可能是r1变量的值是2，但是r2变量的值为0。</p><p>但是面试官，有时候不这么认为，认为就是JVM内存结构</p><p>JVM内存结构主要有三大块：堆内存、方法区和栈。</p><p>堆内存是JVM中最大的一块由年轻代和老年代组成，而年轻代内存又被分成三部分，Eden空间、From Survivor空间、To Survivor空间,默认情况下年轻代按照8:1:1的比例来分配；方法区存储类信息、常量、静态变量等数据，是线程共享的区域，为与Java堆区分，方法区还有一个别名Non-Heap(非堆)；栈又分为java虚拟机栈和本地方法栈主要用于方法的执行。</p><p>JAVA的JVM的内存可分为3个区：堆(heap)、栈(stack)和方法区(method)</p><p>java堆（Java Heap）</p><p>可通过参数 -Xms 和-Xmx设置</p><p>Java堆是被所有线程共享,是Java虚拟机所管理的内存中最大的一块 Java堆在虚拟机启动时创建。</p><p>Java堆唯一的目的是存放对象实例，几乎所有的对象实例和数组都在这里。</p><p>Java堆为了便于更好的回收和分配内存，可以细分为：新生代和老年代；再细致一点的有Eden空间、From Survivor空间、To Survivor区。</p><p>新生代：包括Eden区、From Survivor区、To Survivor区，系统默认大小Eden:Survivor=8:1。</p><p>老年代：在年轻代中经历了N次垃圾回收后仍然存活的对象，就会被放到年老代中。因此，可以认为年老代中存放的都是一些生命周期较长的对象。</p><p>Survivor空间等Java堆可以处在物理上不连续的内存空间中，只要逻辑上是连续的即可（就像我们的磁盘空间一样。在实现时，既可以实现成固定大小的，也可以是可扩展的）。</p><p>据Java虚拟机规范的规定，当方法区无法满足内存分配需求时，将抛出OutOfMemoryError异常。</p><p>java虚拟机栈(stack)</p><p>可通过参数 栈帧是方法运行期的基础数据结构栈容量可由-Xss设置</p><p>1.Java虚拟机栈是线程私有的，它的生命周期与线程相同。</p><p>每一个方法被调用直至执行完成的过程，就对应着一个栈帧在虚拟机栈中从入栈到出栈的过程。</p><p>虚拟机栈是执行Java方法的内存模型(也就是字节码)服务：每个方法在执行的同时都会创建一个栈帧，用于存储 局部变量表、操作数栈、动态链接、方法出口等信息。</p><p>局部变量表：32位变量槽，存放了编译期可知的各种基本数据类型、对象引用、returnAddress类型。</p><p>操作数栈：基于栈的执行引擎，虚拟机把操作数栈作为它的工作区，大多数指令都要从这里弹出数据、执行运算，然后把结果压回操作数栈。</p><p>动态连接：每个栈帧都包含一个指向运行时常量池（方法区的一部分）中该栈帧所属方法的引用。持有这个引用是为了支持方法调用过程中的动态连接。Class文件的常量池中有大量的符号引用，字节码中的方法调用指令就以常量池中指向方法的符号引用为参数。这些符号引用一部分会在类加载阶段或第一次使用的时候转化为直接引用，这种转化称为静态解析。另一部分将在每一次的运行期间转化为直接应用，这部分称为动态连接</p><p>方法出口：返回方法被调用的位置，恢复上层方法的局部变量和操作数栈，如果无返回值，则把它压入调用者的操作数栈。</p><p>局部变量表所需的内存空间在编译期间完成分配，当进入一个方法时，这个方法需要在帧中分配多大的局部变量空间是完全确定的。</p><p>在方法运行期间不会改变局部变量表的大小。主要存放了编译期可知的各种基本数据类型、对象引用 （reference类型）、returnAddress类型）。</p><p>java虚拟机栈,规定了两种异常状况：</p><p>如果线程请求的深度大于虚拟机所允许的深度，将抛出StackOverflowError异常。</p><p>如果虚拟机栈动态扩展，而扩展时无法申请到足够的内存，就会抛出OutOfMemoryError异常。</p><p>本地方法栈</p><p>可通过参数 栈容量可由-Xss设置</p><p>虚拟机栈为虚拟机执行Java方法（也就是字节码）服务。</p><p>本地方法栈则是为虚拟机使用到的Native方法服务。有的虚拟机（譬如Sun HotSpot虚拟机）直接就把本地方法栈和虚拟机栈合二为一</p><p>方法区（Method Area）</p><p>可通过参数-XX:MaxPermSize设置</p><p>线程共享内存区域，用于储存已被虚拟机加载的类信息、常量、静态变量，即编译器编译后的代码，方法区也称持久代（Permanent Generation）。</p><p>虽然Java虚拟机规范把方法区描述为堆的一个逻辑部分，但是它却有一个别名叫做Non-Heap（非堆），目的应该是与Java堆区分开来。</p><p>如何实现方法区，属于虚拟机的实现细节，不受虚拟机规范约束。</p><p>方法区主要存放java类定义信息，与垃圾回收关系不大，方法区可以选择不实现垃圾回收,但不是没有垃圾回收。</p><p>方法区域的内存回收目标主要是针对常量池的回收和对类型的卸载。</p><p>运行时常量池，也是方法区的一部分，虚拟机加载Class后把常量池中的数据放入运行时常量池。</p><p>运行时常量池</p><p>JDK1.6之前字符串常量池位于方法区之中。 JDK1.7字符串常量池已经被挪到堆之中。</p><p>可通过参数-XX:PermSize和-XX:MaxPermSize设置</p><p>常量池（Constant Pool）：常量池数据编译期被确定，是Class文件中的一部分。存储了类、方法、接口等中的常量，当然也包括字符串常量。</p><p>字符串池/字符串常量池（String Pool/String Constant Pool）：是常量池中的一部分，存储编译期类中产生的字符串类型数据。</p><p>运行时常量池（Runtime Constant Pool）：方法区的一部分，所有线程共享。虚拟机加载Class后把常量池中的数据放入到运行时常量池。常量池：可以理解为Class文件之中的资源仓库，它是Class文件结构中与其他项目资源关联最多的数据类型。</p><p>常量池中主要存放两大类常量：字面量（Literal）和符号引用（Symbolic Reference）。</p><p>字面量：文本字符串、声明为final的常量值等。</p><p>符号引用：类和接口的完全限定名（Fully Qualified Name）、字段的名称和描述符（Descriptor）、方法的名称和描述符。</p><p>直接内存</p><p>可通过-XX:MaxDirectMemorySize指定，如果不指定，则默认与Java堆的最大值（-Xmx指定）一样。</p><p>直接内存（Direct Memory）并不是虚拟机运行时数据区的一部分，也不是Java虚拟机规范中定义的内存区域，但是这部分内存也被频繁地使用，而且也可能导致OutOfMemoryError异常出现。</p><p>总结的简单一点</p><p>java堆（Java Heap）</p><p>可通过参数 -Xms 和-Xmx设置</p><p>Java堆是被所有线程共享,是Java虚拟机所管理的内存中最大的一块 Java堆在虚拟机启动时创建</p><p>Java堆唯一的目的是存放对象实例，几乎所有的对象实例和数组都在这里</p><p>Java堆为了便于更好的回收和分配内存，可以细分为：新生代和老年代；再细致一点的有Eden空间、From Survivor空间、To Survivor区</p><p>新生代：包括Eden区、From Survivor区、To Survivor区，系统默认大小Eden:Survivor=8:1。</p><p>老年代：在年轻代中经历了N次垃圾回收后仍然存活的对象，就会被放到年老代中。因此，可以认为年老代中存放的都是一些生命周期较长的对象。</p><p>java虚拟机栈(stack)</p><p>可通过参数 栈帧是方法运行期的基础数据结构栈容量可由-Xss设置</p><p>Java虚拟机栈是线程私有的，它的生命周期与线程相同。</p><p>每一个方法被调用直至执行完成的过程，就对应着一个栈帧在虚拟机栈中从入栈到出栈的过程。</p><p>虚拟机栈是执行Java方法的内存模型(也就是字节码)服务：每个方法在执行的同时都会创建一个栈帧，用于存储 局部变量表、操作数栈、动态链接、方法出口等信息</p><p>方法区（Method Area）</p><p>可通过参数-XX:MaxPermSize设置</p><p>线程共享内存区域），用于储存已被虚拟机加载的类信息、常量、静态变量，即编译器编译后的代码，方法区也称持久代（Permanent Generation）。</p><p>方法区主要存放java类定义信息，与垃圾回收关系不大，方法区可以选择不实现垃圾回收,但不是没有垃圾回收。</p><p>方法区域的内存回收目标主要是针对常量池的回收和对类型的卸载。</p><p>运行时常量池，也是方法区的一部分，虚拟机加载Class后把常量池中的数据放入运行时常量池。</p><h3 id="什么是CAS？"><a href="#什么是CAS？" class="headerlink" title="什么是CAS？"></a>什么是CAS？</h3><p>CAS（compare and swap）的缩写，中文翻译成比较并交换。</p><p>CAS 不通过JVM,直接利用java本地方 JNI（Java Native Interface为JAVA本地调用）,直接调用CPU 的cmpxchg（是汇编指令）指令。</p><p>利用CPU的CAS指令，同时借助JNI来完成Java的非阻塞算法,实现原子操作。其它原子操作都是利用类似的特性完成的。</p><p>整个java.util.concurrent都是建立在CAS之上的，因此对于synchronized阻塞算法，J.U.C在性能上有了很大的提升。</p><p>CAS是项乐观锁技术，当多个线程尝试使用CAS同时更新同一个变量时，只有其中一个线程能更新变量的值，而其它线程都失败，失败的线程并不会被挂起，而是被告知这次竞争中失败，并可以再次尝试。</p><p>CAS应用</p><p>CAS有3个操作数，内存值V，旧的预期值A，要修改的新值B。当且仅当预期值A和内存值V相同时，将内存值V修改为B，否则什么都不做。</p><p>CAS优点</p><p>确保对内存的读-改-写操作都是原子操作执行</p><p>CAS缺点</p><p>CAS虽然很高效的解决原子操作，但是CAS仍然存在三大问题。ABA问题，循环时间长开销大和只能保证一个共享变量的原子操作</p><p>总结</p><p>使用CAS在线程冲突严重时，会大幅降低程序性能；CAS只适合于线程冲突较少的情况使用。</p><p>synchronized在jdk1.6之后，已经改进优化。synchronized的底层实现主要依靠Lock-Free的队列，基本思路是自旋后阻塞，竞争切换后继续竞争锁，稍微牺牲了公平性，但获得了高吞吐量。在线程冲突较少的情况下，可以获得和CAS类似的性能；而线程冲突严重的情况下，性能远高于CAS。</p><p>参考 blog.52itstyle.com/archives/94…</p><h3 id="什么是乐观锁和悲观锁？"><a href="#什么是乐观锁和悲观锁？" class="headerlink" title="什么是乐观锁和悲观锁？"></a>什么是乐观锁和悲观锁？</h3><p>悲观锁</p><p>Java在JDK1.5之前都是靠synchronized关键字保证同步的，这种通过使用一致的锁定协议来协调对共享状态的访问，可以确保无论哪个线程持有共享变量的锁，都采用独占的方式来访问这些变量。独占锁其实就是一种悲观锁，所以可以说synchronized是悲观锁。</p><p>乐观锁</p><p>乐观锁（ Optimistic Locking）其实是一种思想。相对悲观锁而言，乐观锁假设认为数据一般情况下不会造成冲突，所以在数据进行提交更新的时候，才会正式对数据的冲突与否进行检测，如果发现冲突了，则让返回用户错误的信息，让用户决定如何去做。</p><h3 id="什么是AQS？"><a href="#什么是AQS？" class="headerlink" title="什么是AQS？"></a>什么是AQS？</h3><p>AbstractQueuedSynchronizer简称AQS，是一个用于构建锁和同步容器的框架。事实上concurrent包内许多类都是基于AQS构建，例如ReentrantLock，Semaphore，CountDownLatch，ReentrantReadWriteLock，FutureTask等。AQS解决了在实现同步容器时设计的大量细节问题。</p><p>AQS使用一个FIFO的队列表示排队等待锁的线程，队列头节点称作“哨兵节点”或者“哑节点”，它不与任何线程关联。其他的节点与等待线程关联，每个节点维护一个等待状态waitStatus。</p><p>CAS 原子操作在concurrent包的实现</p><p>参考 blog.52itstyle.com/archives/94…</p><p>由于java的CAS同时具有 volatile 读和volatile写的内存语义，因此Java线程之间的通信现在有了下面四种方式：</p><p>A线程写volatile变量，随后B线程读这个volatile变量。</p><p>A线程写volatile变量，随后B线程用CAS更新这个volatile变量。</p><p>A线程用CAS更新一个volatile变量，随后B线程用CAS更新这个volatile变量。</p><p>A线程用CAS更新一个volatile变量，随后B线程读这个volatile变量。</p><p>Java的CAS会使用现代处理器上提供的高效机器级别原子指令，这些原子指令以原子方式对内存执行读-改-写操作，这是在多处理器中实现同步的关键（从本质上来说，能够支持原子性读-改-写指令的计算机器，是顺序计算图灵机的异步等价机器，因此任何现代的多处理器都会去支持某种能对内存执行原子性读-改-写操作的原子指令）。同时，volatile变量的读/写和CAS可以实现线程之间的通信。把这些特性整合在一起，就形成了整个concurrent包得以实现的基石。如果我们仔细分析concurrent包的源代码实现，会发现一个通用化的实现模式：</p><p>首先，声明共享变量为volatile； 然后，使用CAS的原子条件更新来实现线程之间的同步；</p><p>同时，配合以volatile的读/写和CAS所具有的volatile读和写的内存语义来实现线程之间的通信。</p><p>AQS，非阻塞数据结构和原子变量类（Java.util.concurrent.atomic包中的类），这些concurrent包中的基础类都是使用这种模式来实现的，而concurrent包中的高层类又是依赖于这些基础类来实现的。从整体来看，concurrent包的实现示意图如下：</p><p>AQS没有锁之类的概念，它有个state变量，是个int类型，在不同场合有着不同含义。</p><p>AQS围绕state提供两种基本操作“获取”和“释放”，有条双向队列存放阻塞的等待线程，并提供一系列判断和处理方法，简单说几点：</p><p>state是独占的，还是共享的；</p><p>state被获取后，其他线程需要等待；</p><p>state被释放后，唤醒等待线程；</p><p>线程等不及时，如何退出等待。</p><p>至于线程是否可以获得state，如何释放state，就不是AQS关心的了，要由子类具体实现。</p><p>AQS中还有一个表示状态的字段state，例如ReentrantLocky用它表示线程重入锁的次数，Semaphore用它表示剩余的许可数量，FutureTask用它表示任务的状态。对state变量值的更新都采用CAS操作保证更新操作的原子性。</p><p>AbstractQueuedSynchronizer继承了AbstractOwnableSynchronizer，这个类只有一个变量：exclusiveOwnerThread，表示当前占用该锁的线程，并且提供了相应的get，set方法。</p><p>ReentrantLock实现原理</p><p><a href="http://www.cnblogs.com/maypattis/p…" target="_blank" rel="noopener">www.cnblogs.com/maypattis/p…</a></p><h3 id="什么是原子操作？在Java-Concurrency-API中有哪些原子类-atomic-classes-？"><a href="#什么是原子操作？在Java-Concurrency-API中有哪些原子类-atomic-classes-？" class="headerlink" title="什么是原子操作？在Java Concurrency API中有哪些原子类(atomic classes)？"></a>什么是原子操作？在Java Concurrency API中有哪些原子类(atomic classes)？</h3><p>原子操作是指一个不受其他操作影响的操作任务单元。原子操作是在多线程环境下避免数据不一致必须的手段。</p><p>int++并不是一个原子操作，所以当一个线程读取它的值并加1时，另外一个线程有可能会读到之前的值，这就会引发错误。</p><p>为了解决这个问题，必须保证增加操作是原子的，在JDK1.5之前我们可以使用同步技术来做到这一点。</p><p>到JDK1.5，java.util.concurrent.atomic包提供了int和long类型的装类，它们可以自动的保证对于他们的操作是原子的并且不需要使用同步。   </p><h3 id="什么是Executors框架？"><a href="#什么是Executors框架？" class="headerlink" title="什么是Executors框架？"></a>什么是Executors框架？</h3><p>Executor框架同java.util.concurrent.Executor 接口在Java 5中被引入。</p><p>Executor框架是一个根据一组执行策略调用，调度，执行和控制的异步任务的框架。</p><p>无限制的创建线程会引起应用程序内存溢出。所以创建一个线程池是个更好的的解决方案，因为可以限制线程的数量并且可以回收再利用这些线程。</p><p>利用Executors框架可以非常方便的创建一个线程池，</p><p>Java通过Executors提供四种线程池，分别为：</p><p>newCachedThreadPool创建一个可缓存线程池，如果线程池长度超过处理需要，可灵活回收空闲线程，若无可回收，则新建线程。</p><p>newFixedThreadPool 创建一个定长线程池，可控制线程最大并发数，超出的线程会在队列中等待。</p><p>newScheduledThreadPool 创建一个定长线程池，支持定时及周期性任务执行。</p><p>newSingleThreadExecutor 创建一个单线程化的线程池，它只会用唯一的工作线程来执行任务，保证所有任务按照指定顺序(FIFO, LIFO, 优先级)执行。   </p><h3 id="什么是阻塞队列？如何使用阻塞队列来实现生产者-消费者模型？"><a href="#什么是阻塞队列？如何使用阻塞队列来实现生产者-消费者模型？" class="headerlink" title="什么是阻塞队列？如何使用阻塞队列来实现生产者-消费者模型？"></a>什么是阻塞队列？如何使用阻塞队列来实现生产者-消费者模型？</h3><p>JDK7提供了7个阻塞队列。（也属于并发容器）</p><p>ArrayBlockingQueue ：一个由数组结构组成的有界阻塞队列。</p><p>LinkedBlockingQueue ：一个由链表结构组成的有界阻塞队列。</p><p>PriorityBlockingQueue ：一个支持优先级排序的无界阻塞队列。</p><p>DelayQueue：一个使用优先级队列实现的无界阻塞队列。</p><p>SynchronousQueue：一个不存储元素的阻塞队列。</p><p>LinkedTransferQueue：一个由链表结构组成的无界阻塞队列。</p><p>LinkedBlockingDeque：一个由链表结构组成的双向阻塞队列。</p><p>什么是阻塞队列？</p><p>阻塞队列是一个在队列基础上又支持了两个附加操作的队列。</p><p>2个附加操作：</p><p>支持阻塞的插入方法：队列满时，队列会阻塞插入元素的线程，直到队列不满。 支持阻塞的移除方法：队列空时，获取元素的线程会等待队列变为非空。</p><p>阻塞队列的应用场景</p><p>阻塞队列常用于生产者和消费者的场景，生产者是向队列里添加元素的线程，消费者是从队列里取元素的线程。简而言之，阻塞队列是生产者用来存放元素、消费者获取元素的容器。</p><p>几个方法</p><p>在阻塞队列不可用的时候，上述2个附加操作提供了四种处理方法</p><table><thead><tr><th>方法\处理方式</th><th>抛出异常</th><th>返回特殊值</th><th>一直阻塞</th><th>超时退出</th></tr></thead><tbody><tr><td>插入方法</td><td>add(e)</td><td>offer(e)</td><td>put(e)</td><td>offer(e,time,unit)</td></tr><tr><td>移除方法</td><td>remove()</td><td>poll()</td><td>take()</td><td>poll(time,unit)</td></tr><tr><td>检查方法</td><td>element()</td><td>peek()</td><td>不可用</td><td>不可用</td></tr></tbody></table><p>JAVA里的阻塞队列</p><p>JDK 7 提供了7个阻塞队列，如下</p><p>1、ArrayBlockingQueue 数组结构组成的有界阻塞队列。</p><p>此队列按照先进先出（FIFO）的原则对元素进行排序，但是默认情况下不保证线程公平的访问队列，即如果队列满了，那么被阻塞在外面的线程对队列访问的顺序是不能保证线程公平（即先阻塞，先插入）的。</p><p>2、LinkedBlockingQueue一个由链表结构组成的有界阻塞队列</p><p>此队列按照先出先进的原则对元素进行排序</p><p>3、PriorityBlockingQueue支持优先级的无界阻塞队列</p><p>4、DelayQueue支持延时获取元素的无界阻塞队列，即可以指定多久才能从队列中获取当前元素</p><p>5、SynchronousQueue不存储元素的阻塞队列，每一个put必须等待一个take操作，否则不能继续添加元素。并且他支持公平访问队列。</p><p>6、LinkedTransferQueue由链表结构组成的无界阻塞TransferQueue队列。相对于其他阻塞队列，多了tryTransfer和transfer方法</p><p>transfer方法</p><p>如果当前有消费者正在等待接收元素（take或者待时间限制的poll方法），transfer可以把生产者传入的元素立刻传给消费者。如果没有消费者等待接收元素，则将元素放在队列的tail节点，并等到该元素被消费者消费了才返回。</p><p>tryTransfer方法</p><p>用来试探生产者传入的元素能否直接传给消费者。，如果没有消费者在等待，则返回false。和上述方法的区别是该方法无论消费者是否接收，方法立即返回。而transfer方法是必须等到消费者消费了才返回。</p><p>7、LinkedBlockingDeque链表结构的双向阻塞队列，优势在于多线程入队时，减少一半的竞争。</p><p>如何使用阻塞队列来实现生产者-消费者模型？</p><p>通知模式实现：所谓通知模式，就是当生产者往满的队列里添加元素时会阻塞住生产者，当消费者消费了一个队列中的元素后，会通知生产者当前队列可用。</p><p>使用BlockingQueue解决生产者消费者问题</p><p>为什么BlockingQueue适合解决生产者消费者问题</p><p>任何有效的生产者-消费者问题解决方案都是通过控制生产者put()方法（生产资源）和消费者take()方法（消费资源）的调用来实现的，一旦你实现了对方法的阻塞控制，那么你将解决该问题。</p><p>Java通过BlockingQueue提供了开箱即用的支持来控制这些方法的调用（一个线程创建资源，另一个消费资源）。java.util.concurrent包下的BlockingQueue接口是一个线程安全的可用于存取对象的队列。</p><p>BlockingQueue是一种数据结构，支持一个线程往里存资源，另一个线程从里取资源。这正是解决生产者消费者问题所需要的，那么让我们开始解决该问题吧。</p><p>生产者</p><p>以下代码用于生产者线程</p><p>package io.ymq.example.thread;</p><p>import java.util.concurrent.BlockingQueue;</p><p>/**</p><ul><li><p>描述:生产者</p><p>*</p></li><li><p>@author yanpenglei</p></li><li><p>@create 2018-03-14 15:52</p><p>**/class Producer implements Runnable {</p></li></ul><p>​    protected BlockingQueue<object> queue;</object></p><p>​    Producer(BlockingQueue<object> theQueue) {</object></p><p>​        this.queue = theQueue;</p><p>​    }</p><p>​    public void run() {</p><p>​        try {</p><p>​            while (true) {</p><p>​                Object justProduced = getResource();</p><p>​                queue.put(justProduced);</p><p>​                System.out.println(“生产者资源队列大小= “ + queue.size());</p><p>​            }</p><p>​        } catch (InterruptedException ex) {</p><p>​            System.out.println(“生产者 中断”);</p><p>​        }</p><p>​    }</p><p>​    Object getResource() {</p><p>​        try {</p><p>​            Thread.sleep(100);</p><p>​        } catch (InterruptedException ex) {</p><p>​            System.out.println(“生产者 读 中断”);</p><p>​        }</p><p>​        return new Object();</p><p>​    }</p><p>}复制代码</p><p>消费者</p><p>以下代码用于消费者线程</p><p>package io.ymq.example.thread;</p><p>import java.util.concurrent.BlockingQueue;</p><p>/**</p><ul><li><p>描述: 消费者</p><p>*</p></li><li><p>@author yanpenglei</p></li><li><p>@create 2018-03-14 15:54</p><p>**/class Consumer implements Runnable {</p></li></ul><p>​    protected BlockingQueue<object> queue;</object></p><p>​    Consumer(BlockingQueue<object> theQueue) {</object></p><p>​        this.queue = theQueue;</p><p>​    }</p><p>​    public void run() {</p><p>​        try {</p><p>​            while (true) {</p><p>​                Object obj = queue.take();</p><p>​                System.out.println(“消费者 资源 队列大小 “ + queue.size());</p><p>​                take(obj);</p><p>​            }</p><p>​        } catch (InterruptedException ex) {</p><p>​            System.out.println(“消费者 中断”);</p><p>​        }</p><p>​    }</p><p>​    void take(Object obj) {</p><p>​        try {</p><p>​            Thread.sleep(100); // simulate time passing</p><p>​        } catch (InterruptedException ex) {</p><p>​            System.out.println(“消费者 读 中断”);</p><p>​        }</p><p>​        System.out.println(“消费对象 “ + obj);</p><p>​    }</p><p>}复制代码</p><p>测试该解决方案是否运行正常</p><p>package io.ymq.example.thread;import java.util.concurrent.BlockingQueue;import java.util.concurrent.LinkedBlockingQueue;</p><p>/**</p><ul><li><p>描述: 测试</p><p>*</p></li><li><p>@author yanpenglei</p></li><li><p>@create 2018-03-14 15:58</p><p>**/public class ProducerConsumerExample {</p></li></ul><p>​    public static void main(String[] args) throws InterruptedException {</p><p>​        int numProducers = 4;</p><p>​        int numConsumers = 3;</p><p>​        BlockingQueue<object> myQueue = new LinkedBlockingQueue<object>(5);</object></object></p><p>​        for (int i = 0; i &lt; numProducers; i++) {</p><p>​            new Thread(new Producer(myQueue)).start();</p><p>​        }</p><p>​        for (int i = 0; i &lt; numConsumers; i++) {</p><p>​            new Thread(new Consumer(myQueue)).start();</p><p>​        }</p><p>​        Thread.sleep(1000);</p><p>​        System.exit(0);</p><p>​    }</p><p>}复制代码</p><p>运行结果</p><p>生产者资源队列大小= 1</p><p>生产者资源队列大小= 1</p><p>消费者 资源 队列大小 1</p><p>生产者资源队列大小= 1</p><p>消费者 资源 队列大小 1</p><p>消费者 资源 队列大小 1</p><p>生产者资源队列大小= 1</p><p>生产者资源队列大小= 3</p><p>消费对象 java.lang.Object@1e1aa52b</p><p>生产者资源队列大小= 2</p><p>生产者资源队列大小= 5</p><p>消费对象 java.lang.Object@6e740a76</p><p>消费对象 java.lang.Object@697853f6</p><p>……</p><p>消费对象 java.lang.Object@41a10cbc</p><p>消费对象 java.lang.Object@4963c8d1</p><p>消费者 资源 队列大小 5</p><p>生产者资源队列大小= 5</p><p>生产者资源队列大小= 5</p><p>消费者 资源 队列大小 4</p><p>消费对象 java.lang.Object@3e49c35d</p><p>消费者 资源 队列大小 4</p><p>生产者资源队列大小= 5复制代码</p><p>从输出结果中,我们可以发现队列大小永远不会超过5，消费者线程消费了生产者生产的资源。</p><h3 id="什么是Callable和Future"><a href="#什么是Callable和Future" class="headerlink" title="什么是Callable和Future?"></a>什么是Callable和Future?</h3><p>Callable 和 Future 是比较有趣的一对组合。当我们需要获取线程的执行结果时，就需要用到它们。Callable用于产生结果，Future用于获取结果。</p><p>Callable接口使用泛型去定义它的返回类型。Executors类提供了一些有用的方法去在线程池中执行Callable内的任务。由于Callable任务是并行的，必须等待它返回的结果。java.util.concurrent.Future对象解决了这个问题。</p><p>在线程池提交Callable任务后返回了一个Future对象，使用它可以知道Callable任务的状态和得到Callable返回的执行结果。Future提供了get()方法，等待Callable结束并获取它的执行结果。</p><p>代码示例</p><p>Callable 是一个接口，它只包含一个call()方法。Callable是一个返回结果并且可能抛出异常的任务。</p><p>为了便于理解，我们可以将Callable比作一个Runnable接口，而Callable的call()方法则类似于Runnable的run()方法。</p><p>public class CallableFutureTest {</p><p>​    public static void main(String[] args) throws InterruptedException, ExecutionException {</p><p>​        System.out.println(“start main thread “);</p><p>​        ExecutorService exec = Executors.newFixedThreadPool(2);</p><p>​        //新建一个Callable 任务，并将其提交到一个ExecutorService. 将返回一个描述任务情况的Future.</p><p>​        Callable<string> call = new Callable<string>() {</string></string></p><p>​            @Override</p><p>​            public String call() throws Exception {</p><p>​                System.out.println(“start new thread “);</p><p>​                Thread.sleep(5000);</p><p>​                System.out.println(“end new thread “);</p><p>​                return “我是返回的内容”;</p><p>​            }</p><p>​        };</p><p>​        Future<string> task = exec.submit(call);</string></p><p>​        Thread.sleep(1000);</p><p>​        String retn = task.get();</p><p>​        //关闭线程池</p><p>​        exec.shutdown();</p><p>​        System.out.println(retn + “–end main thread”);</p><p>​    }</p><p>}复制代码</p><p>控制台打印</p><p>start main thread </p><p>start new thread </p><p>end new thread </p><p>我是返回的内容–end main thread复制代码</p><h3 id="什么是FutureTask"><a href="#什么是FutureTask" class="headerlink" title="什么是FutureTask?"></a>什么是FutureTask?</h3><p>FutureTask可用于异步获取执行结果或取消执行任务的场景。通过传入Runnable或者Callable的任务给FutureTask，直接调用其run方法或者放入线程池执行，之后可以在外部通过FutureTask的get方法异步获取执行结果，因此，FutureTask非常适合用于耗时的计算，主线程可以在完成自己的任务后，再去获取结果。另外，FutureTask还可以确保即使调用了多次run方法，它都只会执行一次Runnable或者Callable任务，或者通过cancel取消FutureTask的执行等。</p><p>1.执行多任务计算</p><p>FutureTask执行多任务计算的使用场景</p><p>利用FutureTask和ExecutorService，可以用多线程的方式提交计算任务，主线程继续执行其他任务，当主线程需要子线程的计算结果时，在异步获取子线程的执行结果。</p><p>import java.util.ArrayList;import java.util.List;import java.util.concurrent.*;</p><p>public class FutureTaskForMultiCompute {</p><p>​    public static void main(String[] args) {</p><p>​        FutureTaskForMultiCompute inst = new FutureTaskForMultiCompute();</p><p>​        // 创建任务集合</p><p>​        List&lt;FutureTask<integer>&gt; taskList = new ArrayList&lt;FutureTask<integer>&gt;();</integer></integer></p><p>​        // 创建线程池</p><p>​        ExecutorService exec = Executors.newFixedThreadPool(5);</p><p>​        for (int i = 0; i &lt; 10; i++) {</p><p>​            // 传入Callable对象创建FutureTask对象</p><p>​            FutureTask<integer> ft = new FutureTask<integer>(inst.new ComputeTask(i, “” + i));</integer></integer></p><p>​            taskList.add(ft);</p><p>​            // 提交给线程池执行任务，也可以通过exec.invokeAll(taskList)一次性提交所有任务;</p><p>​            exec.submit(ft);</p><p>​        }</p><p>​        System.out.println(“所有计算任务提交完毕, 主线程接着干其他事情！”);</p><p>​        // 开始统计各计算线程计算结果</p><p>​        Integer totalResult = 0;</p><p>​        for (FutureTask<integer> ft : taskList) {</integer></p><p>​            try {</p><p>​                //FutureTask的get方法会自动阻塞,直到获取计算结果为止</p><p>​                totalResult = totalResult + ft.get();</p><p>​            } catch (InterruptedException e) {</p><p>​                e.printStackTrace();</p><p>​            } catch (ExecutionException e) {</p><p>​                e.printStackTrace();</p><p>​            }</p><p>​        }</p><p>​        // 关闭线程池</p><p>​        exec.shutdown();</p><p>​        System.out.println(“多任务计算后的总结果是:” + totalResult);</p><p>​    }</p><p>​    private class ComputeTask implements Callable<integer> {</integer></p><p>​        private Integer result = 0;</p><p>​        private String taskName = “”;</p><p>​        public ComputeTask(Integer iniResult, String taskName) {</p><p>​            result = iniResult;</p><p>​            this.taskName = taskName;</p><p>​            System.out.println(“生成子线程计算任务: “ + taskName);</p><p>​        }</p><p>​        public String getTaskName() {</p><p>​            return this.taskName;</p><p>​        }</p><p>​        @Override</p><p>​        public Integer call() throws Exception {</p><p>​            // TODO Auto-generated method stub</p><p>​            for (int i = 0; i &lt; 100; i++) {</p><p>​                result = +i;</p><p>​            }</p><p>​            // 休眠5秒钟，观察主线程行为，预期的结果是主线程会继续执行，到要取得FutureTask的结果是等待直至完成。</p><p>​            Thread.sleep(5000);</p><p>​            System.out.println(“子线程计算任务: “ + taskName + “ 执行完成!”);</p><p>​            return result;</p><p>​        }</p><p>​    }</p><p>}复制代码</p><p>生成子线程计算任务: 0</p><p>生成子线程计算任务: 1</p><p>生成子线程计算任务: 2</p><p>生成子线程计算任务: 3</p><p>生成子线程计算任务: 4</p><p>生成子线程计算任务: 5</p><p>生成子线程计算任务: 6</p><p>生成子线程计算任务: 7</p><p>生成子线程计算任务: 8</p><p>生成子线程计算任务: 9</p><p>所有计算任务提交完毕, 主线程接着干其他事情！</p><p>子线程计算任务: 0 执行完成!</p><p>子线程计算任务: 2 执行完成!</p><p>子线程计算任务: 3 执行完成!</p><p>子线程计算任务: 4 执行完成!</p><p>子线程计算任务: 1 执行完成!</p><p>子线程计算任务: 8 执行完成!</p><p>子线程计算任务: 7 执行完成!</p><p>子线程计算任务: 6 执行完成!</p><p>子线程计算任务: 9 执行完成!</p><p>子线程计算任务: 5 执行完成!</p><p>多任务计算后的总结果是:990复制代码</p><p>2.高并发环境下</p><p>FutureTask在高并发环境下确保任务只执行一次</p><p>在很多高并发的环境下，往往我们只需要某些任务只执行一次。这种使用情景FutureTask的特性恰能胜任。举一个例子，假设有一个带key的连接池，当key存在时，即直接返回key对应的对象；当key不存在时，则创建连接。对于这样的应用场景，通常采用的方法为使用一个Map对象来存储key和连接池对应的对应关系，典型的代码如下面所示：</p><p>  private Map&lt;String, Connection&gt; connectionPool = new HashMap&lt;String, Connection&gt;();</p><p>​    private ReentrantLock lock = new ReentrantLock();</p><p>​    public Connection getConnection(String key) {</p><p>​        try {</p><p>​            lock.lock();</p><p>​            if (connectionPool.containsKey(key)) {</p><p>​                return connectionPool.get(key);</p><p>​            } else {</p><p>​                //创建 Connection  </p><p>​                Connection conn = createConnection();</p><p>​                connectionPool.put(key, conn);</p><p>​                return conn;</p><p>​            }</p><p>​        } finally {</p><p>​            lock.unlock();</p><p>​        }</p><p>​    }</p><p>​    //创建Connection  </p><p>​    private Connection createConnection() {</p><p>​        return null;</p><p>​    }</p><p>复制代码</p><p>在上面的例子中，我们通过加锁确保高并发环境下的线程安全，也确保了connection只创建一次，然而确牺牲了性能。改用ConcurrentHash的情况下，几乎可以避免加锁的操作，性能大大提高，但是在高并发的情况下有可能出现Connection被创建多次的现象。这时最需要解决的问题就是当key不存在时，创建Connection的动作能放在connectionPool之后执行，这正是FutureTask发挥作用的时机，基于ConcurrentHashMap和FutureTask的改造代码如下：</p><p>  private ConcurrentHashMap&lt;String, FutureTask<connection>&gt; connectionPool = new ConcurrentHashMap&lt;String, FutureTask<connection>&gt;();</connection></connection></p><p>​    public Connection getConnection(String key) throws Exception {</p><p>​        FutureTask<connection> connectionTask = connectionPool.get(key);</connection></p><p>​        if (connectionTask != null) {</p><p>​            return connectionTask.get();</p><p>​        } else {</p><p>​            Callable<connection> callable = new Callable<connection>() {</connection></connection></p><p>​                @Override</p><p>​                public Connection call() throws Exception {</p><p>​                    // TODO Auto-generated method stub  </p><p>​                    return createConnection();</p><p>​                }</p><p>​            };</p><p>​            FutureTask<connection> newTask = new FutureTask<connection>(callable);</connection></connection></p><p>​            connectionTask = connectionPool.putIfAbsent(key, newTask);</p><p>​            if (connectionTask == null) {</p><p>​                connectionTask = newTask;</p><p>​                connectionTask.run();</p><p>​            }</p><p>​            return connectionTask.get();</p><p>​        }</p><p>​    }</p><p>​    //创建Connection  </p><p>​    private Connection createConnection() {</p><p>​        return null;</p><p>​    }复制代码</p><p>经过这样的改造，可以避免由于并发带来的多次创建连接及锁的出现。</p><h3 id="什么是同步容器和并发容器的实现？"><a href="#什么是同步容器和并发容器的实现？" class="headerlink" title="什么是同步容器和并发容器的实现？"></a>什么是同步容器和并发容器的实现？</h3><p>一、同步容器</p><p>主要代表有Vector和Hashtable，以及Collections.synchronizedXxx等。 锁的粒度为当前对象整体。 迭代器是及时失败的，即在迭代的过程中发现被修改，就会抛出ConcurrentModificationException。</p><p>二、并发容器</p><p>主要代表有ConcurrentHashMap、CopyOnWriteArrayList、ConcurrentSkipListMap、ConcurrentSkipListSet。 锁的粒度是分散的、细粒度的，即读和写是使用不同的锁。 迭代器具有弱一致性，即可以容忍并发修改，不会抛出ConcurrentModificationException。</p><p>JDK 7 ConcurrentHashMap</p><p>采用分离锁技术，同步容器中，是一个容器一个锁，但在ConcurrentHashMap中，会将hash表的数组部分分成若干段，每段维护一个锁，以达到高效的并发访问；</p><p>JDK 8 ConcurrentHashMap</p><p>采用分离锁技术，同步容器中，是一个容器一个锁，但在ConcurrentHashMap中，会将hash表的数组部分分成若干段，每段维护一个锁，以达到高效的并发访问；</p><p>三、阻塞队列</p><p>主要代表有LinkedBlockingQueue、ArrayBlockingQueue、PriorityBlockingQueue(Comparable,Comparator)、SynchronousQueue。 提供了可阻塞的put和take方法，以及支持定时的offer和poll方法。 适用于生产者、消费者模式（线程池和工作队列-Executor），同时也是同步容器</p><p>四、双端队列</p><p>主要代表有ArrayDeque和LinkedBlockingDeque。 意义：正如阻塞队列适用于生产者消费者模式，双端队列同样适用与另一种模式，即工作密取。在生产者-消费者设计中，所有消费者共享一个工作队列，而在工作密取中，每个消费者都有各自的双端队列。 如果一个消费者完成了自己双端队列中的全部工作，那么他就可以从其他消费者的双端队列末尾秘密的获取工作。具有更好的可伸缩性，这是因为工作者线程不会在单个共享的任务队列上发生竞争。 在大多数时候，他们都只是访问自己的双端队列，从而极大的减少了竞争。当工作者线程需要访问另一个队列时，它会从队列的尾部而不是头部获取工作，因此进一步降低了队列上的竞争。 适用于：网页爬虫等任务中</p><p>五、比较及适用场景</p><p>如果不需要阻塞队列，优先选择ConcurrentLinkedQueue； 如果需要阻塞队列，队列大小固定优先选择ArrayBlockingQueue，队列大小不固定优先选择LinkedBlockingQueue； 如果需要对队列进行排序，选择PriorityBlockingQueue； 如果需要一个快速交换的队列，选择SynchronousQueue； 如果需要对队列中的元素进行延时操作，则选择DelayQueue。</p><h3 id="什么是多线程？优缺点？"><a href="#什么是多线程？优缺点？" class="headerlink" title="什么是多线程？优缺点？"></a>什么是多线程？优缺点？</h3><p>什么是多线程？</p><p>多线程：是指从软件或者硬件上实现多个线程的并发技术。</p><p>多线程的好处：</p><p>使用多线程可以把程序中占据时间长的任务放到后台去处理，如图片、视屏的下载</p><p>发挥多核处理器的优势，并发执行让系统运行的更快、更流畅，用户体验更好</p><p>多线程的缺点：</p><p>大量的线程降低代码的可读性；</p><p>更多的线程需要更多的内存空间</p><p>当多个线程对同一个资源出现争夺时候要注意线程安全的问题。</p><h3 id="什么是多线程的上下文切换？"><a href="#什么是多线程的上下文切换？" class="headerlink" title="什么是多线程的上下文切换？"></a>什么是多线程的上下文切换？</h3><p>即使是单核CPU也支持多线程执行代码，CPU通过给每个线程分配CPU时间片来实现这个机制。时间片是CPU分配给各个线程的时间，因为时间片非常短，所以CPU通过不停地切换线程执行，让我们感觉多个线程时同时执行的，时间片一般是几十毫秒（ms）</p><p>上下文切换过程中，CPU会停止处理当前运行的程序，并保存当前程序运行的具体位置以便之后继续运行</p><p>CPU通过时间片分配算法来循环执行任务，当前任务执行一个时间片后会切换到下一个任务。但是，在切换前会保存上一个任务的状态，以便下次切换回这个任务时，可以再次加载这个任务的状态</p><p>从任务保存到再加载的过程就是一次上下文切换</p><h3 id="ThreadLocal的设计理念与作用？"><a href="#ThreadLocal的设计理念与作用？" class="headerlink" title="ThreadLocal的设计理念与作用？"></a>ThreadLocal的设计理念与作用？</h3><p>Java中的ThreadLocal类允许我们创建只能被同一个线程读写的变量。因此，如果一段代码含有一个ThreadLocal变量的引用，即使两个线程同时执行这段代码，它们也无法访问到对方的ThreadLocal变量</p><p>ThreadLocal</p><p>如何创建ThreadLocal变量</p><p>以下代码展示了如何创建一个ThreadLocal变量：</p><p>private ThreadLocal myThreadLocal = new ThreadLocal();复制代码</p><p>通过这段代码实例化了一个ThreadLocal对象。我们只需要实例化对象一次，并且也不需要知道它是被哪个线程实例化。虽然所有的线程都能访问到这个ThreadLocal实例，但是每个线程却只能访问到自己通过调用ThreadLocal的set()方法设置的值。即使是两个不同的线程在同一个ThreadLocal对象上设置了不同的值，他们仍然无法访问到对方的值。</p><p>如何访问ThreadLocal变量</p><p>一旦创建了一个ThreadLocal变量，你可以通过如下代码设置某个需要保存的值：</p><p>myThreadLocal.set(“A thread local value”);复制代码</p><p>可以通过下面方法读取保存在ThreadLocal变量中的值：</p><p>String threadLocalValue = (String) myThreadLocal.get();复制代码</p><p>get()方法返回一个Object对象，set()对象需要传入一个Object类型的参数。</p><p>为ThreadLocal指定泛型类型</p><p>public static ThreadLocal<string> myThreadLocal = new ThreadLocal<string>();复制代码</string></string></p><p>我们可以创建一个指定泛型类型的ThreadLocal对象，这样我们就不需要每次对使用get()方法返回的值作强制类型转换了。下面展示了指定泛型类型的ThreadLocal例子：</p><p>ThreadLocal的设计理念与作用</p><p><a href="http://blog.csdn.net/u011860731/article/details/48733073http://blog.csdn.net/u011860731/article/details/48733073" target="_blank" rel="noopener">http://blog.csdn.net/u011860731/article/details/48733073http://blog.csdn.net/u011860731/article/details/48733073</a>)</p><p>InheritableThreadLocal</p><p>public static ThreadLocal<integer> threadLocal = new InheritableThreadLocal<integer>();复制代码</integer></integer></p><p>InheritableThreadLocal类是ThreadLocal类的子类。ThreadLocal中每个线程拥有它自己的值，与ThreadLocal不同的是，InheritableThreadLocal允许一个线程以及该线程创建的所有子线程都可以访问它保存的值。</p><p>InheritableThreadLocal 原理</p><p>Java 多线程：InheritableThreadLocal 实现原理</p><p>blog.csdn.net/ni357103403…</p><h3 id="ThreadPool（线程池）用法与优势？"><a href="#ThreadPool（线程池）用法与优势？" class="headerlink" title="ThreadPool（线程池）用法与优势？"></a>ThreadPool（线程池）用法与优势？</h3><p>为什么要用线程池:</p><p>减少了创建和销毁线程的次数，每个工作线程都可以被重复利用，可执行多个任务。</p><p>可以根据系统的承受能力，调整线程池中工作线线程的数目，防止因为消耗过多的内存，而把服务器累趴下(每个线程需要大约1MB内存，线程开的越多，消耗的内存也就越大，最后死机)。</p><p>Java里面线程池的顶级接口是Executor，但是严格意义上讲Executor并不是一个线程池，而只是一个执行线程的工具。真正的线程池接口是ExecutorService。</p><p>new Thread 缺点</p><p>每次new Thread新建对象性能差。</p><p>线程缺乏统一管理，可能无限制新建线程，相互之间竞争，及可能占用过多系统资源导致死机或oom。</p><p>缺乏更多功能，如定时执行、定期执行、线程中断。</p><p>ThreadPool 优点</p><p>减少了创建和销毁线程的次数，每个工作线程都可以被重复利用，可执行多个任务</p><p>可以根据系统的承受能力，调整线程池中工作线线程的数目，防止因为因为消耗过多的内存，而把服务器累趴下(每个线程需要大约1MB内存，线程开的越多，消耗的内存也就越大，最后死机)</p><p>减少在创建和销毁线程上所花的时间以及系统资源的开销</p><p>如不使用线程池，有可能造成系统创建大量线程而导致消耗完系统内存</p><p>Java提供的四种线程池的好处在于：</p><p>重用存在的线程，减少对象创建、销毁的开销，提高性能。</p><p>可有效控制最大并发线程数，提高系统资源的使用率，同时避免过多资源竞争，避免堵塞。</p><p>提供定时执行、定期执行、单线程、并发数控制等功能。</p><p>比较重要的几个类：</p><table><thead><tr><th>类</th><th>描述</th></tr></thead><tbody><tr><td>ExecutorService</td><td>真正的线程池接口。</td></tr><tr><td>ScheduledExecutorService</td><td>能和Timer/TimerTask类似，解决那些需要任务重复执行的问题。</td></tr><tr><td>ThreadPoolExecutor</td><td>ExecutorService的默认实现。</td></tr><tr><td>ScheduledThreadPoolExecutor</td><td>继承ThreadPoolExecutor的ScheduledExecutorService接口实现，周期性任务调度的类实现。</td></tr></tbody></table><p>要配置一个线程池是比较复杂的，尤其是对于线程池的原理不是很清楚的情况下，很有可能配置的线程池不是较优的，因此在Executors类里面提供了一些静态工厂，生成一些常用的线程池。</p><p>Executors提供四种线程池</p><p>newCachedThreadPool创建一个可缓存线程池，如果线程池长度超过处理需要，可灵活回收空闲线程，若无可回收，则新建线程。</p><p>newFixedThreadPool 创建一个定长线程池，可控制线程最大并发数，超出的线程会在队列中等待。</p><p>newScheduledThreadPool 创建一个定长线程池，支持定时及周期性任务执行。</p><p>newSingleThreadExecutor 创建一个单线程化的线程池，它只会用唯一的工作线程来执行任务，保证所有任务按照指定顺序(FIFO, LIFO, 优先级)执行。</p><p>一般都不用Executors提供的线程创建方式</p><p>使用ThreadPoolExecutor创建线程池</p><p>ThreadPoolExecutor的构造函数</p><p>public ThreadPoolExecutor(int corePoolSize,</p><p>​                              int maximumPoolSize,</p><p>​                              long keepAliveTime,</p><p>​                              TimeUnit unit,</p><p>​                              BlockingQueue<runnable> workQueue,</runnable></p><p>​                              ThreadFactory threadFactory,</p><p>​                              RejectedExecutionHandler handler) {</p><p>​        if (corePoolSize &lt; 0 ||</p><p>​            maximumPoolSize &lt;= 0 ||</p><p>​            maximumPoolSize &lt; corePoolSize ||</p><p>​            keepAliveTime &lt; 0)</p><p>​            throw new IllegalArgumentException();</p><p>​        if (workQueue == null || threadFactory == null || handler == null)</p><p>​            throw new NullPointerException();</p><p>​        this.corePoolSize = corePoolSize;</p><p>​        this.maximumPoolSize = maximumPoolSize;</p><p>​        this.workQueue = workQueue;</p><p>​        this.keepAliveTime = unit.toNanos(keepAliveTime);</p><p>​        this.threadFactory = threadFactory;</p><p>​        this.handler = handler;</p><p>​    }复制代码</p><p>参数：</p><p>corePoolSize核心线程数大小，当线程数&lt;corePoolSize ，会创建线程执行runnable</p><p>maximumPoolSize 最大线程数， 当线程数 &gt;= corePoolSize的时候，会把runnable放入workQueue中</p><p>keepAliveTime 保持存活时间，当线程数大于corePoolSize的空闲线程能保持的最大时间。</p><p>unit 时间单位</p><p>workQueue 保存任务的阻塞队列</p><p>threadFactory 创建线程的工厂</p><p>handler 拒绝策略</p><p>任务执行顺序：</p><p>当线程数小于corePoolSize时，创建线程执行任务。</p><p>当线程数大于等于corePoolSize并且workQueue没有满时，放入workQueue中</p><p>线程数大于等于corePoolSize并且当workQueue满时，新任务新建线程运行，线程总数要小于maximumPoolSize</p><p>当线程总数等于maximumPoolSize并且workQueue满了的时候执行handler的rejectedExecution。也就是拒绝策略。</p><p>ThreadPoolExecutor默认有四个拒绝策略：</p><p>ThreadPoolExecutor.AbortPolicy() 直接抛出异常RejectedExecutionException</p><p>ThreadPoolExecutor.CallerRunsPolicy() 直接调用run方法并且阻塞执行</p><p>ThreadPoolExecutor.DiscardPolicy() 直接丢弃后来的任务</p><p>ThreadPoolExecutor.DiscardOldestPolicy() 丢弃在队列中队首的任务</p><p>当然可以自己继承 RejectedExecutionHandler 来写拒绝策略.</p><p>java 四种线程池的使用</p><p>juejin.im/post/59df0c…</p><p>Concurrent包里的其他东西：ArrayBlockingQueue、CountDownLatch等等。</p><p>阻塞队列</p><p>1、ArrayBlockingQueue 数组结构组成的有界阻塞队列。</p><p>此队列按照先进先出（FIFO）的原则对元素进行排序，但是默认情况下不保证线程公平的访问队列，即如果队列满了，那么被阻塞在外面的线程对队列访问的顺序是不能保证线程公平（即先阻塞，先插入）的。</p><p>CountDownLatch</p><p>CountDownLatch 允许一个或多个线程等待其他线程完成操作。</p><p>应用场景</p><p>假如有这样一个需求，当我们需要解析一个Excel里多个sheet的数据时，可以考虑使用多线程，每个线程解析一个sheet里的数据，等到所有的sheet都解析完之后，程序需要提示解析完成。</p><p>在这个需求中，要实现主线程等待所有线程完成sheet的解析操作，最简单的做法是使用join。代码如下：</p><p>public class JoinCountDownLatchTest {</p><p>​    public static void main(String[] args) throws InterruptedException {</p><p>​        Thread parser1 = new Thread(new Runnable() {</p><p>​            @Override</p><p>​            public void run() {</p><p>​            }</p><p>​        });</p><p>​        Thread parser2 = new Thread(new Runnable() {</p><p>​            @Override</p><p>​            public void run() {</p><p>​                System.out.println(“parser2 finish”);</p><p>​            }</p><p>​        });</p><p>​        parser1.start();</p><p>​        parser2.start();</p><p>​        parser1.join();</p><p>​        parser2.join();</p><p>​        System.out.println(“all parser finish”);</p><p>​    }</p><p>}复制代码</p><p>join用于让当前执行线程等待join线程执行结束。其实现原理是不停检查join线程是否存活，如果join线程存活则让当前线程永远wait，代码片段如下，wait(0)表示永远等待下去。</p><p>while (isAlive()) {</p><p> wait(0);</p><p>}复制代码</p><p>方法isAlive()功能是判断当前线程是否处于活动状态。</p><p>活动状态就是线程启动且尚未终止，比如正在运行或准备开始运行。</p><p>CountDownLatch用法</p><p>public class Test {</p><p>​     public static void main(String[] args) {   </p><p>​     </p><p>​         final CountDownLatch latch = new CountDownLatch(2);</p><p>​         new Thread(){</p><p>​             public void run() {</p><p>​                 try {</p><p>​                     System.out.println(“子线程”+Thread.currentThread().getName()+”正在执行”);</p><p>​                    Thread.sleep(3000);</p><p>​                    System.out.println(“子线程”+Thread.currentThread().getName()+”执行完毕”);</p><p>​                    latch.countDown();</p><p>​                } catch (InterruptedException e) {</p><p>​                    e.printStackTrace();</p><p>​                }</p><p>​             };</p><p>​         }.start();</p><p>​         new Thread(){</p><p>​             public void run() {</p><p>​                 try {</p><p>​                     System.out.println(“子线程”+Thread.currentThread().getName()+”正在执行”);</p><p>​                     Thread.sleep(3000);</p><p>​                     System.out.println(“子线程”+Thread.currentThread().getName()+”执行完毕”);</p><p>​                     latch.countDown();</p><p>​                } catch (InterruptedException e) {</p><p>​                    e.printStackTrace();</p><p>​                }</p><p>​             };</p><p>​         }.start();</p><p>​         try {</p><p>​             System.out.println(“等待2个子线程执行完毕…”);</p><p>​            latch.await();</p><p>​            System.out.println(“2个子线程已经执行完毕”);</p><p>​            System.out.println(“继续执行主线程”);</p><p>​        } catch (InterruptedException e) {</p><p>​            e.printStackTrace();</p><p>​        }</p><p>​     }</p><p> }复制代码</p><p>线程Thread-0正在执行</p><p>线程Thread-1正在执行</p><p>等待2个子线程执行完毕…</p><p>线程Thread-0执行完毕</p><p>线程Thread-1执行完毕</p><p>2个子线程已经执行完毕</p><p>继续执行主线程复制代码</p><p>new CountDownLatch(2)的构造函数接收一个int类型的参数作为计数器，如果你想等待N个点完成，这里就传入N。</p><p>当我们调用一次CountDownLatch的countDown()方法时，N就会减1，CountDownLatch的await()会阻塞当前线程，直到N变成零。由于countDown方法可以用在任何地方，所以这里说的N个点，可以是N个线程，也可以是1个线程里的N个执行步骤。用在多个线程时，你只需要把这个CountDownLatch的引用传递到线程里。</p><p>Java并发编程：CountDownLatch、CyclicBarrier和 Semaphore</p><p><a href="http://www.importnew.com/21889.html" target="_blank" rel="noopener">www.importnew.com/21889.html</a></p><h3 id="synchronized和ReentrantLock的区别？"><a href="#synchronized和ReentrantLock的区别？" class="headerlink" title="synchronized和ReentrantLock的区别？"></a>synchronized和ReentrantLock的区别？</h3><p>java在编写多线程程序时，为了保证线程安全，需要对数据同步，经常用到两种同步方式就是Synchronized和重入锁ReentrantLock。</p><p>基础知识</p><p>可重入锁。可重入锁是指同一个线程可以多次获取同一把锁。ReentrantLock和synchronized都是可重入锁。</p><p>可中断锁。可中断锁是指线程尝试获取锁的过程中，是否可以响应中断。synchronized是不可中断锁，而ReentrantLock则提供了中断功能。</p><p>公平锁与非公平锁。公平锁是指多个线程同时尝试获取同一把锁时，获取锁的顺序按照线程达到的顺序，而非公平锁则允许线程“插队”。synchronized是非公平锁，而ReentrantLock的默认实现是非公平锁，但是也可以设置为公平锁。</p><p>CAS操作(CompareAndSwap)。CAS操作简单的说就是比较并交换。CAS 操作包含三个操作数 —— 内存位置（V）、预期原值（A）和新值(B)。如果内存位置的值与预期原值相匹配，那么处理器会自动将该位置值更新为新值。否则，处理器不做任何操作。无论哪种情况，它都会在 CAS 指令之前返回该位置的值。CAS 有效地说明了“我认为位置 V 应该包含值 A；如果包含该值，则将 B 放到这个位置；否则，不要更改该位置，只告诉我这个位置现在的值即可。”</p><p>Synchronized</p><p>synchronized是java内置的关键字，它提供了一种独占的加锁方式。synchronized的获取和释放锁由JVM实现，用户不需要显示的释放锁，非常方便。然而synchronized也有一定的局限性</p><p>例如：</p><p>当线程尝试获取锁的时候，如果获取不到锁会一直阻塞。</p><p>如果获取锁的线程进入休眠或者阻塞，除非当前线程异常，否则其他线程尝试获取锁必须一直等待。</p><p>ReentrantLock</p><p>ReentrantLock它是JDK 1.5之后提供的API层面的互斥锁，需要lock()和unlock()方法配合try/finally语句块来完成。</p><p>代码示例</p><p>private Lock lock = new ReentrantLock();public void test(){</p><p> lock.lock();</p><p> try{</p><p> doSomeThing();</p><p> }catch (Exception e){</p><p> // ignored</p><p> }finally {</p><p> lock.unlock();</p><p> }</p><p>}复制代码</p><p>lock(), 如果获取了锁立即返回，如果别的线程持有锁，当前线程则一直处于休眠状态，直到获取锁</p><p>tryLock(), 如果获取了锁立即返回true，如果别的线程正持有锁，立即返回false；</p><p>tryLock(long timeout,TimeUnit unit)，如果获取了锁定立即返回true，如果别的线程正持有锁，会等待参数给定的时间，在等待的过程中，如果获取了锁定，就返回true，如果等待超时，返回false；</p><p>lockInterruptibly:如果获取了锁定立即返回，如果没有获取锁定，当前线程处于休眠状态，直到或者锁定，或者当前线程被别的线程中断</p><p>ReentrantLock 一些特性</p><p>等待可中断避免，出现死锁的情况（如果别的线程正持有锁，会等待参数给定的时间，在等待的过程中，如果获取了锁定，就返回true，如果等待超时，返回false）</p><p>公平锁与非公平锁多个线程等待同一个锁时，必须按照申请锁的时间顺序获得锁，Synchronized锁非公平锁，ReentrantLock默认的构造函数是创建的非公平锁，可以通过参数true设为公平锁，但公平锁表现的性能不是很好。</p><p>公平锁：线程获取锁的顺序和调用lock的顺序一样，FIFO；</p><p>非公平锁：线程获取锁的顺序和调用lock的顺序无关，全凭运气。</p><p>Java并发包(java.util.concurrent)中大量使用了CAS操作,涉及到并发的地方都调用了sun.misc.Unsafe类方法进行CAS操作。</p><p>ReenTrantLock实现的原理：</p><p>简单来说，ReenTrantLock的实现是一种自旋锁，通过循环调用CAS操作来实现加锁。它的性能比较好也是因为避免了使线程进入内核态的阻塞状态。想尽办法避免线程进入内核的阻塞状态是我们去分析和理解锁设计的关键钥匙。</p><p>总结一下</p><p>在Synchronized优化以前，synchronized的性能是比ReenTrantLock差很多的，但是自从Synchronized引入了偏向锁，轻量级锁（自旋锁）后，两者的性能就差不多了，在两种方法都可用的情况下，官方甚至建议使用synchronized，其实synchronized的优化我感觉就借鉴了ReenTrantLock中的CAS技术。都是试图在用户态就把加锁问题解决，避免进入内核态的线程阻塞。</p><p>synchronized：</p><p>在资源竞争不是很激烈的情况下，偶尔会有同步的情形下，synchronized是很合适的。原因在于，编译程序通常会尽可能的进行优化synchronize，另外可读性非常好。</p><p>ReentrantLock:</p><p>ReentrantLock用起来会复杂一些。在基本的加锁和解锁上，两者是一样的，所以无特殊情况下，推荐使用synchronized。ReentrantLock的优势在于它更灵活、更强大，增加了轮训、超时、中断等高级功能。</p><p>ReentrantLock默认使用非公平锁是基于性能考虑，公平锁为了保证线程规规矩矩地排队，需要增加阻塞和唤醒的时间开销。如果直接插队获取非公平锁，跳过了对队列的处理，速度会更快。</p><p>ReentrantLock实现原理</p><p><a href="http://www.cnblogs.com/maypattis/p…" target="_blank" rel="noopener">www.cnblogs.com/maypattis/p…</a></p><p>分析ReentrantLock的实现原理(ReentrantLock和同步工具类的实现基础都是AQS)</p><p><a href="http://www.jianshu.com/p/fe027772e…" target="_blank" rel="noopener">www.jianshu.com/p/fe027772e…</a></p><h3 id="Semaphore有什么作用？"><a href="#Semaphore有什么作用？" class="headerlink" title="Semaphore有什么作用？"></a>Semaphore有什么作用？</h3><p>Semaphore就是一个信号量，它的作用是限制某段代码块的并发数。</p><p>Semaphore有一个构造函数，可以传入一个int型整数n，表示某段代码最多只有n个线程可以访问，</p><p>如果超出了n，那么请等待，等到某个线程执行完毕这段代码块，下一个线程再进入。</p><p>由此可以看出如果Semaphore构造函数中传入的int型整数n=1，相当于变成了一个synchronized了。</p><p>Semaphore类位于java.util.concurrent包下，它提供了2个构造器：</p><p>//参数permits表示许可数目，即同时可以允许多少线程进行访问  public Semaphore(int permits) {  </p><p>​    sync = new NonfairSync(permits);  </p><p>}  //这个多了一个参数fair表示是否是公平的，即等待时间越久的越先获取许可  public Semaphore(int permits, boolean fair) {  </p><p>​    sync = (fair)? new FairSync(permits) : new NonfairSync(permits);  </p><p>}  复制代码</p><p>Semaphore类中比较重要的几个方法，首先是acquire()、release()方法：</p><p>acquire()用来获取一个许可，若无许可能够获得，则会一直等待，直到获得许可。</p><p>release()用来释放许可。注意，在释放许可之前，必须先获获得许可。</p><p>Semaphore类中比较重要的几个方法，首先是acquire()、release()方法：</p><p>acquire()用来获取一个许可，若无许可能够获得，则会一直等待，直到获得许可。</p><p>release()用来释放许可。注意，在释放许可之前，必须先获获得许可。复制代码</p><p>这4个方法都会被阻塞，如果想立即得到执行结果，可以使用下面几个方法：</p><p>//尝试获取一个许可，若获取成功，则立即返回true，若获取失败，则立即返回false  public boolean tryAcquire() { };  //尝试获取一个许可，若在指定的时间内获取成功，则立即返回true，否则则立即返回false  public boolean tryAcquire(long timeout, TimeUnit unit) throws InterruptedException { };   //尝试获取permits个许可，若获取成功，则立即返回true，若获取失败，则立即返回false  public boolean tryAcquire(int permits) { };   //尝试获取permits个许可，若在指定的时间内获取成功，则立即返回true  public boolean tryAcquire(int permits, long timeout, TimeUnit unit) throws InterruptedException { };  //得到当前可用的许可数目  public int availablePermits(); 复制代码</p><p>示例</p><p>假若一个工厂有5台机器，但是有8个工人，一台机器同时只能被一个工人使用，只有使用完了，其他工人才能继续使用。那么我们就可以通过Semaphore来实现：</p><p>public class Test {  </p><p>​    public static void main(String[] args) {  </p><p>​        int N = 8; //工人数  </p><p>​        Semaphore semaphore = new Semaphore(5); //机器数目  </p><p>​        for(int i=0;i&lt;N;i++)  </p><p>​            new Worker(i,semaphore).start();  </p><p>​    }      </p><p>​    static class Worker extends Thread{  </p><p>​        private int num;  </p><p>​        private Semaphore semaphore;  </p><p>​        public Worker(int num,Semaphore semaphore){  </p><p>​            this.num = num;  </p><p>​            this.semaphore = semaphore;  </p><p>​        }          </p><p>​        @Override  </p><p>​        public void run() {  </p><p>​            try {  </p><p>​                semaphore.acquire();  </p><p>​                System.out.println(“工人”+this.num+”占用一个机器在生产…”);  </p><p>​                Thread.sleep(2000);  </p><p>​                System.out.println(“工人”+this.num+”释放出机器”);  </p><p>​                semaphore.release();              </p><p>​            } catch (InterruptedException e) {  </p><p>​                e.printStackTrace();  </p><p>​            }  </p><p>​        }  </p><p>​    }  </p><p>} 复制代码</p><p>运行结果：</p><p>工人0占用一个机器在生产…  </p><p>工人1占用一个机器在生产…  </p><p>工人2占用一个机器在生产…  </p><p>工人4占用一个机器在生产…  </p><p>工人5占用一个机器在生产…  </p><p>工人0释放出机器  </p><p>工人2释放出机器  </p><p>工人3占用一个机器在生产…  </p><p>工人7占用一个机器在生产…  </p><p>工人4释放出机器  </p><p>工人5释放出机器  </p><p>工人1释放出机器  </p><p>工人6占用一个机器在生产…  </p><p>工人3释放出机器  </p><p>工人7释放出机器  </p><p>工人6释放出机器复制代码</p><h3 id="Java-Concurrency-API中的Lock接口-Lock-interface-是什么？对比同步它有什么优势？"><a href="#Java-Concurrency-API中的Lock接口-Lock-interface-是什么？对比同步它有什么优势？" class="headerlink" title="Java Concurrency API中的Lock接口(Lock interface)是什么？对比同步它有什么优势？"></a>Java Concurrency API中的Lock接口(Lock interface)是什么？对比同步它有什么优势？</h3><p>Lock接口比同步方法和同步块提供了更具扩展性的锁操作。他们允许更灵活的结构，可以具有完全不同的性质，并且可以支持多个相关类的条件对象。</p><p>它的优势有：</p><p>可以使锁更公平</p><p>可以使线程在等待锁的时候响应中断</p><p>可以让线程尝试获取锁，并在无法获取锁的时候立即返回或者等待一段时间</p><p>可以在不同的范围，以不同的顺序获取和释放锁</p><h3 id="Hashtable的size-方法中明明只有一条语句”return-count”，为什么还要做同步？"><a href="#Hashtable的size-方法中明明只有一条语句”return-count”，为什么还要做同步？" class="headerlink" title="Hashtable的size()方法中明明只有一条语句”return count”，为什么还要做同步？"></a>Hashtable的size()方法中明明只有一条语句”return count”，为什么还要做同步？</h3><p>同一时间只能有一条线程执行固定类的同步方法，但是对于类的非同步方法，可以多条线程同时访问。所以，这样就有问题了，可能线程A在执行Hashtable的put方法添加数据，线程B则可以正常调用size()方法读取Hashtable中当前元素的个数，那读取到的值可能不是最新的，可能线程A添加了完了数据，但是没有对size++，线程B就已经读取size了，那么对于线程B来说读取到的size一定是不准确的。</p><p>而给size()方法加了同步之后，意味着线程B调用size()方法只有在线程A调用put方法完毕之后才可以调用，这样就保证了线程安全性</p><h3 id="ConcurrentHashMap的并发度是什么？"><a href="#ConcurrentHashMap的并发度是什么？" class="headerlink" title="ConcurrentHashMap的并发度是什么？"></a>ConcurrentHashMap的并发度是什么？</h3><p>ConcurrentHashMap的并发度就是segment的大小，默认为16，这意味着最多同时可以有16条线程操作ConcurrentHashMap，这也是ConcurrentHashMap对Hashtable的最大优势</p><h3 id="ReentrantReadWriteLock读写锁的使用"><a href="#ReentrantReadWriteLock读写锁的使用" class="headerlink" title="ReentrantReadWriteLock读写锁的使用"></a>ReentrantReadWriteLock读写锁的使用</h3><p>Lock比传统线程模型中的synchronized方式更加面向对象，与生活中的锁类似，锁本身也应该是一个对象。两个线程执行的代码片段要实现同步互斥的效果，它们必须用同一个Lock对象。</p><p>读写锁：分为读锁和写锁，多个读锁不互斥，读锁与写锁互斥，这是由jvm自己控制的，你只要上好相应的锁即可。 如果你的代码只读数据，可以很多人同时读，但不能同时写，那就上读锁；</p><p>如果你的代码修改数据，只能有一个人在写，且不能同时读取，那就上写锁。总之，读的时候上读锁，写的时候上写锁！</p><p>ReentrantReadWriteLock会使用两把锁来解决问题，一个读锁，一个写锁</p><p>线程进入读锁的前提条件：</p><p>没有其他线程的写锁</p><p>没有写请求或者有写请求，但调用线程和持有锁的线程是同一个</p><p>线程进入写锁的前提条件：</p><p>没有其他线程的读锁</p><p>没有其他线程的写锁</p><p>读锁的重入是允许多个申请读操作的线程的，而写锁同时只允许单个线程占有，该线程的写操作可以重入。</p><p>如果一个线程占有了写锁，在不释放写锁的情况下，它还能占有读锁，即写锁降级为读锁。</p><p>对于同时占有读锁和写锁的线程，如果完全释放了写锁，那么它就完全转换成了读锁，以后的写操作无法重入，在写锁未完全释放时写操作是可以重入的。</p><p>公平模式下无论读锁还是写锁的申请都必须按照AQS锁等待队列先进先出的顺序。非公平模式下读操作插队的条件是锁等待队列head节点后的下一个节点是SHARED型节点，写锁则无条件插队。</p><p>读锁不允许newConditon获取Condition接口，而写锁的newCondition接口实现方法同ReentrantLock。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Java 面试题系列篇-面向对象</title>
      <link href="/2018/10/20/Java-%E9%9D%A2%E8%AF%95%E9%A2%98%E7%B3%BB%E5%88%97%E7%AF%87-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
      <url>/2018/10/20/Java-%E9%9D%A2%E8%AF%95%E9%A2%98%E7%B3%BB%E5%88%97%E7%AF%87-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</url>
      
        <content type="html"><![CDATA[<h2 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h2><h3 id="面向对象软件开发的优点有哪些？"><a href="#面向对象软件开发的优点有哪些？" class="headerlink" title="面向对象软件开发的优点有哪些？"></a>面向对象软件开发的优点有哪些？</h3><p>代码开发模块化，更易维护和修改。</p><p>代码复用。</p><p>增强代码的可靠性和灵活性。</p><p>增加代码的可理解性。</p><p>面向对象编程有很多重要的特性，比如：封装，继承，多态和抽象。</p><h3 id="封装的定义和好处有哪些？"><a href="#封装的定义和好处有哪些？" class="headerlink" title="封装的定义和好处有哪些？"></a>封装的定义和好处有哪些？</h3><p>封装给对象提供了隐藏内部特性和行为的能力。对象提供一些能被其他对象访问的方法来改变它内部的数据。在Java当中，有3种修饰符：public，private和protected。每一种修饰符给其他的位于同一个包或者不同包下面对象赋予了不同的访问权限。</p><p>下面列出了使用封装的一些好处：</p><p>通过隐藏对象的属性来保护对象内部的状态。</p><p>提高了代码的可用性和可维护性，因为对象的行为可以被单独的改变或者是扩展。</p><p>禁止对象之间的不良交互提高模块化。</p><p>参考这个文档获取更多关于封装的细节和示例。</p><p>或：</p><p>一是用private把类的细节与外界隔离起来，从而实现数据项和方法的隐藏，而要访问这些数据项和方法唯一的途径就是通过类本身，类才有资格调用它所拥有的资源（方法，数据项属性等等）。所以第一个好处就是数据的安全性提高了。</p><p>二是通过隐藏隔离，只允许外部对类做有限的访问，开发者可以自由的改变类的内部实现，而无需修改使用该类的那些程序。只要那些在类外部就能被调用的方法保持其外部特征不变，内部代码就可以自由改变，各取所需，利于分工。</p><p>三就是提高了代码的重用性，封装成工具类以后能够减少很多繁琐的步骤。</p><h3 id="多态的定义？"><a href="#多态的定义？" class="headerlink" title="多态的定义？"></a>多态的定义？</h3><p>多态是编程语言给不同的底层数据类型做相同的接口展示的一种能力。一个多态类型上的操作可以应用到其他类型的值上面。</p><h3 id="继承的定义？"><a href="#继承的定义？" class="headerlink" title="继承的定义？"></a>继承的定义？</h3><p>继承给对象提供了从基类获取字段和方法的能力。继承提供了代码的重用行，也可以在不修改类的情况下给现存的类添加新特性。</p><h3 id="抽象的定义？抽象和封装的不同点？"><a href="#抽象的定义？抽象和封装的不同点？" class="headerlink" title="抽象的定义？抽象和封装的不同点？"></a>抽象的定义？抽象和封装的不同点？</h3><p>抽象是把想法从具体的实例中分离出来的步骤，因此，要根据他们的功能而不是实现细节来创建类。Java支持创建只暴漏接口而不包含方法实现的抽象的类。这种抽象技术的主要目的是把类的行为和实现细节分离开。</p><p>抽象和封装是互补的概念。一方面，抽象关注对象的行为。另一方面，封装关注对象行为的细节。一般是通过隐藏对象内部状态信息做到封装，因此，封装可以看成是用来提供抽象的一种策略。</p><h3 id="简述一下面向对象的”六原则一法则”。"><a href="#简述一下面向对象的”六原则一法则”。" class="headerlink" title="简述一下面向对象的”六原则一法则”。"></a>简述一下面向对象的”六原则一法则”。</h3><p>答： </p><ul><li>单一职责原则：</li></ul><p>一个类只做它该做的事情。（单一职责原则想表达的就是”高内聚”，写代码最终极的原则只有六个字”高内聚、低耦合”，就如同葵花宝典或辟邪剑谱的中心思想就八个字”欲练此功必先自宫”，所谓的高内聚就是一个代码模块只完成一项功能，在面向对象中，如果只让一个类完成它该做的事，而不涉及与它无关的领域就是践行了高内聚的原则，这个类就只有单一职责。我们都知道一句话叫”因为专注，所以专业”，一个对象如果承担太多的职责，那么注定它什么都做不好。这个世界上任何好的东西都有两个特征，一个是功能单一，好的相机绝对不是电视购物里面卖的那种一个机器有一百多种功能的，它基本上只能照相；另一个是模块化，好的自行车是组装车，从减震叉、刹车到变速器，所有的部件都是可以拆卸和重新组装的，好的乒乓球拍也不是成品拍，一定是底板和胶皮可以拆分和自行组装的，一个好的软件系统，它里面的每个功能模块也应该是可以轻易的拿到其他系统中使用的，这样才能实现软件复用的目标。） </p><ul><li>开闭原则：</li></ul><p>软件实体应当对扩展开放，对修改关闭。（在理想的状态下，当我们需要为一个软件系统增加新功能时，只需要从原来的系统派生出一些新类就可以，不需要修改原来的任何一行代码。要做到开闭有两个要点：①抽象是关键，一个系统中如果没有抽象类或接口系统就没有扩展点；②封装可变性，将系统中的各种可变因素封装到一个继承结构中，如果多个可变因素混杂在一起，系统将变得复杂而换乱，如果不清楚如何封装可变性，可以参考《设计模式精解》一书中对桥梁模式的讲解的章节。） </p><ul><li>依赖倒转原则：</li></ul><p>面向接口编程。（该原则说得直白和具体一些就是声明方法的参数类型、方法的返回类型、变量的引用类型时，尽可能使用抽象类型而不用具体类型，因为抽象类型可以被它的任何一个子类型所替代，请参考下面的里氏替换原则。） </p><p>里氏替换原则：</p><p>任何时候都可以用子类型替换掉父类型。（关于里氏替换原则的描述，Barbara Liskov女士的描述比这个要复杂得多，但简单的说就是能用父类型的地方就一定能使用子类型。里氏替换原则可以检查继承关系是否合理，如果一个继承关系违背了里氏替换原则，那么这个继承关系一定是错误的，需要对代码进行重构。例如让猫继承狗，或者狗继承猫，又或者让正方形继承长方形都是错误的继承关系，因为你很容易找到违反里氏替换原则的场景。需要注意的是：子类一定是增加父类的能力而不是减少父类的能力，因为子类比父类的能力更多，把能力多的对象当成能力少的对象来用当然没有任何问题。） </p><ul><li>接口隔离原则：</li></ul><p>接口要小而专，绝不能大而全。（臃肿的接口是对接口的污染，既然接口表示能力，那么一个接口只应该描述一种能力，接口也应该是高度内聚的。例如，琴棋书画就应该分别设计为四个接口，而不应设计成一个接口中的四个方法，因为如果设计成一个接口中的四个方法，那么这个接口很难用，毕竟琴棋书画四样都精通的人还是少数，而如果设计成四个接口，会几项就实现几个接口，这样的话每个接口被复用的可能性是很高的。Java中的接口代表能力、代表约定、代表角色，能否正确的使用接口一定是编程水平高低的重要标识。） </p><ul><li>合成聚合复用原则：</li></ul><p>优先使用聚合或合成关系复用代码。（通过继承来复用代码是面向对象程序设计中被滥用得最多的东西，因为所有的教科书都无一例外的对继承进行了鼓吹从而误导了初学者，类与类之间简单的说有三种关系，Is-A关系、Has-A关系、Use-A关系，分别代表继承、关联和依赖。其中，关联关系根据其关联的强度又可以进一步划分为关联、聚合和合成，但说白了都是Has-A关系，合成聚合复用原则想表达的是优先考虑Has-A关系而不是Is-A关系复用代码，原因嘛可以自己从百度上找到一万个理由，需要说明的是，即使在Java的API中也有不少滥用继承的例子，例如Properties类继承了Hashtable类，Stack类继承了Vector类，这些继承明显就是错误的，更好的做法是在Properties类中放置一个Hashtable类型的成员并且将其键和值都设置为字符串来存储数据，而Stack类的设计也应该是在Stack类中放一个Vector对象来存储数据。记住：任何时候都不要继承工具类，工具是可以拥有并可以使用的，而不是拿来继承的。） </p><ul><li>迪米特法则：</li></ul><p>迪米特法则又叫最少知识原则，一个对象应当对其他对象有尽可能少的了解。（迪米特法则简单的说就是如何做到”低耦合”，门面模式和调停者模式就是对迪米特法则的践行。对于门面模式可以举一个简单的例子，你去一家公司洽谈业务，你不需要了解这个公司内部是如何运作的，你甚至可以对这个公司一无所知，去的时候只需要找到公司入口处的前台美女，告诉她们你要做什么，她们会找到合适的人跟你接洽，前台的美女就是公司这个系统的门面。再复杂的系统都可以为用户提供一个简单的门面，Java Web开发中作为前端控制器的Servlet或Filter不就是一个门面吗，浏览器对服务器的运作方式一无所知，但是通过前端控制器就能够根据你的请求得到相应的服务。调停者模式也可以举一个简单的例子来说明，例如一台计算机，CPU、内存、硬盘、显卡、声卡各种设备需要相互配合才能很好的工作，但是如果这些东西都直接连接到一起，计算机的布线将异常复杂，在这种情况下，主板作为一个调停者的身份出现，它将各个设备连接在一起而不需要每个设备之间直接交换数据，这样就减小了系统的耦合度和复杂度，如下图所示。迪米特法则用通俗的话来将就是不要和陌生人打交道，如果真的需要，找一个自己的朋友，让他替你和陌生人打交道。）</p>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Java-面试题系列篇-编程基础</title>
      <link href="/2018/10/19/Java-%E9%9D%A2%E8%AF%95%E9%A2%98%E7%B3%BB%E5%88%97%E7%AF%87-%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80/"/>
      <url>/2018/10/19/Java-%E9%9D%A2%E8%AF%95%E9%A2%98%E7%B3%BB%E5%88%97%E7%AF%87-%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<p>本文主要是对近年来出现的Java面试题进行整理汇总，方便大家更好的准备面试.</p><a id="more"></a><h2 id="编程基础"><a href="#编程基础" class="headerlink" title="编程基础"></a>编程基础</h2><h3 id="面向对象的特征有哪些方面？"><a href="#面向对象的特征有哪些方面？" class="headerlink" title="面向对象的特征有哪些方面？"></a>面向对象的特征有哪些方面？</h3><p>答：面向对象的特征主要有以下几个方面： </p><p>抽象：抽象是将一类对象的共同特征总结出来构造类的过程，包括数据抽象和行为抽象两方面。抽象只关注对象有哪些属性和行为，并不关注这些行为的细节是什么。 </p><p>继承：继承是从已有类得到继承信息创建新类的过程。提供继承信息的类被称为父类（超类、基类）；得到继承信息的类被称为子类（派生类）。继承让变化中的软件系统有了一定的延续性，同时继承也是封装程序中可变因素的重要手段（如果不能理解请阅读阎宏博士的《Java与模式》或《设计模式精解》中关于桥梁模式的部分）。 </p><p>封装：通常认为封装是把数据和操作数据的方法绑定起来，对数据的访问只能通过已定义的接口。面向对象的本质就是将现实世界描绘成一系列完全自治、封闭的对象。我们在类中编写的方法就是对实现细节的一种封装；我们编写一个类就是对数据和数据操作的封装。可以说，封装就是隐藏一切可隐藏的东西，只向外界提供最简单的编程接口（可以想想普通洗衣机和全自动洗衣机的差别，明显全自动洗衣机封装更好因此操作起来更简单；我们现在使用的智能手机也是封装得足够好的，因为几个按键就搞定了所有的事情）。 </p><p>多态性：多态性是指允许不同子类型的对象对同一消息作出不同的响应。简单的说就是用同样的对象引用调用同样的方法但是做了不同的事情。多态性分为编译时的多态性和运行时的多态性。如果将对象的方法视为对象向外界提供的服务，那么运行时的多态性可以解释为：当A系统访问B系统提供的服务时，B系统有多种提供服务的方式，但一切对A系统来说都是透明的（就像电动剃须刀是A系统，它的供电系统是B系统，B系统可以使用电池供电或者用交流电，甚至还有可能是太阳能，A系统只会通过B类对象调用供电的方法，但并不知道供电系统的底层实现是什么，究竟通过何种方式获得了动力）。方法重载（overload）实现的是编译时的多态性（也称为前绑定），而方法重写（override）实现的是运行时的多态性（也称为后绑定）。运行时的多态是面向对象最精髓的东西，要实现多态需要做两件事：1). 方法重写（子类继承父类并重写父类中已有的或抽象的方法）；2). 对象造型（用父类型引用子类型对象，这样同样的引用调用同样的方法就会根据子类对象的不同而表现出不同的行为）。</p><h3 id="访问修饰符有哪些？区别？"><a href="#访问修饰符有哪些？区别？" class="headerlink" title="访问修饰符有哪些？区别？"></a>访问修饰符有哪些？区别？</h3><table><thead><tr><th>修饰符</th><th>当前类</th><th>同 包</th><th>子 类</th><th>其他包</th></tr></thead><tbody><tr><td>public</td><td>√</td><td>√</td><td>√</td><td>√</td></tr><tr><td>protected</td><td>√</td><td>√</td><td>√</td><td>×</td></tr><tr><td>default</td><td>√</td><td>√</td><td>×</td><td>×</td></tr><tr><td>private</td><td>√</td><td>×</td><td>×</td><td>×</td></tr></tbody></table><h3 id="String-是最基本的数据类型吗？"><a href="#String-是最基本的数据类型吗？" class="headerlink" title="String 是最基本的数据类型吗？"></a>String 是最基本的数据类型吗？</h3><p>答：不是。Java中的基本数据类型只有8个：byte、short、int、long、float、double、char、boolean；除了基本类型（primitive type），剩下的都是引用类型（reference type），Java 5以后引入的枚举类型也算是一种比较特殊的引用类型。</p><h3 id="float-f-3-4-是否正确？"><a href="#float-f-3-4-是否正确？" class="headerlink" title="float f=3.4;是否正确？"></a>float f=3.4;是否正确？</h3><p>答:不正确。3.4是双精度数，将双精度型（double）赋值给浮点型（float）属于下转型（down-casting，也称为窄化）会造成精度损失，因此需要强制类型转换float f =(float)3.4; 或者写成float f =3.4F。</p><h3 id="short-s1-1-s1-s1-1-有错吗-short-s1-1-s1-1-有错吗？"><a href="#short-s1-1-s1-s1-1-有错吗-short-s1-1-s1-1-有错吗？" class="headerlink" title="short s1 = 1; s1 = s1 + 1;有错吗?short s1 = 1; s1 += 1;有错吗？"></a>short s1 = 1; s1 = s1 + 1;有错吗?short s1 = 1; s1 += 1;有错吗？</h3><p>答：对于short s1 = 1; s1 = s1 + 1;由于1是int类型，因此s1+1运算结果也是int 型，需要强制转换类型才能赋值给short型。而short s1 = 1; s1 += 1;可以正确编译，因为s1+= 1;相当于s1 = (short)(s1 + 1);其中有隐含的强制类型转换。</p><h3 id="Java有没有goto？"><a href="#Java有没有goto？" class="headerlink" title="Java有没有goto？"></a>Java有没有goto？</h3><p>答：goto 是Java中的保留字，在目前版本的Java中没有使用。（根据James Gosling（Java之父）编写的《The Java Programming Language》一书的附录中给出了一个Java关键字列表，其中有goto和const，但是这两个是目前无法使用的关键字，因此有些地方将其称之为保留字，其实保留字这个词应该有更广泛的意义，因为熟悉C语言的程序员都知道，在系统类库中使用过的有特殊意义的单词或单词的组合都被视为保留字）</p><h3 id="int和Integer有什么区别？"><a href="#int和Integer有什么区别？" class="headerlink" title="int和Integer有什么区别？"></a>int和Integer有什么区别？</h3><p>答：Java是一个近乎纯洁的面向对象编程语言，但是为了编程的方便还是引入了基本数据类型，但是为了能够将这些基本数据类型当成对象操作，Java为每一个基本数据类型都引入了对应的包装类型（wrapper class），int的包装类就是Integer，从Java 5开始引入了自动装箱/拆箱机制，使得二者可以相互转换。<br>Java 为每个原始类型提供了包装类型： </p><ul><li>原始类型: boolean，char，byte，short，int，long，float，double </li><li>包装类型：Boolean，Character，Byte，Short，Integer，Long，Float，Double</li></ul><p>class AutoUnboxingTest {</p><p>​    public static void main(String[] args) {</p><p>​        Integer a = new Integer(3);</p><p>​        Integer b = 3;                  // 将3自动装箱成Integer类型</p><p>​        int c = 3;</p><p>​        System.out.println(a == b);     // false 两个引用没有引用同一对象</p><p>​        System.out.println(a == c);     // true a自动拆箱成int类型再和c比较</p><p>​    }</p><p>}</p><p>最近还遇到一个面试题，也是和自动装箱和拆箱有点关系的，代码如下所示：</p><p>public class Test03 {</p><p>​    public static void main(String[] args) {</p><p>​        Integer f1 = 100, f2 = 100, f3 = 150, f4 = 150;</p><p>​        System.out.println(f1 == f2);</p><p>​        System.out.println(f3 == f4);</p><p>​    }</p><p>}</p><p>如果不明就里很容易认为两个输出要么都是true要么都是false。首先需要注意的是f1、f2、f3、f4四个变量都是Integer对象引用，所以下面的==运算比较的不是值而是引用。装箱的本质是什么呢？当我们给一个Integer对象赋一个int值的时候，会调用Integer类的静态方法valueOf，如果看看valueOf的源代码就知道发生了什么。</p><p>​    public static Integer valueOf(int i) {</p><p>​        if (i &gt;= IntegerCache.low &amp;&amp; i &lt;= IntegerCache.high)</p><p>​            return IntegerCache.cache[i + (-IntegerCache.low)];</p><p>​        return new Integer(i);</p><p>​    }</p><p>IntegerCache是Integer的内部类，其代码如下所示：</p><p>/**</p><p>​     * Cache to support the object identity semantics of autoboxing for values between</p><p>​     * -128 and 127 (inclusive) as required by JLS.</p><p>​     *</p><p>​     * The cache is initialized on first usage.  The size of the cache</p><p>​     * may be controlled by the {@code -XX:AutoBoxCacheMax=<size>} option.</size></p><p>​     * During VM initialization, java.lang.Integer.IntegerCache.high property</p><p>​     * may be set and saved in the private system properties in the</p><p>​     * sun.misc.VM class.</p><p>​     */</p><p>​    private static class IntegerCache {</p><p>​        static final int low = -128;</p><p>​        static final int high;</p><p>​        static final Integer cache[];</p><p>​        static {</p><p>​            // high value may be configured by property</p><p>​            int h = 127;</p><p>​            String integerCacheHighPropValue =</p><p>​                sun.misc.VM.getSavedProperty(“java.lang.Integer.IntegerCache.high”);</p><p>​            if (integerCacheHighPropValue != null) {</p><p>​                try {</p><p>​                    int i = parseInt(integerCacheHighPropValue);</p><p>​                    i = Math.max(i, 127);</p><p>​                    // Maximum array size is Integer.MAX_VALUE</p><p>​                    h = Math.min(i, Integer.MAX_VALUE - (-low) -1);</p><p>​                } catch( NumberFormatException nfe) {</p><p>​                    // If the property cannot be parsed into an int, ignore it.</p><p>​                }</p><p>​            }</p><p>​            high = h;</p><p>​            cache = new Integer[(high - low) + 1];</p><p>​            int j = low;</p><p>​            for(int k = 0; k &lt; cache.length; k++)</p><p>​                cache[k] = new Integer(j++);</p><p>​            // range [-128, 127] must be interned (JLS7 5.1.7)</p><p>​            assert IntegerCache.high &gt;= 127;</p><p>​        }</p><p>​        private IntegerCache() {}</p><p>​    }</p><p>简单的说，如果整型字面量的值在-128到127之间，那么不会new新的Integer对象，而是直接引用常量池中的Integer对象，所以上面的面试题中f1==f2的结果是true，而f3==f4的结果是false。</p><p>提醒：越是貌似简单的面试题其中的玄机就越多，需要面试者有相当深厚的功力。</p><h3 id="amp-和-amp-amp-的区别？"><a href="#amp-和-amp-amp-的区别？" class="headerlink" title="&amp;和&amp;&amp;的区别？"></a>&amp;和&amp;&amp;的区别？</h3><p>答：&amp;运算符有两种用法：(1)按位与；(2)逻辑与。&amp;&amp;运算符是短路与运算。逻辑与跟短路与的差别是非常巨大的，虽然二者都要求运算符左右两端的布尔值都是true整个表达式的值才是true。&amp;&amp;之所以称为短路运算是因为，如果&amp;&amp;左边的表达式的值是false，右边的表达式会被直接短路掉，不会进行运算。很多时候我们可能都需要用&amp;&amp;而不是&amp;，例如在验证用户登录时判定用户名不是null而且不是空字符串，应当写为：username != null &amp;&amp;!username.equals(“”)，二者的顺序不能交换，更不能用&amp;运算符，因为第一个条件如果不成立，根本不能进行字符串的equals比较，否则会产生NullPointerException异常。注意：逻辑或运算符（|）和短路或运算符（||）的差别也是如此。</p><p>补充：如果你熟悉JavaScript，那你可能更能感受到短路运算的强大，想成为JavaScript的高手就先从玩转短路运算开始吧。</p><h3 id="解释内存中的栈-stack-、堆-heap-和方法区-method-area-的用法。"><a href="#解释内存中的栈-stack-、堆-heap-和方法区-method-area-的用法。" class="headerlink" title="解释内存中的栈(stack)、堆(heap)和方法区(method area)的用法。"></a>解释内存中的栈(stack)、堆(heap)和方法区(method area)的用法。</h3><p>答：通常我们定义一个基本数据类型的变量，一个对象的引用，还有就是函数调用的现场保存都使用JVM中的栈空间；而通过new关键字和构造器创建的对象则放在堆空间，堆是垃圾收集器管理的主要区域，由于现在的垃圾收集器都采用分代收集算法，所以堆空间还可以细分为新生代和老生代，再具体一点可以分为Eden、Survivor（又可分为From Survivor和To Survivor）、Tenured；方法区和堆都是各个线程共享的内存区域，用于存储已经被JVM加载的类信息、常量、静态变量、JIT编译器编译后的代码等数据；程序中的字面量（literal）如直接书写的100、”hello”和常量都是放在常量池中，常量池是方法区的一部分，。栈空间操作起来最快但是栈很小，通常大量的对象都是放在堆空间，栈和堆的大小都可以通过JVM的启动参数来进行调整，栈空间用光了会引发StackOverflowError，而堆和常量池空间不足则会引发OutOfMemoryError。</p><p>String str = new String(“hello”);</p><p>上面的语句中变量str放在栈上，用new创建出来的字符串对象放在堆上，而”hello”这个字面量是放在方法区的。</p><p>补充1：较新版本的Java（从Java 6的某个更新开始）中，由于JIT编译器的发展和”逃逸分析”技术的逐渐成熟，栈上分配、标量替换等优化技术使得对象一定分配在堆上这件事情已经变得不那么绝对了。</p><p>补充2：运行时常量池相当于Class文件常量池具有动态性，Java语言并不要求常量一定只有编译期间才能产生，运行期间也可以将新的常量放入池中，String类的intern()方法就是这样的。</p><p>看看下面代码的执行结果是什么并且比较一下Java 7以前和以后的运行结果是否一致。</p><p>String s1 = new StringBuilder(“go”)</p><p>​    .append(“od”).toString();</p><p>System.out.println(s1.intern() == s1);</p><p>String s2 = new StringBuilder(“ja”)</p><p>​    .append(“va”).toString();</p><p>System.out.println(s2.intern() == s2);</p><h3 id="Math-round-11-5-等于多少？Math-round-11-5-等于多少？"><a href="#Math-round-11-5-等于多少？Math-round-11-5-等于多少？" class="headerlink" title="Math.round(11.5) 等于多少？Math.round(-11.5)等于多少？"></a>Math.round(11.5) 等于多少？Math.round(-11.5)等于多少？</h3><p> 答：Math.round(11.5)的返回值是12，Math.round(-11.5)的返回值是-11。四舍五入的原理是在参数上加0.5然后向下取整。</p><h3 id="switch-是否能作用在byte-上，是否能作用在long-上，是否能作用在String上？"><a href="#switch-是否能作用在byte-上，是否能作用在long-上，是否能作用在String上？" class="headerlink" title="switch 是否能作用在byte 上，是否能作用在long 上，是否能作用在String上？"></a>switch 是否能作用在byte 上，是否能作用在long 上，是否能作用在String上？</h3><p>答：</p><p>（1）在Java 5以前，switch(expr)中，expr只能是byte、short、char、int。</p><p>（2）从Java 5开始，Java中引入了枚举类型，expr也可以是enum类型，</p><p>（3）从Java 7开始，expr还可以是字符串（String）。</p><p>但是长整型（long）在目前所有的版本中都是不可以的。</p><h3 id="用最有效率的方法计算2乘以8？"><a href="#用最有效率的方法计算2乘以8？" class="headerlink" title="用最有效率的方法计算2乘以8？"></a>用最有效率的方法计算2乘以8？</h3><p>答： 2 &lt;&lt; 3（左移3位相当于乘以2的3次方，右移3位相当于除以2的3次方）。</p><p>补充：我们为编写的类重写hashCode方法时，可能会看到如下所示的代码，其实我们不太理解为什么要使用这样的乘法运算来产生哈希码（散列码），而且为什么这个数是个素数，为什么通常选择31这个数？前两个问题的答案你可以自己百度一下，选择31是因为可以用移位和减法运算来代替乘法，从而得到更好的性能。说到这里你可能已经想到了：31 * num 等价于(num &lt;&lt; 5) - num，左移5位相当于乘以2的5次方再减去自身就相当于乘以31，现在的VM都能自动完成这个优化。</p><p>public class PhoneNumber {</p><p>​    private int areaCode;</p><p>​    private String prefix;</p><p>​    private String lineNumber;</p><p>​    @Override</p><p>​    public int hashCode() {</p><p>​        final int prime = 31;</p><p>​        int result = 1;</p><p>​        result = prime * result + areaCode;</p><p>​        result = prime * result</p><p>​                + ((lineNumber == null) ? 0 : lineNumber.hashCode());</p><p>​        result = prime * result + ((prefix == null) ? 0 : prefix.hashCode());</p><p>​        return result;</p><p>​    }</p><p>​    @Override</p><p>​    public boolean equals(Object obj) {</p><p>​        if (this == obj)</p><p>​            return true;</p><p>​        if (obj == null)</p><p>​            return false;</p><p>​        if (getClass() != obj.getClass())</p><p>​            return false;</p><p>​        PhoneNumber other = (PhoneNumber) obj;</p><p>​        if (areaCode != other.areaCode)</p><p>​            return false;</p><p>​        if (lineNumber == null) {</p><p>​            if (other.lineNumber != null)</p><p>​                return false;</p><p>​        } else if (!lineNumber.equals(other.lineNumber))</p><p>​            return false;</p><p>​        if (prefix == null) {</p><p>​            if (other.prefix != null)</p><p>​                return false;</p><p>​        } else if (!prefix.equals(other.prefix))</p><p>​            return false;</p><p>​        return true;</p><p>​    }</p><p>}</p><h3 id="数组有没有length-方法？String有没有length-方法？"><a href="#数组有没有length-方法？String有没有length-方法？" class="headerlink" title="数组有没有length()方法？String有没有length()方法？"></a>数组有没有length()方法？String有没有length()方法？</h3><p>答：数组没有length()方法，有length 的属性。String 有length()方法。JavaScript中，获得字符串的长度是通过length属性得到的，这一点容易和Java混淆。</p><h3 id="在Java中，如何跳出当前的多重嵌套循环？"><a href="#在Java中，如何跳出当前的多重嵌套循环？" class="headerlink" title="在Java中，如何跳出当前的多重嵌套循环？"></a>在Java中，如何跳出当前的多重嵌套循环？</h3><p>答：在最外层循环前加一个标记如A，然后用break A;可以跳出多重循环。（Java中支持带标签的break和continue语句，作用有点类似于C和C++中的goto语句，但是就像要避免使用goto一样，应该避免使用带标签的break和continue，因为它不会让你的程序变得更优雅，很多时候甚至有相反的作用，所以这种语法其实不知道更好）</p><h3 id="构造器（constructor）是否可被重写（override）？"><a href="#构造器（constructor）是否可被重写（override）？" class="headerlink" title="构造器（constructor）是否可被重写（override）？"></a>构造器（constructor）是否可被重写（override）？</h3><p>答：构造器不能被继承，因此不能被重写，但可以被重载。</p><h3 id="两个对象值相同-x-equals-y-true-，但却可有不同的hash-code，这句话对不对？"><a href="#两个对象值相同-x-equals-y-true-，但却可有不同的hash-code，这句话对不对？" class="headerlink" title="两个对象值相同(x.equals(y) == true)，但却可有不同的hash code，这句话对不对？"></a>两个对象值相同(x.equals(y) == true)，但却可有不同的hash code，这句话对不对？</h3><p>答：不对，如果两个对象x和y满足x.equals(y) == true，它们的哈希码（hash code）应当相同。Java对于eqauls方法和hashCode方法是这样规定的：(1)如果两个对象相同（equals方法返回true），那么它们的hashCode值一定要相同；(2)如果两个对象的hashCode相同，它们并不一定相同。当然，你未必要按照要求去做，但是如果你违背了上述原则就会发现在使用容器时，相同的对象可以出现在Set集合中，同时增加新元素的效率会大大下降（对于使用哈希存储的系统，如果哈希码频繁的冲突将会造成存取性能急剧下降）。</p><p>补充：关于equals和hashCode方法，很多Java程序都知道，但很多人也就是仅仅知道而已，在Joshua Bloch的大作《Effective Java》（很多软件公司，《Effective Java》、《Java编程思想》以及《重构：改善既有代码质量》是Java程序员必看书籍，如果你还没看过，那就赶紧去亚马逊买一本吧）中是这样介绍equals方法的：首先equals方法必须满足自反性（x.equals(x)必须返回true）、对称性（x.equals(y)返回true时，y.equals(x)也必须返回true）、传递性（x.equals(y)和y.equals(z)都返回true时，x.equals(z)也必须返回true）和一致性（当x和y引用的对象信息没有被修改时，多次调用x.equals(y)应该得到同样的返回值），而且对于任何非null值的引用x，x.equals(null)必须返回false。实现高质量的equals方法的诀窍包括：1. 使用==操作符检查”参数是否为这个对象的引用”；2. 使用instanceof操作符检查”参数是否为正确的类型”；3. 对于类中的关键属性，检查参数传入对象的属性是否与之相匹配；4. 编写完equals方法后，问自己它是否满足对称性、传递性、一致性；5. 重写equals时总是要重写hashCode；6. 不要将equals方法参数中的Object对象替换为其他的类型，在重写时不要忘掉@Override注解。</p><h3 id="是否可以继承String类？"><a href="#是否可以继承String类？" class="headerlink" title="是否可以继承String类？"></a>是否可以继承String类？</h3><p>答：String 类是final类，不可以被继承。</p><p>补充：继承String本身就是一个错误的行为，对String类型最好的重用方式是关联关系（Has-A）和依赖关系（Use-A）而不是继承关系（Is-A）。</p><h3 id="当一个对象被当作参数传递到一个方法后，此方法可改变这个对象的属性，并可返回变化后的结果，那么这里到底是值传递还是引用传递？"><a href="#当一个对象被当作参数传递到一个方法后，此方法可改变这个对象的属性，并可返回变化后的结果，那么这里到底是值传递还是引用传递？" class="headerlink" title="当一个对象被当作参数传递到一个方法后，此方法可改变这个对象的属性，并可返回变化后的结果，那么这里到底是值传递还是引用传递？"></a>当一个对象被当作参数传递到一个方法后，此方法可改变这个对象的属性，并可返回变化后的结果，那么这里到底是值传递还是引用传递？</h3><p>答：是值传递。Java语言的方法调用只支持参数的值传递。当一个对象实例作为一个参数被传递到方法中时，参数的值就是对该对象的引用。对象的属性可以在被调用过程中被改变，但对对象引用的改变是不会影响到调用者的。C++和C#中可以通过传引用或传输出参数来改变传入的参数的值。在C#中可以编写如下所示的代码，但是在Java中却做不到。</p><p>using System;</p><p>namespace CS01 {</p><p>​    class Program {</p><p>​        public static void swap(ref int x, ref int y) {</p><p>​            int temp = x;</p><p>​            x = y;</p><p>​            y = temp;</p><p>​        }</p><p>​        public static void Main (string[] args) {</p><p>​            int a = 5, b = 10;</p><p>​            swap (ref a, ref b);</p><p>​            // a = 10, b = 5;</p><p>​            Console.WriteLine (“a = {0}, b = {1}”, a, b);</p><p>​        }</p><p>​    }</p><p>}</p><p>说明：Java中没有传引用实在是非常的不方便，这一点在Java 8中仍然没有得到改进，正是如此在Java编写的代码中才会出现大量的Wrapper类（将需要通过方法调用修改的引用置于一个Wrapper类中，再将Wrapper对象传入方法），这样的做法只会让代码变得臃肿，尤其是让从C和C++转型为Java程序员的开发者无法容忍。</p><h3 id="String和StringBuilder、StringBuffer的区别？"><a href="#String和StringBuilder、StringBuffer的区别？" class="headerlink" title="String和StringBuilder、StringBuffer的区别？"></a>String和StringBuilder、StringBuffer的区别？</h3><p> 答：Java平台提供了两种类型的字符串：String和StringBuffer/StringBuilder，它们可以储存和操作字符串。其中String是只读字符串，也就意味着String引用的字符串内容是不能被改变的。而StringBuffer/StringBuilder类表示的字符串对象可以直接进行修改。StringBuilder是Java 5中引入的，它和StringBuffer的方法完全相同，区别在于它是在单线程环境下使用的，因为它的所有方面都没有被synchronized修饰，因此它的效率也比StringBuffer要高。</p><p>面试题1 - 什么情况下用+运算符进行字符串连接比调用StringBuffer/StringBuilder对象的append方法连接字符串性能更好？</p><p>面试题2 - 请说出下面程序的输出。</p><p>class StringEqualTest {</p><p>​    public static void main(String[] args) {</p><p>​        String s1 = “Programming”;</p><p>​        String s2 = new String(“Programming”);</p><p>​        String s3 = “Program”;</p><p>​        String s4 = “ming”;</p><p>​        String s5 = “Program” + “ming”;</p><p>​        String s6 = s3 + s4;</p><p>​        System.out.println(s1 == s2);</p><p>​        System.out.println(s1 == s5);</p><p>​        System.out.println(s1 == s6);</p><p>​        System.out.println(s1 == s6.intern());</p><p>​        System.out.println(s2 == s2.intern());</p><p>​    }</p><p>}</p><p>补充：解答上面的面试题需要清楚两点：1. String对象的intern方法会得到字符串对象在常量池中对应的版本的引用（如果常量池中有一个字符串与String对象的equals结果是true），如果常量池中没有对应的字符串，则该字符串将被添加到常量池中，然后返回常量池中字符串的引用；2. 字符串的+操作其本质是创建了StringBuilder对象进行append操作，然后将拼接后的StringBuilder对象用toString方法处理成String对象，这一点可以用javap -c StringEqualTest.class命令获得class文件对应的JVM字节码指令就可以看出来。</p><h3 id="重载（Overload）和重写（Override）的区别。重载的方法能否根据返回类型进行区分？"><a href="#重载（Overload）和重写（Override）的区别。重载的方法能否根据返回类型进行区分？" class="headerlink" title="重载（Overload）和重写（Override）的区别。重载的方法能否根据返回类型进行区分？"></a>重载（Overload）和重写（Override）的区别。重载的方法能否根据返回类型进行区分？</h3><p>答：方法的重载和重写都是实现多态的方式，区别在于前者实现的是编译时的多态性，而后者实现的是运行时的多态性。重载发生在一个类中，同名的方法如果有不同的参数列表（参数类型不同、参数个数不同或者二者都不同）则视为重载；重写发生在子类与父类之间，重写要求子类被重写方法与父类被重写方法有相同的返回类型，比父类被重写方法更好访问，不能比父类被重写方法声明更多的异常（里氏代换原则）。重载对返回类型没有特殊的要求。</p><p>面试题：华为的面试题中曾经问过这样一个问题 - “为什么不能根据返回类型来区分重载”，快说出你的答案吧！</p><h3 id="描述一下JVM加载class文件的原理机制？"><a href="#描述一下JVM加载class文件的原理机制？" class="headerlink" title="描述一下JVM加载class文件的原理机制？"></a>描述一下JVM加载class文件的原理机制？</h3><p>答：JVM中类的装载是由类加载器（ClassLoader）和它的子类来实现的，Java中的类加载器是一个重要的Java运行时系统组件，它负责在运行时查找和装入类文件中的类。<br>由于Java的跨平台性，经过编译的Java源程序并不是一个可执行程序，而是一个或多个类文件。当Java程序需要使用某个类时，JVM会确保这个类已经被加载、连接（验证、准备和解析）和初始化。类的加载是指把类的.class文件中的数据读入到内存中，通常是创建一个字节数组读入.class文件，然后产生与所加载类对应的Class对象。加载完成后，Class对象还不完整，所以此时的类还不可用。当类被加载后就进入连接阶段，这一阶段包括验证、准备（为静态变量分配内存并设置默认的初始值）和解析（将符号引用替换为直接引用）三个步骤。最后JVM对类进行初始化，包括：1)如果类存在直接的父类并且这个类还没有被初始化，那么就先初始化父类；2)如果类中存在初始化语句，就依次执行这些初始化语句。<br>类的加载是由类加载器完成的，类加载器包括：根加载器（BootStrap）、扩展加载器（Extension）、系统加载器（System）和用户自定义类加载器（java.lang.ClassLoader的子类）。从Java 2（JDK 1.2）开始，类加载过程采取了父亲委托机制（PDM）。PDM更好的保证了Java平台的安全性，在该机制中，JVM自带的Bootstrap是根加载器，其他的加载器都有且仅有一个父类加载器。类的加载首先请求父类加载器加载，父类加载器无能为力时才由其子类加载器自行加载。JVM不会向Java程序提供对Bootstrap的引用。下面是关于几个类加载器的说明：</p><p>Bootstrap：一般用本地代码实现，负责加载JVM基础核心类库（rt.jar）；</p><p>Extension：从java.ext.dirs系统属性所指定的目录中加载类库，它的父加载器是Bootstrap；</p><p>System：又叫应用类加载器，其父类是Extension。它是应用最广泛的类加载器。它从环境变量classpath或者系统属性java.class.path所指定的目录中记载类，是用户自定义加载器的默认父加载器。</p><h3 id="char-型变量中能不能存贮一个中文汉字，为什么？"><a href="#char-型变量中能不能存贮一个中文汉字，为什么？" class="headerlink" title="char 型变量中能不能存贮一个中文汉字，为什么？"></a>char 型变量中能不能存贮一个中文汉字，为什么？</h3><p> 答：char类型可以存储一个中文汉字，因为Java中使用的编码是Unicode（不选择任何特定的编码，直接使用字符在字符集中的编号，这是统一的唯一方法），一个char类型占2个字节（16比特），所以放一个中文是没问题的。</p><p>补充：使用Unicode意味着字符在JVM内部和外部有不同的表现形式，在JVM内部都是Unicode，当这个字符被从JVM内部转移到外部时（例如存入文件系统中），需要进行编码转换。所以Java中有字节流和字符流，以及在字符流和字节流之间进行转换的转换流，如InputStreamReader和OutputStreamReader，这两个类是字节流和字符流之间的适配器类，承担了编码转换的任务；对于C程序员来说，要完成这样的编码转换恐怕要依赖于union（联合体/共用体）共享内存的特征来实现了。</p><h3 id="抽象类（abstract-class）和接口（interface）有什么异同？"><a href="#抽象类（abstract-class）和接口（interface）有什么异同？" class="headerlink" title="抽象类（abstract class）和接口（interface）有什么异同？"></a>抽象类（abstract class）和接口（interface）有什么异同？</h3><p>答：抽象类和接口都不能够实例化，但可以定义抽象类和接口类型的引用。一个类如果继承了某个抽象类或者实现了某个接口都需要对其中的抽象方法全部进行实现，否则该类仍然需要被声明为抽象类。接口比抽象类更加抽象，因为抽象类中可以定义构造器，可以有抽象方法和具体方法，而接口中不能定义构造器而且其中的方法全部都是抽象方法。抽象类中的成员可以是private、默认、protected、public的，而接口中的成员全都是public的。抽象类中可以定义成员变量，而接口中定义的成员变量实际上都是常量。有抽象方法的类必须被声明为抽象类，而抽象类未必要有抽象方法。</p><h3 id="静态嵌套类-Static-Nested-Class-和内部类（Inner-Class）的不同？"><a href="#静态嵌套类-Static-Nested-Class-和内部类（Inner-Class）的不同？" class="headerlink" title="静态嵌套类(Static Nested Class)和内部类（Inner Class）的不同？"></a>静态嵌套类(Static Nested Class)和内部类（Inner Class）的不同？</h3><p> 答：Static Nested Class是被声明为静态（static）的内部类，它可以不依赖于外部类实例被实例化。而通常的内部类需要在外部类实例化后才能实例化，其语法看起来挺诡异的，如下所示。</p><p>/**</p><ul><li><p>扑克类（一副扑克）</p></li><li><p>@author 骆昊</p><p>*</p><p>*/</p></li></ul><p>public class Poker {</p><p>​    private static String[] suites = {“黑桃”, “红桃”, “草花”, “方块”};</p><p>​    private static int[] faces = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13};</p><p>​    private Card[] cards;</p><p>​    /**</p><p>​     * 构造器</p><p>​     * </p><p>​     */</p><p>​    public Poker() {</p><p>​        cards = new Card[52];</p><p>​        for(int i = 0; i &lt; suites.length; i++) {</p><p>​            for(int j = 0; j &lt; faces.length; j++) {</p><p>​                cards[i * 13 + j] = new Card(suites[i], faces[j]);</p><p>​            }</p><p>​        }</p><p>​    }</p><p>​    /**</p><p>​     * 洗牌 （随机乱序）</p><p>​     * </p><p>​     */</p><p>​    public void shuffle() {</p><p>​        for(int i = 0, len = cards.length; i &lt; len; i++) {</p><p>​            int index = (int) (Math.random() * len);</p><p>​            Card temp = cards[index];</p><p>​            cards[index] = cards[i];</p><p>​            cards[i] = temp;</p><p>​        }</p><p>​    }</p><p>​    /**</p><p>​     * 发牌</p><p>​     * @param index 发牌的位置</p><p>​     * </p><p>​     */</p><p>​    public Card deal(int index) {</p><p>​        return cards[index];</p><p>​    }</p><p>​    /**</p><p>​     * 卡片类（一张扑克）</p><p>​     * [内部类]</p><p>​     * @author 骆昊</p><p>​     *</p><p>​     */</p><p>​    public class Card {</p><p>​        private String suite;   // 花色</p><p>​        private int face;       // 点数</p><p>​        public Card(String suite, int face) {</p><p>​            this.suite = suite;</p><p>​            this.face = face;</p><p>​        }</p><p>​        @Override</p><p>​        public String toString() {</p><p>​            String faceStr = “”;</p><p>​            switch(face) {</p><p>​            case 1: faceStr = “A”; break;</p><p>​            case 11: faceStr = “J”; break;</p><p>​            case 12: faceStr = “Q”; break;</p><p>​            case 13: faceStr = “K”; break;</p><p>​            default: faceStr = String.valueOf(face);</p><p>​            }</p><p>​            return suite + faceStr;</p><p>​        }</p><p>​    }</p><p>}</p><p>测试代码：</p><p>class PokerTest {</p><p>​    public static void main(String[] args) {</p><p>​        Poker poker = new Poker();</p><p>​        poker.shuffle();                // 洗牌</p><p>​        Poker.Card c1 = poker.deal(0);  // 发第一张牌</p><p>​        // 对于非静态内部类Card</p><p>​        // 只有通过其外部类Poker对象才能创建Card对象</p><p>​        Poker.Card c2 = poker.new Card(“红心”, 1);    // 自己创建一张牌</p><p>​        System.out.println(c1);     // 洗牌后的第一张</p><p>​        System.out.println(c2);     // 打印: 红心A</p><p>​    }</p><p>}</p><p>面试题 - 下面的代码哪些地方会产生编译错误？</p><p>class Outer {</p><p>​    class Inner {}</p><p>​    public static void foo() { new Inner(); }</p><p>​    public void bar() { new Inner(); }</p><p>​    public static void main(String[] args) {</p><p>​        new Inner();</p><p>​    }</p><p>}</p><p>注意：Java中非静态内部类对象的创建要依赖其外部类对象，上面的面试题中foo和main方法都是静态方法，静态方法中没有this，也就是说没有所谓的外部类对象，因此无法创建内部类对象，如果要在静态方法中创建内部类对象，可以这样做：</p><p>new Outer().new Inner();</p><h3 id="抽象的（abstract）方法是否可同时是静态的（static）-是否可同时是本地方法（native），是否可同时被synchronized修饰？"><a href="#抽象的（abstract）方法是否可同时是静态的（static）-是否可同时是本地方法（native），是否可同时被synchronized修饰？" class="headerlink" title="抽象的（abstract）方法是否可同时是静态的（static）,是否可同时是本地方法（native），是否可同时被synchronized修饰？"></a>抽象的（abstract）方法是否可同时是静态的（static）,是否可同时是本地方法（native），是否可同时被synchronized修饰？</h3><p> 答：都不能。抽象方法需要子类重写，而静态的方法是无法被重写的，因此二者是矛盾的。本地方法是由本地代码（如C代码）实现的方法，而抽象方法是没有实现的，也是矛盾的。synchronized和方法的实现细节有关，抽象方法不涉及实现细节，因此也是相互矛盾的。</p><h3 id="阐述静态变量和实例变量的区别。"><a href="#阐述静态变量和实例变量的区别。" class="headerlink" title="阐述静态变量和实例变量的区别。"></a>阐述静态变量和实例变量的区别。</h3><p> 答：静态变量是被static修饰符修饰的变量，也称为类变量，它属于类，不属于类的任何一个对象，一个类不管创建多少个对象，静态变量在内存中有且仅有一个拷贝；实例变量必须依存于某一实例，需要先创建对象然后通过对象才能访问到它。静态变量可以实现让多个对象共享内存。</p><p>补充：在Java开发中，上下文类和工具类中通常会有大量的静态成员。</p><h3 id="是否可以从一个静态（static）方法内部发出对非静态（non-static）方法的调用？"><a href="#是否可以从一个静态（static）方法内部发出对非静态（non-static）方法的调用？" class="headerlink" title="是否可以从一个静态（static）方法内部发出对非静态（non-static）方法的调用？"></a>是否可以从一个静态（static）方法内部发出对非静态（non-static）方法的调用？</h3><p>答：不可以，静态方法只能访问静态成员，因为非静态方法的调用要先创建对象，在调用静态方法时可能对象并没有被初始化。</p><h3 id="如何实现对象克隆？"><a href="#如何实现对象克隆？" class="headerlink" title="如何实现对象克隆？"></a>如何实现对象克隆？</h3><p> 答：有两种方式：<br>  1). 实现Cloneable接口并重写Object类中的clone()方法；<br>  2). 实现Serializable接口，通过对象的序列化和反序列化实现克隆，可以实现真正的深度克隆，代码如下。</p><p>import java.io.ByteArrayInputStream;</p><p>import java.io.ByteArrayOutputStream;</p><p>import java.io.ObjectInputStream;</p><p>import java.io.ObjectOutputStream;</p><p>import java.io.Serializable;</p><p>public class MyUtil {</p><p>​    private MyUtil() {</p><p>​        throw new AssertionError();</p><p>​    }</p><p>​    @SuppressWarnings(“unchecked”)</p><p>​    public static <t extends="" serializable=""> T clone(T obj) throws Exception {</t></p><p>​        ByteArrayOutputStream bout = new ByteArrayOutputStream();</p><p>​        ObjectOutputStream oos = new ObjectOutputStream(bout);</p><p>​        oos.writeObject(obj);</p><p>​        ByteArrayInputStream bin = new ByteArrayInputStream(bout.toByteArray());</p><p>​        ObjectInputStream ois = new ObjectInputStream(bin);</p><p>​        return (T) ois.readObject();</p><p>​        // 说明：调用ByteArrayInputStream或ByteArrayOutputStream对象的close方法没有任何意义</p><p>​        // 这两个基于内存的流只要垃圾回收器清理对象就能够释放资源，这一点不同于对外部资源（如文件流）的释放</p><p>​    }</p><p>}</p><p>下面是测试代码：</p><p>import java.io.Serializable;</p><p>/**</p><ul><li><p>人类</p></li><li><p>@author 骆昊</p><p>*</p><p>*/</p></li></ul><p>class Person implements Serializable {</p><p>​    private static final long serialVersionUID = -9102017020286042305L;</p><p>​    private String name;    // 姓名</p><p>​    private int age;        // 年龄</p><p>​    private Car car;        // 座驾</p><p>​    public Person(String name, int age, Car car) {</p><p>​        this.name = name;</p><p>​        this.age = age;</p><p>​        this.car = car;</p><p>​    }</p><p>​    public String getName() {</p><p>​        return name;</p><p>​    }</p><p>​    public void setName(String name) {</p><p>​        this.name = name;</p><p>​    }</p><p>​    public int getAge() {</p><p>​        return age;</p><p>​    }</p><p>​    public void setAge(int age) {</p><p>​        this.age = age;</p><p>​    }</p><p>​    public Car getCar() {</p><p>​        return car;</p><p>​    }</p><p>​    public void setCar(Car car) {</p><p>​        this.car = car;</p><p>​    }</p><p>​    @Override</p><p>​    public String toString() {</p><p>​        return “Person [name=” + name + “, age=” + age + “, car=” + car + “]”;</p><p>​    }</p><p>}</p><p>/**</p><ul><li><p>小汽车类</p></li><li><p>@author 骆昊</p><p>*</p><p>*/</p></li></ul><p>class Car implements Serializable {</p><p>​    private static final long serialVersionUID = -5713945027627603702L;</p><p>​    private String brand;       // 品牌</p><p>​    private int maxSpeed;       // 最高时速</p><p>​    public Car(String brand, int maxSpeed) {</p><p>​        this.brand = brand;</p><p>​        this.maxSpeed = maxSpeed;</p><p>​    }</p><p>​    public String getBrand() {</p><p>​        return brand;</p><p>​    }</p><p>​    public void setBrand(String brand) {</p><p>​        this.brand = brand;</p><p>​    }</p><p>​    public int getMaxSpeed() {</p><p>​        return maxSpeed;</p><p>​    }</p><p>​    public void setMaxSpeed(int maxSpeed) {</p><p>​        this.maxSpeed = maxSpeed;</p><p>​    }</p><p>​    @Override</p><p>​    public String toString() {</p><p>​        return “Car [brand=” + brand + “, maxSpeed=” + maxSpeed + “]”;</p><p>​    }</p><p>}</p><p>class CloneTest {</p><p>​    public static void main(String[] args) {</p><p>​        try {</p><p>​            Person p1 = new Person(“Hao LUO”, 33, new Car(“Benz”, 300));</p><p>​            Person p2 = MyUtil.clone(p1);   // 深度克隆</p><p>​            p2.getCar().setBrand(“BYD”);</p><p>​            // 修改克隆的Person对象p2关联的汽车对象的品牌属性</p><p>​            // 原来的Person对象p1关联的汽车不会受到任何影响</p><p>​            // 因为在克隆Person对象时其关联的汽车对象也被克隆了</p><p>​            System.out.println(p1);</p><p>​        } catch (Exception e) {</p><p>​            e.printStackTrace();</p><p>​        }</p><p>​    }</p><p>}</p><p>注意：基于序列化和反序列化实现的克隆不仅仅是深度克隆，更重要的是通过泛型限定，可以检查出要克隆的对象是否支持序列化，这项检查是编译器完成的，不是在运行时抛出异常，这种是方案明显优于使用Object类的clone方法克隆对象。让问题在编译的时候暴露出来总是好过把问题留到运行时。</p><h3 id="String-s-new-String-“xyz”-创建了几个字符串对象？"><a href="#String-s-new-String-“xyz”-创建了几个字符串对象？" class="headerlink" title="String s = new String(“xyz”);创建了几个字符串对象？"></a>String s = new String(“xyz”);创建了几个字符串对象？</h3><p>答：两个对象，一个是静态区的”xyz”，一个是用new创建在堆上的对象。</p><h3 id="接口是否可继承（extends）接口？抽象类是否可实现（implements）接口？抽象类是否可继承具体类（concrete-class）？"><a href="#接口是否可继承（extends）接口？抽象类是否可实现（implements）接口？抽象类是否可继承具体类（concrete-class）？" class="headerlink" title="接口是否可继承（extends）接口？抽象类是否可实现（implements）接口？抽象类是否可继承具体类（concrete class）？"></a>接口是否可继承（extends）接口？抽象类是否可实现（implements）接口？抽象类是否可继承具体类（concrete class）？</h3><p> 答：接口可以继承接口，而且支持多重继承。抽象类可以实现(implements)接口，抽象类可继承具体类也可以继承抽象类。</p><h3 id="一个”-java”源文件中是否可以包含多个类（不是内部类）？有什么限制？"><a href="#一个”-java”源文件中是否可以包含多个类（不是内部类）？有什么限制？" class="headerlink" title="一个”.java”源文件中是否可以包含多个类（不是内部类）？有什么限制？"></a>一个”.java”源文件中是否可以包含多个类（不是内部类）？有什么限制？</h3><p> 答：可以，但一个源文件中最多只能有一个公开类（public class）而且文件名必须和公开类的类名完全保持一致。</p><h3 id="Anonymous-Inner-Class-匿名内部类-是否可以继承其它类？是否可以实现接口？"><a href="#Anonymous-Inner-Class-匿名内部类-是否可以继承其它类？是否可以实现接口？" class="headerlink" title="Anonymous Inner Class(匿名内部类)是否可以继承其它类？是否可以实现接口？"></a>Anonymous Inner Class(匿名内部类)是否可以继承其它类？是否可以实现接口？</h3><p> 答：可以继承其他类或实现其他接口，在Swing编程和Android开发中常用此方式来实现事件监听和回调。</p><h3 id="内部类可以引用它的包含类（外部类）的成员吗？有没有什么限制？"><a href="#内部类可以引用它的包含类（外部类）的成员吗？有没有什么限制？" class="headerlink" title="内部类可以引用它的包含类（外部类）的成员吗？有没有什么限制？"></a>内部类可以引用它的包含类（外部类）的成员吗？有没有什么限制？</h3><p> 答：一个内部类对象可以访问创建它的外部类对象的成员，包括私有成员。</p><h3 id="Java-中的final关键字有哪些用法？"><a href="#Java-中的final关键字有哪些用法？" class="headerlink" title="Java 中的final关键字有哪些用法？"></a>Java 中的final关键字有哪些用法？</h3><p> 答：</p><p>(1)修饰类：表示该类不能被继承；</p><p>(2)修饰方法：表示方法不能被重写；</p><p>(3)修饰变量：表示变量只能一次赋值以后值不能被修改（常量）。</p><h3 id="指出下面程序的运行结果。"><a href="#指出下面程序的运行结果。" class="headerlink" title="指出下面程序的运行结果。"></a>指出下面程序的运行结果。</h3><p>class A {</p><p>​    static {</p><p>​        System.out.print(“1”);</p><p>​    }</p><p>​    public A() {</p><p>​        System.out.print(“2”);</p><p>​    }</p><p>}</p><p>class B extends A{</p><p>​    static {</p><p>​        System.out.print(“a”);</p><p>​    }</p><p>​    public B() {</p><p>​        System.out.print(“b”);</p><p>​    }</p><p>}</p><p>public class Hello {</p><p>​    public static void main(String[] args) {</p><p>​        A ab = new B();</p><p>​        ab = new B();</p><p>​    }</p><p>}</p><p>答：执行结果：1a2b2b。</p><p>创建对象时构造器的调用顺序是：</p><p>先初始化静态成员，</p><p>然后调用父类构造器，</p><p>再初始化非静态成员，</p><p>最后调用自身构造器。</p><p>提示：如果不能给出此题的正确答案，说明之前第21题Java类加载机制还没有完全理解，赶紧再看看吧。</p><h3 id="数据类型之间的转换：-如何将字符串转换为基本数据类型？-如何将基本数据类型转换为字符串？"><a href="#数据类型之间的转换：-如何将字符串转换为基本数据类型？-如何将基本数据类型转换为字符串？" class="headerlink" title="数据类型之间的转换：  - 如何将字符串转换为基本数据类型？  - 如何将基本数据类型转换为字符串？"></a>数据类型之间的转换：  - 如何将字符串转换为基本数据类型？  - 如何将基本数据类型转换为字符串？</h3><p>答： </p><ul><li>调用基本数据类型对应的包装类中的方法parseXXX(String)或valueOf(String)即可返回相应基本类型； </li><li>一种方法是将基本数据类型与空字符串（””）连接（+）即可获得其所对应的字符串；另一种方法是调用String 类中的valueOf()方法返回相应字符串</li></ul><h3 id="如何实现字符串的反转及替换？"><a href="#如何实现字符串的反转及替换？" class="headerlink" title="如何实现字符串的反转及替换？"></a>如何实现字符串的反转及替换？</h3><p>答：方法很多，可以自己写实现也可以使用String或StringBuffer/StringBuilder中的方法。有一道很常见的面试题是用递归实现字符串反转，代码如下所示：</p><p>​    public static String reverse(String originStr) {</p><p>​        if(originStr == null || originStr.length() &lt;= 1) </p><p>​            return originStr;</p><p>​        return reverse(originStr.substring(1)) + originStr.charAt(0);</p><p>​    }</p><h3 id="怎样将GB2312编码的字符串转换为ISO-8859-1编码的字符串？"><a href="#怎样将GB2312编码的字符串转换为ISO-8859-1编码的字符串？" class="headerlink" title="怎样将GB2312编码的字符串转换为ISO-8859-1编码的字符串？"></a>怎样将GB2312编码的字符串转换为ISO-8859-1编码的字符串？</h3><p>答：代码如下所示：</p><p>String s1 = “你好”;</p><p>String s2 = new String(s1.getBytes(“GB2312”), “ISO-8859-1”);</p><h3 id="日期和时间：-如何取得年月日、小时分钟秒？-如何取得从1970年1月1日0时0分0秒到现在的毫秒数？-如何取得某月的最后一天？-如何格式化日期？"><a href="#日期和时间：-如何取得年月日、小时分钟秒？-如何取得从1970年1月1日0时0分0秒到现在的毫秒数？-如何取得某月的最后一天？-如何格式化日期？" class="headerlink" title="日期和时间：  - 如何取得年月日、小时分钟秒？  - 如何取得从1970年1月1日0时0分0秒到现在的毫秒数？  - 如何取得某月的最后一天？  - 如何格式化日期？"></a>日期和时间：  - 如何取得年月日、小时分钟秒？  - 如何取得从1970年1月1日0时0分0秒到现在的毫秒数？  - 如何取得某月的最后一天？  - 如何格式化日期？</h3><p> 答：<br>问题1：创建java.util.Calendar 实例，调用其get()方法传入不同的参数即可获得参数所对应的值。Java 8中可以使用java.time.LocalDateTimel来获取，代码如下所示。</p><p>public class DateTimeTest {</p><p>​    public static void main(String[] args) {</p><p>​        Calendar cal = Calendar.getInstance();</p><p>​        System.out.println(cal.get(Calendar.YEAR));</p><p>​        System.out.println(cal.get(Calendar.MONTH));    // 0 - 11</p><p>​        System.out.println(cal.get(Calendar.DATE));</p><p>​        System.out.println(cal.get(Calendar.HOUR_OF_DAY));</p><p>​        System.out.println(cal.get(Calendar.MINUTE));</p><p>​        System.out.println(cal.get(Calendar.SECOND));</p><p>​        // Java 8</p><p>​        LocalDateTime dt = LocalDateTime.now();</p><p>​        System.out.println(dt.getYear());</p><p>​        System.out.println(dt.getMonthValue());     // 1 - 12</p><p>​        System.out.println(dt.getDayOfMonth());</p><p>​        System.out.println(dt.getHour());</p><p>​        System.out.println(dt.getMinute());</p><p>​        System.out.println(dt.getSecond());</p><p>​    }</p><p>}</p><p>问题2：以下方法均可获得该毫秒数。</p><p>Calendar.getInstance().getTimeInMillis();</p><p>System.currentTimeMillis();</p><p>Clock.systemDefaultZone().millis(); // Java 8</p><p>问题3：代码如下所示。</p><p>Calendar time = Calendar.getInstance();</p><p>time.getActualMaximum(Calendar.DAY_OF_MONTH);</p><p>问题4：利用java.text.DataFormat 的子类（如SimpleDateFormat类）中的format(Date)方法可将日期格式化。Java 8中可以用java.time.format.DateTimeFormatter来格式化时间日期，代码如下所示。</p><p>import java.text.SimpleDateFormat;</p><p>import java.time.LocalDate;</p><p>import java.time.format.DateTimeFormatter;</p><p>import java.util.Date;</p><p>class DateFormatTest {</p><p>​    public static void main(String[] args) {</p><p>​        SimpleDateFormat oldFormatter = new SimpleDateFormat(“yyyy/MM/dd”);</p><p>​        Date date1 = new Date();</p><p>​        System.out.println(oldFormatter.format(date1));</p><p>​        // Java 8</p><p>​        DateTimeFormatter newFormatter = DateTimeFormatter.ofPattern(“yyyy/MM/dd”);</p><p>​        LocalDate date2 = LocalDate.now();</p><p>​        System.out.println(date2.format(newFormatter));</p><p>​    }</p><p>}</p><p>补充：Java的时间日期API一直以来都是被诟病的东西，为了解决这一问题，Java 8中引入了新的时间日期API，其中包括LocalDate、LocalTime、LocalDateTime、Clock、Instant等类，这些的类的设计都使用了不变模式，因此是线程安全的设计。如果不理解这些内容，可以参考我的另一篇文章《关于Java并发编程的总结和思考》。</p><h3 id="打印昨天的当前时刻。"><a href="#打印昨天的当前时刻。" class="headerlink" title="打印昨天的当前时刻。"></a>打印昨天的当前时刻。</h3><p>答：</p><p>import java.util.Calendar;</p><p>class YesterdayCurrent {</p><p>​    public static void main(String[] args){</p><p>​        Calendar cal = Calendar.getInstance();</p><p>​        cal.add(Calendar.DATE, -1);</p><p>​        System.out.println(cal.getTime());</p><p>​    }</p><p>}</p><p>在Java 8中，可以用下面的代码实现相同的功能。</p><p>import java.time.LocalDateTime;</p><p>class YesterdayCurrent {</p><p>​    public static void main(String[] args) {</p><p>​        LocalDateTime today = LocalDateTime.now();</p><p>​        LocalDateTime yesterday = today.minusDays(1);</p><p>​        System.out.println(yesterday);</p><p>​    }</p><p>}</p><h3 id="比较一下Java和JavaSciprt。"><a href="#比较一下Java和JavaSciprt。" class="headerlink" title="比较一下Java和JavaSciprt。"></a>比较一下Java和JavaSciprt。</h3><p>答：JavaScript 与Java是两个公司开发的不同的两个产品。Java 是原Sun Microsystems公司推出的面向对象的程序设计语言，特别适合于互联网应用程序开发；而JavaScript是Netscape公司的产品，为了扩展Netscape浏览器的功能而开发的一种可以嵌入Web页面中运行的基于对象和事件驱动的解释性语言。JavaScript的前身是LiveScript；而Java的前身是Oak语言。<br>下面对两种语言间的异同作如下比较： </p><ul><li>基于对象和面向对象：Java是一种真正的面向对象的语言，即使是开发简单的程序，必须设计对象；JavaScript是种脚本语言，它可以用来制作与网络无关的，与用户交互作用的复杂软件。它是一种基于对象（Object-Based）和事件驱动（Event-Driven）的编程语言，因而它本身提供了非常丰富的内部对象供设计人员使用。 </li><li>解释和编译：Java的源代码在执行之前，必须经过编译。JavaScript是一种解释性编程语言，其源代码不需经过编译，由浏览器解释执行。（目前的浏览器几乎都使用了JIT（即时编译）技术来提升JavaScript的运行效率） </li><li>强类型变量和类型弱变量：Java采用强类型变量检查，即所有变量在编译之前必须作声明；JavaScript中变量是弱类型的，甚至在使用变量前可以不作声明，JavaScript的解释器在运行时检查推断其数据类型。 </li><li>代码格式不一样。</li></ul><p>补充：上面列出的四点是网上流传的所谓的标准答案。其实Java和JavaScript最重要的区别是一个是静态语言，一个是动态语言。目前的编程语言的发展趋势是函数式语言和动态语言。在Java中类（class）是一等公民，而JavaScript中函数（function）是一等公民，因此JavaScript支持函数式编程，可以使用Lambda函数和闭包（closure），当然Java 8也开始支持函数式编程，提供了对Lambda表达式以及函数式接口的支持。对于这类问题，在面试的时候最好还是用自己的语言回答会更加靠谱，不要背网上所谓的标准答案。</p><h3 id="什么时候用断言（assert）？"><a href="#什么时候用断言（assert）？" class="headerlink" title="什么时候用断言（assert）？"></a>什么时候用断言（assert）？</h3><p> 答：断言在软件开发中是一种常用的调试方式，很多开发语言中都支持这种机制。一般来说，断言用于保证程序最基本、关键的正确性。断言检查通常在开发和测试时开启。为了保证程序的执行效率，在软件发布后断言检查通常是关闭的。断言是一个包含布尔表达式的语句，在执行这个语句时假定该表达式为true；如果表达式的值为false，那么系统会报告一个AssertionError。断言的使用如下面的代码所示：</p><p>assert(a &gt; 0); // throws an AssertionError if a &lt;= 0</p><p>1</p><p>断言可以有两种形式：<br>assert Expression1;<br>assert Expression1 : Expression2 ;<br>Expression1 应该总是产生一个布尔值。<br>Expression2 可以是得出一个值的任意表达式；这个值用于生成显示更多调试信息的字符串消息。</p><p>要在运行时启用断言，可以在启动JVM时使用-enableassertions或者-ea标记。要在运行时选择禁用断言，可以在启动JVM时使用-da或者-disableassertions标记。要在系统类中启用或禁用断言，可使用-esa或-dsa标记。还可以在包的基础上启用或者禁用断言。</p><p>注意：断言不应该以任何方式改变程序的状态。简单的说，如果希望在不满足某些条件时阻止代码的执行，就可以考虑用断言来阻止它。</p><h3 id="Error和Exception有什么区别？"><a href="#Error和Exception有什么区别？" class="headerlink" title="Error和Exception有什么区别？"></a>Error和Exception有什么区别？</h3><p> 答：Error表示系统级的错误和程序不必处理的异常，是恢复不是不可能但很困难的情况下的一种严重问题；比如内存溢出，不可能指望程序能处理这样的情况；Exception表示需要捕捉或者需要程序进行处理的异常，是一种设计或实现问题；也就是说，它表示如果程序运行正常，从不会发生的情况。</p><p>面试题：2005年摩托罗拉的面试中曾经问过这么一个问题“If a process reports a stack overflow run-time error, what’s the most possible cause?”，给了四个选项a. lack of memory; b. write on an invalid memory space; c. recursive function calling; d. array index out of boundary. Java程序在运行时也可能会遭遇StackOverflowError，这是一个无法恢复的错误，只能重新修改代码了，这个面试题的答案是c。如果写了不能迅速收敛的递归，则很有可能引发栈溢出的错误，如下所示：</p><p>class StackOverflowErrorTest {</p><p>​    public static void main(String[] args) {</p><p>​        main(null);</p><p>​    }</p><p>}</p><p>提示：用递归编写程序时一定要牢记两点：1. 递归公式；2. 收敛条件（什么时候就不再继续递归）。</p><h3 id="try-里有一个return语句，那么紧跟在这个try后的finally-里的代码会不会被执行，什么时候被执行，在return前还是后"><a href="#try-里有一个return语句，那么紧跟在这个try后的finally-里的代码会不会被执行，什么时候被执行，在return前还是后" class="headerlink" title="try{}里有一个return语句，那么紧跟在这个try后的finally{}里的代码会不会被执行，什么时候被执行，在return前还是后?"></a>try{}里有一个return语句，那么紧跟在这个try后的finally{}里的代码会不会被执行，什么时候被执行，在return前还是后?</h3><p>答：会执行，在方法返回调用者前执行。</p><p>注意：在finally中改变返回值的做法是不好的，因为如果存在finally代码块，try中的return语句不会立马返回调用者，而是记录下返回值待finally代码块执行完毕之后再向调用者返回其值，然后如果在finally中修改了返回值，就会返回修改后的值。显然，在finally中返回或者修改返回值会对程序造成很大的困扰，C#中直接用编译错误的方式来阻止程序员干这种龌龊的事情，Java中也可以通过提升编译器的语法检查级别来产生警告或错误，Eclipse中可以在如图所示的地方进行设置，强烈建议将此项设置为编译错误。</p><h3 id="Java语言如何进行异常处理，关键字：throws、throw、try、catch、finally分别如何使用？"><a href="#Java语言如何进行异常处理，关键字：throws、throw、try、catch、finally分别如何使用？" class="headerlink" title="Java语言如何进行异常处理，关键字：throws、throw、try、catch、finally分别如何使用？"></a>Java语言如何进行异常处理，关键字：throws、throw、try、catch、finally分别如何使用？</h3><p> 答：Java通过面向对象的方法进行异常处理，把各种不同的异常进行分类，并提供了良好的接口。在Java中，每个异常都是一个对象，它是Throwable类或其子类的实例。当一个方法出现异常后便抛出一个异常对象，该对象中包含有异常信息，调用这个对象的方法可以捕获到这个异常并可以对其进行处理。Java的异常处理是通过5个关键词来实现的：try、catch、throw、throws和finally。一般情况下是用try来执行一段程序，如果系统会抛出（throw）一个异常对象，可以通过它的类型来捕获（catch）它，或通过总是执行代码块（finally）来处理；try用来指定一块预防所有异常的程序；catch子句紧跟在try块后面，用来指定你想要捕获的异常的类型；throw语句用来明确地抛出一个异常；throws用来声明一个方法可能抛出的各种异常（当然声明异常时允许无病呻吟）；finally为确保一段代码不管发生什么异常状况都要被执行；try语句可以嵌套，每当遇到一个try语句，异常的结构就会被放入异常栈中，直到所有的try语句都完成。如果下一级的try语句没有对某种异常进行处理，异常栈就会执行出栈操作，直到遇到有处理这种异常的try语句或者最终将异常抛给JVM。</p><h3 id="运行时异常与受检异常有何异同？"><a href="#运行时异常与受检异常有何异同？" class="headerlink" title="运行时异常与受检异常有何异同？"></a>运行时异常与受检异常有何异同？</h3><p> 答：异常表示程序运行过程中可能出现的非正常状态，运行时异常表示虚拟机的通常操作中可能遇到的异常，是一种常见运行错误，只要程序设计得没有问题通常就不会发生。受检异常跟程序运行的上下文环境有关，即使程序设计无误，仍然可能因使用的问题而引发。Java编译器要求方法必须声明抛出可能发生的受检异常，但是并不要求必须声明抛出未被捕获的运行时异常。异常和继承一样，是面向对象程序设计中经常被滥用的东西，在Effective Java中对异常的使用给出了以下指导原则： </p><ul><li>不要将异常处理用于正常的控制流（设计良好的API不应该强迫它的调用者为了正常的控制流而使用异常） </li><li>对可以恢复的情况使用受检异常，对编程错误使用运行时异常 </li><li>避免不必要的使用受检异常（可以通过一些状态检测手段来避免异常的发生） </li><li>优先使用标准的异常 </li><li>每个方法抛出的异常都要有文档 </li><li>保持异常的原子性 </li><li>不要在catch中忽略掉捕获到的异常</li></ul><h3 id="列出一些你常见的运行时异常？"><a href="#列出一些你常见的运行时异常？" class="headerlink" title="列出一些你常见的运行时异常？"></a>列出一些你常见的运行时异常？</h3><p>答： </p><ul><li>ArithmeticException（算术异常） </li><li>ClassCastException （类转换异常） </li><li>IllegalArgumentException （非法参数异常） </li><li>IndexOutOfBoundsException （下标越界异常） </li><li>NullPointerException （空指针异常） </li><li>SecurityException （安全异常）</li></ul><h3 id="阐述final、finally、finalize的区别。"><a href="#阐述final、finally、finalize的区别。" class="headerlink" title="阐述final、finally、finalize的区别。"></a>阐述final、finally、finalize的区别。</h3><p> 答： </p><ul><li>final：修饰符（关键字）有三种用法：如果一个类被声明为final，意味着它不能再派生出新的子类，即不能被继承，因此它和abstract是反义词。将变量声明为final，可以保证它们在使用中不被改变，被声明为final的变量必须在声明时给定初值，而在以后的引用中只能读取不可修改。被声明为final的方法也同样只能使用，不能在子类中被重写。 </li><li>finally：通常放在try…catch…的后面构造总是执行代码块，这就意味着程序无论正常执行还是发生异常，这里的代码只要JVM不关闭都能执行，可以将释放外部资源的代码写在finally块中。 </li><li>finalize：Object类中定义的方法，Java中允许使用finalize()方法在垃圾收集器将对象从内存中清除出去之前做必要的清理工作。这个方法是由垃圾收集器在销毁对象时调用的，通过重写finalize()方法可以整理系统资源或者执行其他清理工作。</li></ul><h3 id="类ExampleA继承Exception，类ExampleB继承ExampleA。-有如下代码片断："><a href="#类ExampleA继承Exception，类ExampleB继承ExampleA。-有如下代码片断：" class="headerlink" title="类ExampleA继承Exception，类ExampleB继承ExampleA。  有如下代码片断："></a>类ExampleA继承Exception，类ExampleB继承ExampleA。  有如下代码片断：</h3><p>try {</p><p>​    throw new ExampleB(“b”)</p><p>} catch（ExampleA e）{</p><p>​    System.out.println(“ExampleA”);</p><p>} catch（Exception e）{</p><p>​    System.out.println(“Exception”);</p><p>}</p><p>请问执行此段代码的输出是什么？</p><p>答：输出：ExampleA。（根据里氏代换原则[能使用父类型的地方一定能使用子类型]，抓取ExampleA类型异常的catch块能够抓住try块中抛出的ExampleB类型的异常）</p><p>面试题 - 说出下面代码的运行结果。（此题的出处是《Java编程思想》一书）</p><p>class Annoyance extends Exception {}</p><p>class Sneeze extends Annoyance {}</p><p>class Human {</p><p>​    public static void main(String[] args) </p><p>​        throws Exception {</p><p>​        try {</p><p>​            try {</p><p>​                throw new Sneeze();</p><p>​            } </p><p>​            catch ( Annoyance a ) {</p><p>​                System.out.println(“Caught Annoyance”);</p><p>​                throw a;</p><p>​            }</p><p>​        } </p><p>​        catch ( Sneeze s ) {</p><p>​            System.out.println(“Caught Sneeze”);</p><p>​            return ;</p><p>​        }</p><p>​        finally {</p><p>​            System.out.println(“Hello World!”);</p><p>​        }</p><p>​    }</p><p>}</p><h3 id="List、Set、Map是否继承自Collection接口？"><a href="#List、Set、Map是否继承自Collection接口？" class="headerlink" title="List、Set、Map是否继承自Collection接口？"></a>List、Set、Map是否继承自Collection接口？</h3><p>答：List、Set 是，Map 不是。Map是键值对映射容器，与List和Set有明显的区别，而Set存储的零散的元素且不允许有重复元素（数学中的集合也是如此），List是线性结构的容器，适用于按数值索引访问元素的情形。</p><h3 id="阐述ArrayList、Vector、LinkedList的存储性能和特性。"><a href="#阐述ArrayList、Vector、LinkedList的存储性能和特性。" class="headerlink" title="阐述ArrayList、Vector、LinkedList的存储性能和特性。"></a>阐述ArrayList、Vector、LinkedList的存储性能和特性。</h3><p>答：ArrayList 和Vector都是使用数组方式存储数据，此数组元素数大于实际存储的数据以便增加和插入元素，它们都允许直接按序号索引元素，但是插入元素要涉及数组元素移动等内存操作，所以索引数据快而插入数据慢，Vector中的方法由于添加了synchronized修饰，因此Vector是线程安全的容器，但性能上较ArrayList差，因此已经是Java中的遗留容器。LinkedList使用双向链表实现存储（将内存中零散的内存单元通过附加的引用关联起来，形成一个可以按序号索引的线性结构，这种链式存储方式与数组的连续存储方式相比，内存的利用率更高），按序号索引数据需要进行前向或后向遍历，但是插入数据时只需要记录本项的前后项即可，所以插入速度较快。Vector属于遗留容器（Java早期的版本中提供的容器，除此之外，Hashtable、Dictionary、BitSet、Stack、Properties都是遗留容器），已经不推荐使用，但是由于ArrayList和LinkedListed都是非线程安全的，如果遇到多个线程操作同一个容器的场景，则可以通过工具类Collections中的synchronizedList方法将其转换成线程安全的容器后再使用（这是对装潢模式的应用，将已有对象传入另一个类的构造器中创建新的对象来增强实现）。</p><p>补充：遗留容器中的Properties类和Stack类在设计上有严重的问题，Properties是一个键和值都是字符串的特殊的键值对映射，在设计上应该是关联一个Hashtable并将其两个泛型参数设置为String类型，但是Java API中的Properties直接继承了Hashtable，这很明显是对继承的滥用。这里复用代码的方式应该是Has-A关系而不是Is-A关系，另一方面容器都属于工具类，继承工具类本身就是一个错误的做法，使用工具类最好的方式是Has-A关系（关联）或Use-A关系（依赖）。同理，Stack类继承Vector也是不正确的。Sun公司的工程师们也会犯这种低级错误，让人唏嘘不已。</p><h3 id="Collection和Collections的区别？"><a href="#Collection和Collections的区别？" class="headerlink" title="Collection和Collections的区别？"></a>Collection和Collections的区别？</h3><p>答：Collection是一个接口，它是Set、List等容器的父接口；Collections是个一个工具类，提供了一系列的静态方法来辅助容器操作，这些方法包括对容器的搜索、排序、线程安全化等等。</p><h3 id="List、Map、Set三个接口存取元素时，各有什么特点？"><a href="#List、Map、Set三个接口存取元素时，各有什么特点？" class="headerlink" title="List、Map、Set三个接口存取元素时，各有什么特点？"></a>List、Map、Set三个接口存取元素时，各有什么特点？</h3><p> 答：List以特定索引来存取元素，可以有重复元素。Set不能存放重复元素（用对象的equals()方法来区分元素是否重复）。Map保存键值对（key-value pair）映射，映射关系可以是一对一或多对一。Set和Map容器都有基于哈希存储和排序树的两种实现版本，基于哈希存储的版本理论存取时间复杂度为O(1)，而基于排序树版本的实现在插入或删除元素时会按照元素或元素的键（key）构成排序树从而达到排序和去重的效果。</p><h3 id="TreeMap和TreeSet在排序时如何比较元素？Collections工具类中的sort-方法如何比较元素？"><a href="#TreeMap和TreeSet在排序时如何比较元素？Collections工具类中的sort-方法如何比较元素？" class="headerlink" title="TreeMap和TreeSet在排序时如何比较元素？Collections工具类中的sort()方法如何比较元素？"></a>TreeMap和TreeSet在排序时如何比较元素？Collections工具类中的sort()方法如何比较元素？</h3><p>答：TreeSet要求存放的对象所属的类必须实现Comparable接口，该接口提供了比较元素的compareTo()方法，当插入元素时会回调该方法比较元素的大小。TreeMap要求存放的键值对映射的键必须实现Comparable接口从而根据键对元素进行排序。Collections工具类的sort方法有两种重载的形式，第一种要求传入的待排序容器中存放的对象比较实现Comparable接口以实现元素的比较；第二种不强制性的要求容器中的元素必须可比较，但是要求传入第二个参数，参数是Comparator接口的子类型（需要重写compare方法实现元素的比较），相当于一个临时定义的排序规则，其实就是通过接口注入比较元素大小的算法，也是对回调模式的应用（Java中对函数式编程的支持）。<br>例子1：</p><p>public class Student implements Comparable<student> {</student></p><p>​    private String name;        // 姓名</p><p>​    private int age;            // 年龄</p><p>​    public Student(String name, int age) {</p><p>​        this.name = name;</p><p>​        this.age = age;</p><p>​    }</p><p>​    @Override</p><p>​    public String toString() {</p><p>​        return “Student [name=” + name + “, age=” + age + “]”;</p><p>​    }</p><p>​    @Override</p><p>​    public int compareTo(Student o) {</p><p>​        return this.age - o.age; // 比较年龄(年龄的升序)</p><p>​    }</p><p>}</p><p>import java.util.Set;</p><p>import java.util.TreeSet;</p><p>class Test01 {</p><p>​    public static void main(String[] args) {</p><p>​        Set<student> set = new TreeSet&lt;&gt;();     // Java 7的钻石语法(构造器后面的尖括号中不需要写类型)</student></p><p>​        set.add(new Student(“Hao LUO”, 33));</p><p>​        set.add(new Student(“XJ WANG”, 32));</p><p>​        set.add(new Student(“Bruce LEE”, 60));</p><p>​        set.add(new Student(“Bob YANG”, 22));</p><p>​        for(Student stu : set) {</p><p>​            System.out.println(stu);</p><p>​        }</p><p>//      输出结果: </p><p>//      Student [name=Bob YANG, age=22]</p><p>//      Student [name=XJ WANG, age=32]</p><p>//      Student [name=Hao LUO, age=33]</p><p>//      Student [name=Bruce LEE, age=60]</p><p>​    }</p><p>}</p><p>例子2：</p><p>public class Student {</p><p>​    private String name;    // 姓名</p><p>​    private int age;        // 年龄</p><p>​    public Student(String name, int age) {</p><p>​        this.name = name;</p><p>​        this.age = age;</p><p>​    }</p><p>​    /**</p><p>​     * 获取学生姓名</p><p>​     */</p><p>​    public String getName() {</p><p>​        return name;</p><p>​    }</p><p>​    /**</p><p>​     * 获取学生年龄</p><p>​     */</p><p>​    public int getAge() {</p><p>​        return age;</p><p>​    }</p><p>​    @Override</p><p>​    public String toString() {</p><p>​        return “Student [name=” + name + “, age=” + age + “]”;</p><p>​    }</p><p>}</p><p>import java.util.ArrayList;</p><p>import java.util.Collections;</p><p>import java.util.Comparator;</p><p>import java.util.List;</p><p>class Test02 {</p><p>​    public static void main(String[] args) {</p><p>​        List<student> list = new ArrayList&lt;&gt;();     // Java 7的钻石语法(构造器后面的尖括号中不需要写类型)</student></p><p>​        list.add(new Student(“Hao LUO”, 33));</p><p>​        list.add(new Student(“XJ WANG”, 32));</p><p>​        list.add(new Student(“Bruce LEE”, 60));</p><p>​        list.add(new Student(“Bob YANG”, 22));</p><p>​        // 通过sort方法的第二个参数传入一个Comparator接口对象</p><p>​        // 相当于是传入一个比较对象大小的算法到sort方法中</p><p>​        // 由于Java中没有函数指针、仿函数、委托这样的概念</p><p>​        // 因此要将一个算法传入一个方法中唯一的选择就是通过接口回调</p><p>​        Collections.sort(list, new Comparator<student> () {</student></p><p>​            @Override</p><p>​            public int compare(Student o1, Student o2) {</p><p>​                return o1.getName().compareTo(o2.getName());    // 比较学生姓名</p><p>​            }</p><p>​        });</p><p>​        for(Student stu : list) {</p><p>​            System.out.println(stu);</p><p>​        }</p><p>//      输出结果: </p><p>//      Student [name=Bob YANG, age=22]</p><p>//      Student [name=Bruce LEE, age=60]</p><p>//      Student [name=Hao LUO, age=33]</p><p>//      Student [name=XJ WANG, age=32]</p><p>​    }</p><p>}</p><h3 id="Thread类的sleep-方法和对象的wait-方法都可以让线程暂停执行，它们有什么区别"><a href="#Thread类的sleep-方法和对象的wait-方法都可以让线程暂停执行，它们有什么区别" class="headerlink" title="Thread类的sleep()方法和对象的wait()方法都可以让线程暂停执行，它们有什么区别?"></a>Thread类的sleep()方法和对象的wait()方法都可以让线程暂停执行，它们有什么区别?</h3><p>答：sleep()方法（休眠）是线程类（Thread）的静态方法，调用此方法会让当前线程暂停执行指定的时间，将执行机会（CPU）让给其他线程，但是对象的锁依然保持，因此休眠时间结束后会自动恢复（线程回到就绪状态，请参考第66题中的线程状态转换图）。wait()是Object类的方法，调用对象的wait()方法导致当前线程放弃对象的锁（线程暂停执行），进入对象的等待池（wait pool），只有调用对象的notify()方法（或notifyAll()方法）时才能唤醒等待池中的线程进入等锁池（lock pool），如果线程重新获得对象的锁就可以进入就绪状态。</p><p>补充：可能不少人对什么是进程，什么是线程还比较模糊，对于为什么需要多线程编程也不是特别理解。简单的说：进程是具有一定独立功能的程序关于某个数据集合上的一次运行活动，是操作系统进行资源分配和调度的一个独立单位；线程是进程的一个实体，是CPU调度和分派的基本单位，是比进程更小的能独立运行的基本单位。线程的划分尺度小于进程，这使得多线程程序的并发性高；进程在执行时通常拥有独立的内存单元，而线程之间可以共享内存。使用多线程的编程通常能够带来更好的性能和用户体验，但是多线程的程序对于其他程序是不友好的，因为它可能占用了更多的CPU资源。当然，也不是线程越多，程序的性能就越好，因为线程之间的调度和切换也会浪费CPU时间。时下很时髦的Node.js就采用了单线程异步I/O的工作模式。</p><h3 id="线程的sleep-方法和yield-方法有什么区别？"><a href="#线程的sleep-方法和yield-方法有什么区别？" class="headerlink" title="线程的sleep()方法和yield()方法有什么区别？"></a>线程的sleep()方法和yield()方法有什么区别？</h3><p>答：<br>① sleep()方法给其他线程运行机会时不考虑线程的优先级，因此会给低优先级的线程以运行的机会；yield()方法只会给相同优先级或更高优先级的线程以运行的机会；<br>② 线程执行sleep()方法后转入阻塞（blocked）状态，而执行yield()方法后转入就绪（ready）状态；<br>③ sleep()方法声明抛出InterruptedException，而yield()方法没有声明任何异常；<br>④ sleep()方法比yield()方法（跟操作系统CPU调度相关）具有更好的可移植性。</p><h3 id="当一个线程进入一个对象的synchronized方法A之后，其它线程是否可进入此对象的synchronized方法B？"><a href="#当一个线程进入一个对象的synchronized方法A之后，其它线程是否可进入此对象的synchronized方法B？" class="headerlink" title="当一个线程进入一个对象的synchronized方法A之后，其它线程是否可进入此对象的synchronized方法B？"></a>当一个线程进入一个对象的synchronized方法A之后，其它线程是否可进入此对象的synchronized方法B？</h3><p>答：不能。其它线程只能访问该对象的非同步方法，同步方法则不能进入。因为非静态方法上的synchronized修饰符要求执行方法时要获得对象的锁，如果已经进入A方法说明对象锁已经被取走，那么试图进入B方法的线程就只能在等锁池（注意不是等待池哦）中等待对象的锁。</p><h3 id="请说出与线程同步以及线程调度相关的方法。"><a href="#请说出与线程同步以及线程调度相关的方法。" class="headerlink" title="请说出与线程同步以及线程调度相关的方法。"></a>请说出与线程同步以及线程调度相关的方法。</h3><p> 答： </p><ul><li>wait()：使一个线程处于等待（阻塞）状态，并且释放所持有的对象的锁； </li><li>sleep()：使一个正在运行的线程处于睡眠状态，是一个静态方法，调用此方法要处理InterruptedException异常； </li><li>notify()：唤醒一个处于等待状态的线程，当然在调用此方法的时候，并不能确切的唤醒某一个等待状态的线程，而是由JVM确定唤醒哪个线程，而且与优先级无关； </li><li>notityAll()：唤醒所有处于等待状态的线程，该方法并不是将对象的锁给所有线程，而是让它们竞争，只有获得锁的线程才能进入就绪状态；</li></ul><p>提示：关于Java多线程和并发编程的问题，建议大家看我的另一篇文章《关于Java并发编程的总结和思考》。</p><p>补充：Java 5通过Lock接口提供了显式的锁机制（explicit lock），增强了灵活性以及对线程的协调。Lock接口中定义了加锁（lock()）和解锁（unlock()）的方法，同时还提供了newCondition()方法来产生用于线程之间通信的Condition对象；此外，Java 5还提供了信号量机制（semaphore），信号量可以用来限制对某个共享资源进行访问的线程的数量。在对资源进行访问之前，线程必须得到信号量的许可（调用Semaphore对象的acquire()方法）；在完成对资源的访问后，线程必须向信号量归还许可（调用Semaphore对象的release()方法）。</p><p>下面的例子演示了100个线程同时向一个银行账户中存入1元钱，在没有使用同步机制和使用同步机制情况下的执行情况。</p><p>银行账户类：</p><p>/**</p><ul><li><p>银行账户</p></li><li><p>@author 骆昊</p><p>*</p><p>*/</p></li></ul><p>public class Account {</p><p>​    private double balance;     // 账户余额</p><p>​    /**</p><p>​     * 存款</p><p>​     * @param money 存入金额</p><p>​     */</p><p>​    public void deposit(double money) {</p><p>​        double newBalance = balance + money;</p><p>​        try {</p><p>​            Thread.sleep(10);   // 模拟此业务需要一段处理时间</p><p>​        }</p><p>​        catch(InterruptedException ex) {</p><p>​            ex.printStackTrace();</p><p>​        }</p><p>​        balance = newBalance;</p><p>​    }</p><p>​    /**</p><p>​     * 获得账户余额</p><p>​     */</p><p>​    public double getBalance() {</p><p>​        return balance;</p><p>​    }</p><p>}</p><p>存钱线程类：</p><p>/**</p><ul><li><p>存钱线程</p></li><li><p>@author 骆昊</p><p>*</p><p>*/</p></li></ul><p>public class AddMoneyThread implements Runnable {</p><p>​    private Account account;    // 存入账户</p><p>​    private double money;       // 存入金额</p><p>​    public AddMoneyThread(Account account, double money) {</p><p>​        this.account = account;</p><p>​        this.money = money;</p><p>​    }</p><p>​    @Override</p><p>​    public void run() {</p><p>​        account.deposit(money);</p><p>​    }</p><p>}</p><p>测试类：</p><p>import java.util.concurrent.ExecutorService;</p><p>import java.util.concurrent.Executors;</p><p>public class Test01 {</p><p>​    public static void main(String[] args) {</p><p>​        Account account = new Account();</p><p>​        ExecutorService service = Executors.newFixedThreadPool(100);</p><p>​        for(int i = 1; i &lt;= 100; i++) {</p><p>​            service.execute(new AddMoneyThread(account, 1));</p><p>​        }</p><p>​        service.shutdown();</p><p>​        while(!service.isTerminated()) {}</p><p>​        System.out.println(“账户余额: “ + account.getBalance());</p><p>​    }</p><p>}</p><p>在没有同步的情况下，执行结果通常是显示账户余额在10元以下，出现这种状况的原因是，当一个线程A试图存入1元的时候，另外一个线程B也能够进入存款的方法中，线程B读取到的账户余额仍然是线程A存入1元钱之前的账户余额，因此也是在原来的余额0上面做了加1元的操作，同理线程C也会做类似的事情，所以最后100个线程执行结束时，本来期望账户余额为100元，但实际得到的通常在10元以下（很可能是1元哦）。解决这个问题的办法就是同步，当一个线程对银行账户存钱时，需要将此账户锁定，待其操作完成后才允许其他的线程进行操作，代码有如下几种调整方案：</p><p>在银行账户的存款（deposit）方法上同步（synchronized）关键字</p><p>/**</p><ul><li><p>银行账户</p></li><li><p>@author 骆昊</p><p>*</p><p>*/</p></li></ul><p>public class Account {</p><p>​    private double balance;     // 账户余额</p><p>​    /**</p><p>​     * 存款</p><p>​     * @param money 存入金额</p><p>​     */</p><p>​    public synchronized void deposit(double money) {</p><p>​        double newBalance = balance + money;</p><p>​        try {</p><p>​            Thread.sleep(10);   // 模拟此业务需要一段处理时间</p><p>​        }</p><p>​        catch(InterruptedException ex) {</p><p>​            ex.printStackTrace();</p><p>​        }</p><p>​        balance = newBalance;</p><p>​    }</p><p>​    /**</p><p>​     * 获得账户余额</p><p>​     */</p><p>​    public double getBalance() {</p><p>​        return balance;</p><p>​    }</p><p>}</p><p>在线程调用存款方法时对银行账户进行同步</p><p>/**</p><ul><li><p>存钱线程</p></li><li><p>@author 骆昊</p><p>*</p><p>*/</p></li></ul><p>public class AddMoneyThread implements Runnable {</p><p>​    private Account account;    // 存入账户</p><p>​    private double money;       // 存入金额</p><p>​    public AddMoneyThread(Account account, double money) {</p><p>​        this.account = account;</p><p>​        this.money = money;</p><p>​    }</p><p>​    @Override</p><p>​    public void run() {</p><p>​        synchronized (account) {</p><p>​            account.deposit(money); </p><p>​        }</p><p>​    }</p><p>}</p><p>通过Java 5显示的锁机制，为每个银行账户创建一个锁对象，在存款操作进行加锁和解锁的操作</p><p>import java.util.concurrent.locks.Lock;</p><p>import java.util.concurrent.locks.ReentrantLock;</p><p>/**</p><ul><li><p>银行账户</p></li><li></li><li><p>@author 骆昊</p><p>*</p><p>*/</p></li></ul><p>public class Account {</p><p>​    private Lock accountLock = new ReentrantLock();</p><p>​    private double balance; // 账户余额</p><p>​    /**</p><p>​     * 存款</p><p>​     * </p><p>​     * @param money</p><p>​     *            存入金额</p><p>​     */</p><p>​    public void deposit(double money) {</p><p>​        accountLock.lock();</p><p>​        try {</p><p>​            double newBalance = balance + money;</p><p>​            try {</p><p>​                Thread.sleep(10); // 模拟此业务需要一段处理时间</p><p>​            }</p><p>​            catch (InterruptedException ex) {</p><p>​                ex.printStackTrace();</p><p>​            }</p><p>​            balance = newBalance;</p><p>​        }</p><p>​        finally {</p><p>​            accountLock.unlock();</p><p>​        }</p><p>​    }</p><p>​    /**</p><p>​     * 获得账户余额</p><p>​     */</p><p>​    public double getBalance() {</p><p>​        return balance;</p><p>​    }</p><p>}</p><p>按照上述三种方式对代码进行修改后，重写执行测试代码Test01，将看到最终的账户余额为100元。当然也可以使用Semaphore或CountdownLatch来实现同步。</p><h3 id="编写多线程程序有几种实现方式？"><a href="#编写多线程程序有几种实现方式？" class="headerlink" title="编写多线程程序有几种实现方式？"></a>编写多线程程序有几种实现方式？</h3><p>答：Java 5以前实现多线程有两种实现方法：一种是继承Thread类；另一种是实现Runnable接口。两种方式都要通过重写run()方法来定义线程的行为，推荐使用后者，因为Java中的继承是单继承，一个类有一个父类，如果继承了Thread类就无法再继承其他类了，显然使用Runnable接口更为灵活。</p><p>补充：Java 5以后创建线程还有第三种方式：实现Callable接口，该接口中的call方法可以在线程执行结束时产生一个返回值，代码如下所示：</p><p>import java.util.ArrayList;</p><p>import java.util.List;</p><p>import java.util.concurrent.Callable;</p><p>import java.util.concurrent.ExecutorService;</p><p>import java.util.concurrent.Executors;</p><p>import java.util.concurrent.Future;</p><p>class MyTask implements Callable<integer> {</integer></p><p>​    private int upperBounds;</p><p>​    public MyTask(int upperBounds) {</p><p>​        this.upperBounds = upperBounds;</p><p>​    }</p><p>​    @Override</p><p>​    public Integer call() throws Exception {</p><p>​        int sum = 0; </p><p>​        for(int i = 1; i &lt;= upperBounds; i++) {</p><p>​            sum += i;</p><p>​        }</p><p>​        return sum;</p><p>​    }</p><p>}</p><p>class Test {</p><p>​    public static void main(String[] args) throws Exception {</p><p>​        List&lt;Future<integer>&gt; list = new ArrayList&lt;&gt;();</integer></p><p>​        ExecutorService service = Executors.newFixedThreadPool(10);</p><p>​        for(int i = 0; i &lt; 10; i++) {</p><p>​            list.add(service.submit(new MyTask((int) (Math.random() * 100))));</p><p>​        }</p><p>​        int sum = 0;</p><p>​        for(Future<integer> future : list) {</integer></p><p>​            // while(!future.isDone()) ;</p><p>​            sum += future.get();</p><p>​        }</p><p>​        System.out.println(sum);</p><p>​    }</p><p>}</p><h3 id="synchronized关键字的用法？"><a href="#synchronized关键字的用法？" class="headerlink" title="synchronized关键字的用法？"></a>synchronized关键字的用法？</h3><p>答：synchronized关键字可以将对象或者方法标记为同步，以实现对对象和方法的互斥访问，可以用synchronized(对象) { … }定义同步代码块，或者在声明方法时将synchronized作为方法的修饰符。在第60题的例子中已经展示了synchronized关键字的用法。</p><h3 id="举例说明同步和异步。"><a href="#举例说明同步和异步。" class="headerlink" title="举例说明同步和异步。"></a>举例说明同步和异步。</h3><p>答：如果系统中存在临界资源（资源数量少于竞争资源的线程数量的资源），例如正在写的数据以后可能被另一个线程读到，或者正在读的数据可能已经被另一个线程写过了，那么这些数据就必须进行同步存取（数据库操作中的排他锁就是最好的例子）。当应用程序在对象上调用了一个需要花费很长时间来执行的方法，并且不希望让程序等待方法的返回时，就应该使用异步编程，在很多情况下采用异步途径往往更有效率。事实上，所谓的同步就是指阻塞式操作，而异步就是非阻塞式操作。</p><h3 id="启动一个线程是调用run-还是start-方法？"><a href="#启动一个线程是调用run-还是start-方法？" class="headerlink" title="启动一个线程是调用run()还是start()方法？"></a>启动一个线程是调用run()还是start()方法？</h3><p>答：启动一个线程是调用start()方法，使线程所代表的虚拟处理机处于可运行状态，这意味着它可以由JVM 调度并执行，这并不意味着线程就会立即运行。run()方法是线程启动后要进行回调（callback）的方法。</p><h3 id="什么是线程池（thread-pool）？"><a href="#什么是线程池（thread-pool）？" class="headerlink" title="什么是线程池（thread pool）？"></a>什么是线程池（thread pool）？</h3><p> 答：在面向对象编程中，创建和销毁对象是很费时间的，因为创建一个对象要获取内存资源或者其它更多资源。在Java中更是如此，虚拟机将试图跟踪每一个对象，以便能够在对象销毁后进行垃圾回收。所以提高服务程序效率的一个手段就是尽可能减少创建和销毁对象的次数，特别是一些很耗资源的对象创建和销毁，这就是”池化资源”技术产生的原因。线程池顾名思义就是事先创建若干个可执行的线程放入一个池（容器）中，需要的时候从池中获取线程不用自行创建，使用完毕不需要销毁线程而是放回池中，从而减少创建和销毁线程对象的开销。<br>Java 5+中的Executor接口定义一个执行线程的工具。它的子类型即线程池接口是ExecutorService。要配置一个线程池是比较复杂的，尤其是对于线程池的原理不是很清楚的情况下，因此在工具类Executors面提供了一些静态工厂方法，生成一些常用的线程池，如下所示： </p><ul><li>newSingleThreadExecutor：创建一个单线程的线程池。这个线程池只有一个线程在工作，也就是相当于单线程串行执行所有任务。如果这个唯一的线程因为异常结束，那么会有一个新的线程来替代它。此线程池保证所有任务的执行顺序按照任务的提交顺序执行。 </li><li>newFixedThreadPool：创建固定大小的线程池。每次提交一个任务就创建一个线程，直到线程达到线程池的最大大小。线程池的大小一旦达到最大值就会保持不变，如果某个线程因为执行异常而结束，那么线程池会补充一个新线程。 </li><li>newCachedThreadPool：创建一个可缓存的线程池。如果线程池的大小超过了处理任务所需要的线程，那么就会回收部分空闲（60秒不执行任务）的线程，当任务数增加时，此线程池又可以智能的添加新线程来处理任务。此线程池不会对线程池大小做限制，线程池大小完全依赖于操作系统（或者说JVM）能够创建的最大线程大小。 </li><li>newScheduledThreadPool：创建一个大小无限的线程池。此线程池支持定时以及周期性执行任务的需求。 </li><li>newSingleThreadExecutor：创建一个单线程的线程池。此线程池支持定时以及周期性执行任务的需求。</li></ul><p>第60题的例子中演示了通过Executors工具类创建线程池并使用线程池执行线程的代码。如果希望在服务器上使用线程池，强烈建议使用newFixedThreadPool方法来创建线程池，这样能获得更好的性能。</p><h3 id="线程的基本状态以及状态之间的关系？"><a href="#线程的基本状态以及状态之间的关系？" class="headerlink" title="线程的基本状态以及状态之间的关系？"></a>线程的基本状态以及状态之间的关系？</h3><p>答： </p><p>说明：其中Running表示运行状态，Runnable表示就绪状态（万事俱备，只欠CPU），Blocked表示阻塞状态，阻塞状态又有多种情况，可能是因为调用wait()方法进入等待池，也可能是执行同步方法或同步代码块进入等锁池，或者是调用了sleep()方法或join()方法等待休眠或其他线程结束，或是因为发生了I/O中断。</p><h3 id="简述synchronized-和java-util-concurrent-locks-Lock的异同？"><a href="#简述synchronized-和java-util-concurrent-locks-Lock的异同？" class="headerlink" title="简述synchronized 和java.util.concurrent.locks.Lock的异同？"></a>简述synchronized 和java.util.concurrent.locks.Lock的异同？</h3><p>答：Lock是Java 5以后引入的新的API，和关键字synchronized相比主要相同点：Lock 能完成synchronized所实现的所有功能；主要不同点：Lock有比synchronized更精确的线程语义和更好的性能，而且不强制性的要求一定要获得锁。synchronized会自动释放锁，而Lock一定要求程序员手工释放，并且最好在finally 块中释放（这是释放外部资源的最好的地方）。</p><h3 id="Java中如何实现序列化，有什么意义？"><a href="#Java中如何实现序列化，有什么意义？" class="headerlink" title="Java中如何实现序列化，有什么意义？"></a>Java中如何实现序列化，有什么意义？</h3><p>答：序列化就是一种用来处理对象流的机制，所谓对象流也就是将对象的内容进行流化。可以对流化后的对象进行读写操作，也可将流化后的对象传输于网络之间。序列化是为了解决对象流读写操作时可能引发的问题（如果不进行序列化可能会存在数据乱序的问题）。<br>要实现序列化，需要让一个类实现Serializable接口，该接口是一个标识性接口，标注该类对象是可被序列化的，然后使用一个输出流来构造一个对象输出流并通过writeObject(Object)方法就可以将实现对象写出（即保存其状态）；如果需要反序列化则可以用一个输入流建立对象输入流，然后通过readObject方法从流中读取对象。序列化除了能够实现对象的持久化之外，还能够用于对象的深度克隆（可以参考第29题）。</p><h3 id="Java中有几种类型的流？"><a href="#Java中有几种类型的流？" class="headerlink" title="Java中有几种类型的流？"></a>Java中有几种类型的流？</h3><p> 答：字节流和字符流。字节流继承于InputStream、OutputStream，字符流继承于Reader、Writer。在java.io 包中还有许多其他的流，主要是为了提高性能和使用方便。关于Java的I/O需要注意的有两点：一是两种对称性（输入和输出的对称性，字节和字符的对称性）；二是两种设计模式（适配器模式和装潢模式）。另外Java中的流不同于C#的是它只有一个维度一个方向。</p><p>面试题 - 编程实现文件拷贝。（这个题目在笔试的时候经常出现，下面的代码给出了两种实现方案）</p><p>import java.io.FileInputStream;</p><p>import java.io.FileOutputStream;</p><p>import java.io.IOException;</p><p>import java.io.InputStream;</p><p>import java.io.OutputStream;</p><p>import java.nio.ByteBuffer;</p><p>import java.nio.channels.FileChannel;</p><p>public final class MyUtil {</p><p>​    private MyUtil() {</p><p>​        throw new AssertionError();</p><p>​    }</p><p>​    public static void fileCopy(String source, String target) throws IOException {</p><p>​        try (InputStream in = new FileInputStream(source)) {</p><p>​            try (OutputStream out = new FileOutputStream(target)) {</p><p>​                byte[] buffer = new byte[4096];</p><p>​                int bytesToRead;</p><p>​                while((bytesToRead = in.read(buffer)) != -1) {</p><p>​                    out.write(buffer, 0, bytesToRead);</p><p>​                }</p><p>​            }</p><p>​        }</p><p>​    }</p><p>​    public static void fileCopyNIO(String source, String target) throws IOException {</p><p>​        try (FileInputStream in = new FileInputStream(source)) {</p><p>​            try (FileOutputStream out = new FileOutputStream(target)) {</p><p>​                FileChannel inChannel = in.getChannel();</p><p>​                FileChannel outChannel = out.getChannel();</p><p>​                ByteBuffer buffer = ByteBuffer.allocate(4096);</p><p>​                while(inChannel.read(buffer) != -1) {</p><p>​                    buffer.flip();</p><p>​                    outChannel.write(buffer);</p><p>​                    buffer.clear();</p><p>​                }</p><p>​            }</p><p>​        }</p><p>​    }</p><p>}</p><p>注意：上面用到Java 7的TWR，使用TWR后可以不用在finally中释放外部资源 ，从而让代码更加优雅。</p><h3 id="写一个方法，输入一个文件名和一个字符串，统计这个字符串在这个文件中出现的次数。"><a href="#写一个方法，输入一个文件名和一个字符串，统计这个字符串在这个文件中出现的次数。" class="headerlink" title="写一个方法，输入一个文件名和一个字符串，统计这个字符串在这个文件中出现的次数。"></a>写一个方法，输入一个文件名和一个字符串，统计这个字符串在这个文件中出现的次数。</h3><p>答：代码如下：</p><p>import java.io.BufferedReader;</p><p>import java.io.FileReader;</p><p>public final class MyUtil {</p><p>​    // 工具类中的方法都是静态方式访问的因此将构造器私有不允许创建对象(绝对好习惯)</p><p>​    private MyUtil() {</p><p>​        throw new AssertionError();</p><p>​    }</p><p>​    /**</p><p>​     * 统计给定文件中给定字符串的出现次数</p><p>​     * </p><p>​     * @param filename  文件名</p><p>​     * @param word 字符串</p><p>​     * @return 字符串在文件中出现的次数</p><p>​     */</p><p>​    public static int countWordInFile(String filename, String word) {</p><p>​        int counter = 0;</p><p>​        try (FileReader fr = new FileReader(filename)) {</p><p>​            try (BufferedReader br = new BufferedReader(fr)) {</p><p>​                String line = null;</p><p>​                while ((line = br.readLine()) != null) {</p><p>​                    int index = -1;</p><p>​                    while (line.length() &gt;= word.length() &amp;&amp; (index = line.indexOf(word)) &gt;= 0) {</p><p>​                        counter++;</p><p>​                        line = line.substring(index + word.length());</p><p>​                    }</p><p>​                }</p><p>​            }</p><p>​        } catch (Exception ex) {</p><p>​            ex.printStackTrace();</p><p>​        }</p><p>​        return counter;</p><p>​    }</p><p>}</p><h3 id="如何用Java代码列出一个目录下所有的文件？"><a href="#如何用Java代码列出一个目录下所有的文件？" class="headerlink" title="如何用Java代码列出一个目录下所有的文件？"></a>如何用Java代码列出一个目录下所有的文件？</h3><p>答：<br>如果只要求列出当前文件夹下的文件，代码如下所示：</p><p>import java.io.File;</p><p>class Test12 {</p><p>​    public static void main(String[] args) {</p><p>​        File f = new File(“/Users/Hao/Downloads”);</p><p>​        for(File temp : f.listFiles()) {</p><p>​            if(temp.isFile()) {</p><p>​                System.out.println(temp.getName());</p><p>​            }</p><p>​        }</p><p>​    }</p><p>}</p><p>如果需要对文件夹继续展开，代码如下所示：</p><p>import java.io.File;</p><p>class Test12 {</p><p>​    public static void main(String[] args) {</p><p>​        showDirectory(new File(“/Users/Hao/Downloads”));</p><p>​    }</p><p>​    public static void showDirectory(File f) {</p><p>​        _walkDirectory(f, 0);</p><p>​    }</p><p>​    private static void _walkDirectory(File f, int level) {</p><p>​        if(f.isDirectory()) {</p><p>​            for(File temp : f.listFiles()) {</p><p>​                _walkDirectory(temp, level + 1);</p><p>​            }</p><p>​        }</p><p>​        else {</p><p>​            for(int i = 0; i &lt; level - 1; i++) {</p><p>​                System.out.print(“\t”);</p><p>​            }</p><p>​            System.out.println(f.getName());</p><p>​        }</p><p>​    }</p><p>}</p><p>在Java 7中可以使用NIO.2的API来做同样的事情，代码如下所示：</p><p>class ShowFileTest {</p><p>​    public static void main(String[] args) throws IOException {</p><p>​        Path initPath = Paths.get(“/Users/Hao/Downloads”);</p><p>​        Files.walkFileTree(initPath, new SimpleFileVisitor<path>() {</path></p><p>​            @Override</p><p>​            public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) </p><p>​                    throws IOException {</p><p>​                System.out.println(file.getFileName().toString());</p><p>​                return FileVisitResult.CONTINUE;</p><p>​            }</p><p>​        });</p><p>​    }</p><p>}</p><h3 id="用Java的套接字编程实现一个多线程的回显（echo）服务器。"><a href="#用Java的套接字编程实现一个多线程的回显（echo）服务器。" class="headerlink" title="用Java的套接字编程实现一个多线程的回显（echo）服务器。"></a>用Java的套接字编程实现一个多线程的回显（echo）服务器。</h3><p> 答：</p><p>import java.io.BufferedReader;</p><p>import java.io.IOException;</p><p>import java.io.InputStreamReader;</p><p>import java.io.PrintWriter;</p><p>import java.net.ServerSocket;</p><p>import java.net.Socket;</p><p>public class EchoServer {</p><p>​    private static final int ECHO_SERVER_PORT = 6789;</p><p>​    public static void main(String[] args) {        </p><p>​        try(ServerSocket server = new ServerSocket(ECHO_SERVER_PORT)) {</p><p>​            System.out.println(“服务器已经启动…”);</p><p>​            while(true) {</p><p>​                Socket client = server.accept();</p><p>​                new Thread(new ClientHandler(client)).start();</p><p>​            }</p><p>​        } catch (IOException e) {</p><p>​            e.printStackTrace();</p><p>​        }</p><p>​    }</p><p>​    private static class ClientHandler implements Runnable {</p><p>​        private Socket client;</p><p>​        public ClientHandler(Socket client) {</p><p>​            this.client = client;</p><p>​        }</p><p>​        @Override</p><p>​        public void run() {</p><p>​            try(BufferedReader br = new BufferedReader(new InputStreamReader(client.getInputStream()));</p><p>​                    PrintWriter pw = new PrintWriter(client.getOutputStream())) {</p><p>​                String msg = br.readLine();</p><p>​                System.out.println(“收到” + client.getInetAddress() + “发送的: “ + msg);</p><p>​                pw.println(msg);</p><p>​                pw.flush();</p><p>​            } catch(Exception ex) {</p><p>​                ex.printStackTrace();</p><p>​            } finally {</p><p>​                try {</p><p>​                    client.close();</p><p>​                } catch (IOException e) {</p><p>​                    e.printStackTrace();</p><p>​                }</p><p>​            }</p><p>​        }</p><p>​    }</p><p>}</p><p>注意：上面的代码使用了Java 7的TWR语法，由于很多外部资源类都间接的实现了AutoCloseable接口（单方法回调接口），因此可以利用TWR语法在try结束的时候通过回调的方式自动调用外部资源类的close()方法，避免书写冗长的finally代码块。此外，上面的代码用一个静态内部类实现线程的功能，使用多线程可以避免一个用户I/O操作所产生的中断影响其他用户对服务器的访问，简单的说就是一个用户的输入操作不会造成其他用户的阻塞。当然，上面的代码使用线程池可以获得更好的性能，因为频繁的创建和销毁线程所造成的开销也是不可忽视的。</p><p>下面是一段回显客户端测试代码：</p><p>import java.io.BufferedReader;</p><p>import java.io.InputStreamReader;</p><p>import java.io.PrintWriter;</p><p>import java.net.Socket;</p><p>import java.util.Scanner;</p><p>public class EchoClient {</p><p>​    public static void main(String[] args) throws Exception {</p><p>​        Socket client = new Socket(“localhost”, 6789);</p><p>​        Scanner sc = new Scanner(System.in);</p><p>​        System.out.print(“请输入内容: “);</p><p>​        String msg = sc.nextLine();</p><p>​        sc.close();</p><p>​        PrintWriter pw = new PrintWriter(client.getOutputStream());</p><p>​        pw.println(msg);</p><p>​        pw.flush();</p><p>​        BufferedReader br = new BufferedReader(new InputStreamReader(client.getInputStream()));</p><p>​        System.out.println(br.readLine());</p><p>​        client.close();</p><p>​    }</p><p>}</p><p>如果希望用NIO的多路复用套接字实现服务器，代码如下所示。NIO的操作虽然带来了更好的性能，但是有些操作是比较底层的，对于初学者来说还是有些难于理解。</p><p>import java.io.IOException;</p><p>import java.net.InetSocketAddress;</p><p>import java.nio.ByteBuffer;</p><p>import java.nio.CharBuffer;</p><p>import java.nio.channels.SelectionKey;</p><p>import java.nio.channels.Selector;</p><p>import java.nio.channels.ServerSocketChannel;</p><p>import java.nio.channels.SocketChannel;</p><p>import java.util.Iterator;</p><p>public class EchoServerNIO {</p><p>​    private static final int ECHO_SERVER_PORT = 6789;</p><p>​    private static final int ECHO_SERVER_TIMEOUT = 5000;</p><p>​    private static final int BUFFER_SIZE = 1024;</p><p>​    private static ServerSocketChannel serverChannel = null;</p><p>​    private static Selector selector = null;    // 多路复用选择器</p><p>​    private static ByteBuffer buffer = null;    // 缓冲区</p><p>​    public static void main(String[] args) {</p><p>​        init();</p><p>​        listen();</p><p>​    }</p><p>​    private static void init() {</p><p>​        try {</p><p>​            serverChannel = ServerSocketChannel.open();</p><p>​            buffer = ByteBuffer.allocate(BUFFER_SIZE);</p><p>​            serverChannel.socket().bind(new InetSocketAddress(ECHO_SERVER_PORT));</p><p>​            serverChannel.configureBlocking(false);</p><p>​            selector = Selector.open();</p><p>​            serverChannel.register(selector, SelectionKey.OP_ACCEPT);</p><p>​        } catch (Exception e) {</p><p>​            throw new RuntimeException(e);</p><p>​        }</p><p>​    }</p><p>​    private static void listen() {</p><p>​        while (true) {</p><p>​            try {</p><p>​                if (selector.select(ECHO_SERVER_TIMEOUT) != 0) {</p><p>​                    Iterator<selectionkey> it = selector.selectedKeys().iterator();</selectionkey></p><p>​                    while (it.hasNext()) {</p><p>​                        SelectionKey key = it.next();</p><p>​                        it.remove();</p><p>​                        handleKey(key);</p><p>​                    }</p><p>​                }</p><p>​            } catch (Exception e) {</p><p>​                e.printStackTrace();</p><p>​            }</p><p>​        }</p><p>​    }</p><p>​    private static void handleKey(SelectionKey key) throws IOException {</p><p>​        SocketChannel channel = null;</p><p>​        try {</p><p>​            if (key.isAcceptable()) {</p><p>​                ServerSocketChannel serverChannel = (ServerSocketChannel) key.channel();</p><p>​                channel = serverChannel.accept();</p><p>​                channel.configureBlocking(false);</p><p>​                channel.register(selector, SelectionKey.OP_READ);</p><p>​            } else if (key.isReadable()) {</p><p>​                channel = (SocketChannel) key.channel();</p><p>​                buffer.clear();</p><p>​                if (channel.read(buffer) &gt; 0) {</p><p>​                    buffer.flip();</p><p>​                    CharBuffer charBuffer = CharsetHelper.decode(buffer);</p><p>​                    String msg = charBuffer.toString();</p><p>​                    System.out.println(“收到” + channel.getRemoteAddress() + “的消息：” + msg);</p><p>​                    channel.write(CharsetHelper.encode(CharBuffer.wrap(msg)));</p><p>​                } else {</p><p>​                    channel.close();</p><p>​                }</p><p>​            }</p><p>​        } catch (Exception e) {</p><p>​            e.printStackTrace();</p><p>​            if (channel != null) {</p><p>​                channel.close();</p><p>​            }</p><p>​        }</p><p>​    }</p><p>}</p><p>import java.nio.ByteBuffer;</p><p>import java.nio.CharBuffer;</p><p>import java.nio.charset.CharacterCodingException;</p><p>import java.nio.charset.Charset;</p><p>import java.nio.charset.CharsetDecoder;</p><p>import java.nio.charset.CharsetEncoder;</p><p>public final class CharsetHelper {</p><p>​    private static final String UTF_8 = “UTF-8”;</p><p>​    private static CharsetEncoder encoder = Charset.forName(UTF_8).newEncoder();</p><p>​    private static CharsetDecoder decoder = Charset.forName(UTF_8).newDecoder();</p><p>​    private CharsetHelper() {</p><p>​    }</p><p>​    public static ByteBuffer encode(CharBuffer in) throws CharacterCodingException{</p><p>​        return encoder.encode(in);</p><p>​    }</p><p>​    public static CharBuffer decode(ByteBuffer in) throws CharacterCodingException{</p><p>​        return decoder.decode(in);</p><p>​    }</p><p>}</p><h3 id="XML文档定义有几种形式？它们之间有何本质区别？解析XML文档有哪几种方式？"><a href="#XML文档定义有几种形式？它们之间有何本质区别？解析XML文档有哪几种方式？" class="headerlink" title="XML文档定义有几种形式？它们之间有何本质区别？解析XML文档有哪几种方式？"></a>XML文档定义有几种形式？它们之间有何本质区别？解析XML文档有哪几种方式？</h3><p>答：XML文档定义分为DTD和Schema两种形式，二者都是对XML语法的约束，其本质区别在于Schema本身也是一个XML文件，可以被XML解析器解析，而且可以为XML承载的数据定义类型，约束能力较之DTD更强大。对XML的解析主要有DOM（文档对象模型，Document Object Model）、SAX（Simple API for XML）和StAX（Java 6中引入的新的解析XML的方式，Streaming API for XML），其中DOM处理大型文件时其性能下降的非常厉害，这个问题是由DOM树结构占用的内存较多造成的，而且DOM解析方式必须在解析文件之前把整个文档装入内存，适合对XML的随机访问（典型的用空间换取时间的策略）；SAX是事件驱动型的XML解析方式，它顺序读取XML文件，不需要一次全部装载整个文件。当遇到像文件开头，文档结束，或者标签开头与标签结束时，它会触发一个事件，用户通过事件回调代码来处理XML文件，适合对XML的顺序访问；顾名思义，StAX把重点放在流上，实际上StAX与其他解析方式的本质区别就在于应用程序能够把XML作为一个事件流来处理。将XML作为一组事件来处理的想法并不新颖（SAX就是这样做的），但不同之处在于StAX允许应用程序代码把这些事件逐个拉出来，而不用提供在解析器方便时从解析器中接收事件的处理程序。</p><h3 id="你在项目中哪些地方用到了XML？"><a href="#你在项目中哪些地方用到了XML？" class="headerlink" title="你在项目中哪些地方用到了XML？"></a>你在项目中哪些地方用到了XML？</h3><p> 答：XML的主要作用有两个方面：数据交换和信息配置。在做数据交换时，XML将数据用标签组装成起来，然后压缩打包加密后通过网络传送给接收者，接收解密与解压缩后再从XML文件中还原相关信息进行处理，XML曾经是异构系统间交换数据的事实标准，但此项功能几乎已经被JSON（JavaScript Object Notation）取而代之。当然，目前很多软件仍然使用XML来存储配置信息，我们在很多项目中通常也会将作为配置信息的硬代码写在XML文件中，Java的很多框架也是这么做的，而且这些框架都选择了dom4j作为处理XML的工具，因为Sun公司的官方API实在不怎么好用。</p><p>补充：现在有很多时髦的软件（如Sublime）已经开始将配置文件书写成JSON格式，我们已经强烈的感受到XML的另一项功能也将逐渐被业界抛弃。</p><h2 id="UML"><a href="#UML" class="headerlink" title="UML"></a>UML</h2><h3 id="什么是UML？"><a href="#什么是UML？" class="headerlink" title="什么是UML？"></a>什么是UML？</h3><p>答：UML是统一建模语言（Unified Modeling Language）的缩写，它发表于1997年，综合了当时已经存在的面向对象的建模语言、方法和过程，是一个支持模型化和软件系统开发的图形化语言，为软件开发的所有阶段提供模型化和可视化支持。使用UML可以帮助沟通与交流，辅助应用设计和文档的生成，还能够阐释系统的结构和行为。</p><h3 id="UML中有哪些常用的图？"><a href="#UML中有哪些常用的图？" class="headerlink" title="UML中有哪些常用的图？"></a>UML中有哪些常用的图？</h3><p>答：UML定义了多种图形化的符号来描述软件系统部分或全部的静态结构和动态结构，包括：用例图（use case diagram）、类图（class diagram）、时序图（sequence diagram）、协作图（collaboration diagram）、状态图（statechart diagram）、活动图（activity diagram）、构件图（component diagram）、部署图（deployment diagram）等。在这些图形化符号中，有三种图最为重要，分别是：用例图（用来捕获需求，描述系统的功能，通过该图可以迅速的了解系统的功能模块及其关系）、类图（描述类以及类与类之间的关系，通过该图可以快速了解系统）、时序图（描述执行特定任务时对象之间的交互关系以及执行顺序，通过该图可以了解对象能接收的消息也就是说对象能够向外界提供的服务）。 </p><p>用例图：<br>类图：<br>时序图： </p><h2 id="RMI（远程方法调用）"><a href="#RMI（远程方法调用）" class="headerlink" title="RMI（远程方法调用）"></a>RMI（远程方法调用）</h2><h3 id="什么是RMI？"><a href="#什么是RMI？" class="headerlink" title="什么是RMI？"></a>什么是RMI？</h3><p>Java远程方法调用(Java RMI)是Java API对远程过程调用(RPC)提供的面向对象的等价形式，支持直接传输序列化的Java对象和分布式垃圾回收。远程方法调用可以看做是激活远程正在运行的对象上的方法的步骤。RMI对调用者是位置透明的，因为调用者感觉方法是执行在本地运行的对象上的。看下RMI的一些注意事项。</p><h3 id="RMI体系结构的基本原则是什么？"><a href="#RMI体系结构的基本原则是什么？" class="headerlink" title="RMI体系结构的基本原则是什么？"></a>RMI体系结构的基本原则是什么？</h3><p>RMI体系结构是基于一个非常重要的行为定义和行为实现相分离的原则。RMI允许定义行为的代码和实现行为的代码相分离，并且运行在不同的JVM上。</p><h3 id="RMI体系结构分哪几层？"><a href="#RMI体系结构分哪几层？" class="headerlink" title="RMI体系结构分哪几层？"></a>RMI体系结构分哪几层？</h3><p>RMI体系结构分以下几层：</p><p>存根和骨架层(Stub and Skeleton layer)：这一层对程序员是透明的，它主要负责拦截客户端发出的方法调用请求，然后把请求重定向给远程的RMI服务。</p><p>远程引用层(Remote Reference Layer)：RMI体系结构的第二层用来解析客户端对服务端远程对象的引用。这一层解析并管理客户端对服务端远程对象的引用。连接是点到点的。</p><p>传输层(Transport layer)：这一层负责连接参与服务的两个JVM。这一层是建立在网络上机器间的TCP/IP连接之上的。它提供了基本的连接服务，还有一些防火墙穿透策略。</p><h3 id="RMI中的远程接口-Remote-Interface-扮演了什么样的角色？"><a href="#RMI中的远程接口-Remote-Interface-扮演了什么样的角色？" class="headerlink" title="RMI中的远程接口(Remote Interface)扮演了什么样的角色？"></a>RMI中的远程接口(Remote Interface)扮演了什么样的角色？</h3><p>远程接口用来标识哪些方法是可以被非本地虚拟机调用的接口。远程对象必须要直接或者是间接实现远程接口。实现了远程接口的类应该声明被实现的远程接口，给每一个远程对象定义构造函数，给所有远程接口的方法提供实现。</p><h3 id="java-rmi-Naming类扮演了什么样的角色？"><a href="#java-rmi-Naming类扮演了什么样的角色？" class="headerlink" title="java.rmi.Naming类扮演了什么样的角色？"></a>java.rmi.Naming类扮演了什么样的角色？</h3><p>java.rmi.Naming类用来存储和获取在远程对象注册表里面的远程对象的引用。Naming类的每一个方法接收一个URL格式的String对象作为它的参数。</p><h3 id="RMI的绑定-Binding-是什么意思？"><a href="#RMI的绑定-Binding-是什么意思？" class="headerlink" title="RMI的绑定(Binding)是什么意思？"></a>RMI的绑定(Binding)是什么意思？</h3><p>绑定是为了查询找远程对象而给远程对象关联或者是注册以后会用到的名称的过程。远程对象可以使用Naming类的bind()或者rebind()方法跟名称相关联。</p><h3 id="Naming类的bind-和rebind-方法有什么区别？"><a href="#Naming类的bind-和rebind-方法有什么区别？" class="headerlink" title="Naming类的bind()和rebind()方法有什么区别？"></a>Naming类的bind()和rebind()方法有什么区别？</h3><p>bind()方法负责把指定名称绑定给远程对象，rebind()方法负责把指定名称重新绑定到一个新的远程对象。如果那个名称已经绑定过了，先前的绑定会被替换掉。</p><h3 id="让RMI程序能正确运行有哪些步骤？"><a href="#让RMI程序能正确运行有哪些步骤？" class="headerlink" title="让RMI程序能正确运行有哪些步骤？"></a>让RMI程序能正确运行有哪些步骤？</h3><p>为了让RMI程序能正确运行必须要包含以下几个步骤：</p><p>编译所有的源文件。</p><p>使用rmic生成stub。</p><p>启动rmiregistry。</p><p>启动RMI服务器。</p><p>运行客户端程序。</p><h3 id="RMI的stub扮演了什么样的角色？"><a href="#RMI的stub扮演了什么样的角色？" class="headerlink" title="RMI的stub扮演了什么样的角色？"></a>RMI的stub扮演了什么样的角色？</h3><p>远程对象的stub扮演了远程对象的代表或者代理的角色。调用者在本地stub上调用方法，它负责在远程对象上执行方法。当stub的方法被调用的时候，会经历以下几个步骤：</p><p>初始化到包含了远程对象的JVM的连接。</p><p>序列化参数到远程的JVM。</p><p>等待方法调用和执行的结果。</p><p>反序列化返回的值或者是方法没有执行成功情况下的异常。</p><p>把值返回给调用者。</p><h3 id="什么是分布式垃圾回收-DGC-？它是如何工作的？"><a href="#什么是分布式垃圾回收-DGC-？它是如何工作的？" class="headerlink" title="什么是分布式垃圾回收(DGC)？它是如何工作的？"></a>什么是分布式垃圾回收(DGC)？它是如何工作的？</h3><p>DGC叫做分布式垃圾回收。RMI使用DGC来做自动垃圾回收。因为RMI包含了跨虚拟机的远程对象的引用，垃圾回收是很困难的。DGC使用引用计数算法来给远程对象提供自动内存管理。</p><h3 id="RMI中使用RMI安全管理器-RMISecurityManager-的目的是什么？"><a href="#RMI中使用RMI安全管理器-RMISecurityManager-的目的是什么？" class="headerlink" title="RMI中使用RMI安全管理器(RMISecurityManager)的目的是什么？"></a>RMI中使用RMI安全管理器(RMISecurityManager)的目的是什么？</h3><p>RMISecurityManager使用下载好的代码提供可被RMI应用程序使用的安全管理器。如果没有设置安全管理器，RMI的类加载器就不会从远程下载任何的类。</p><h2 id="Object类"><a href="#Object类" class="headerlink" title="Object类"></a>Object类</h2><h3 id="Object-类中有哪些方法？作用是什么？"><a href="#Object-类中有哪些方法？作用是什么？" class="headerlink" title="Object 类中有哪些方法？作用是什么？"></a>Object 类中有哪些方法？作用是什么？</h3><p>在 object 类中有 11 个方法，分别是：</p><p>clone() //创建并返回此对象的副本</p><p>equals(Object obj) //指示一些其他对象是否等于此。</p><p>finalize() //当垃圾收集确定不再有对该对象的引用时，垃圾收集器在对象上调用该对象。</p><p>getClass() //返回此 Object的运行时类。</p><p>hashCode() //返回对象的哈希码值。</p><p>notify() //唤醒正在等待对象监视器的单个线程。</p><p>notifyAll() //唤醒正在等待对象监视器的所有线程。</p><p>toString() //返回对象的字符串表示形式。</p><p>wait()    //导致当前线程等待，直到另一个线程调用该对象的 notify()方法或                 notifyAll()方法。</p><p>wait(long timeout) //导致当前线程等待，直到另一个线程调用 notify()方法或该对象的 notifyAll()方法，或者指定的时间已过。</p><p>wait(long timeout, int nanos) //导致当前线程等待，直到另一个线程调用该对象的 notify()方法或 notifyAll()方法，或者某些其他线程中断当前线程，或一定量的实时时间。</p><p>### </p><p>### </p><p>### </p>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Java 主类结构</title>
      <link href="/2018/08/06/Java-%E4%B8%BB%E7%B1%BB%E7%BB%93%E6%9E%84/"/>
      <url>/2018/08/06/Java-%E4%B8%BB%E7%B1%BB%E7%BB%93%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<p>Java 语言是面向对象的程序设计语言，Java 程序的基本组成单元是类类体中又包括属性与方法两部分。</p><p>每一个应用程序都必须包含一个 <code>main()</code> 方法，含有 <code>main()</code>方法的类被称为主类。</p><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">package com.darklovy.Number;</span><br><span class="line"></span><br><span class="line">public class First &#123;</span><br><span class="line">    private static String s1 = &quot;你好&quot;;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        String s2 = &quot;Java&quot;;</span><br><span class="line">        //测试</span><br><span class="line">        System.out.println(s1);</span><br><span class="line">        System.out.println(s2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line">你好</span><br><span class="line">Java</span><br></pre></td></tr></table></figure><h3 id="包声明"><a href="#包声明" class="headerlink" title="包声明"></a>包声明</h3><p>一个 Java 应用程序是由若干个类组成的，在上面的例子中 <code>package com.darklovy.Number;</code> 声明该类所在的包。<code>package</code>为包的关键字。</p><h3 id="声明成员变量和局部变量"><a href="#声明成员变量和局部变量" class="headerlink" title="声明成员变量和局部变量"></a>声明成员变量和局部变量</h3><ul><li>全局变量：通常将类的属性成为类的全局变量</li><li>局部变量：方法中的属性成为局部变量。</li></ul><p>全局变量声明在类体中，局部变量声明在方法体中，全局变量和局部变量都有各自的生命周期或者说是应用范围</p><h3 id="编写主方法"><a href="#编写主方法" class="headerlink" title="编写主方法"></a>编写主方法</h3><p><code>main()</code>方法是类体中的主方法。该方法从 <code>{</code> 到 <code>}</code> 结束。<code>public static void</code>分别是 <code>main()</code>方法的权限修饰符、静态修饰符和返回值修饰符。</p><p>Java 程序中的 <code>main()</code>方法必须声明为 <code>public static void</code></p><p><code>Stirng[] args</code>是一个字符串类型的数组，它是 <code>main()</code>方法的参数。<code>main()</code>方法是程序开始执行的位置。</p><h3 id="导入-API-类库"><a href="#导入-API-类库" class="headerlink" title="导入 API 类库"></a>导入 API 类库</h3><p>在 Java 语言中可以通过 <code>import</code>关键字导入相关的库。</p><p><strong>Java 语言是严格区分大小写的。例如，不能将关键字 class 等同于 Class</strong></p><p>感兴趣的话可以点击下面的链接，关注我的微信公众号和我的知识星球。</p><blockquote><p><a href="https://www.ttxxly.top/images/qrcode_darklovy.jpg">https://www.ttxxly.top/images/qrcode_darklovy.jpg</a></p><p><a href="https://www.ttxxly.top/images/qrcode_ttxxly123.jpg">https://www.ttxxly.top/images/qrcode_ttxxly123.jpg</a></p><p><a href="https://www.ttxxly.top/images/ZSXQ_darklovy.png">https://www.ttxxly.top/images/ZSXQ_darklovy.png</a></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>eclipse 安装与配置</title>
      <link href="/2018/08/06/eclipse-%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/"/>
      <url>/2018/08/06/eclipse-%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<p>下载链接： <a href="http://www.eclipse.org/downloads/eclipse-packages/" target="_blank" rel="noopener">http://www.eclipse.org/downloads/eclipse-packages/</a></p><a id="more"></a><p>eclipse配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">1. 配置工作空间的编码格式 window -&gt; preference -&gt;  General -&gt; Workspace</span><br><span class="line">-&gt; Text File encoding</span><br><span class="line">2. eclipse 配置 Tomcat 服务器</span><br><span class="line">window -&gt; preference -&gt; server -&gt; Runtime environment</span><br><span class="line">-&gt; add</span><br><span class="line">3. Java 代码自动提示</span><br><span class="line">Window &gt; Preferences &gt; Java &gt; Editor &gt; Content Assist</span><br><span class="line">“Auto Activation triggers for java”这个选项就是指触发代码提示的的选项，</span><br><span class="line">     把“.”修改成&quot;.abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;</span><br><span class="line">4. XML 代码自动提示</span><br><span class="line">Window &gt; Preferences &gt; Xml &gt; Xml Files &gt; Editor &gt; Content Assist &gt; </span><br><span class="line">Auto activation &gt; Prompt when these characters are inserted ，设置框中默认是 &lt;=: ，</span><br><span class="line">改为： &lt;=:.abcdefghijklmnopqrstuvwxyz(,</span><br></pre></td></tr></table></figure><p>感兴趣的话可以点击下面的链接，关注我的微信公众号和我的知识星球。</p><blockquote><p><a href="https://www.ttxxly.top/images/qrcode_darklovy.jpg">https://www.ttxxly.top/images/qrcode_darklovy.jpg</a></p><p><a href="https://www.ttxxly.top/images/qrcode_ttxxly123.jpg">https://www.ttxxly.top/images/qrcode_ttxxly123.jpg</a></p><p><a href="https://www.ttxxly.top/images/ZSXQ_darklovy.png">https://www.ttxxly.top/images/ZSXQ_darklovy.png</a></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>java JDK 安装与配置</title>
      <link href="/2018/08/05/java-JDK-%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/"/>
      <url>/2018/08/05/java-JDK-%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<p>JDK下载地址：<a href="http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html" target="_blank" rel="noopener">http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html</a></p><p>注意：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1. 电脑的系统版本X86（32位系统）、X86_X64（64系统）</span><br><span class="line">2. 安装JDK的目录最好不要有中文目录，或者带有特殊符号的目录</span><br></pre></td></tr></table></figure><p>双击安装包，选择安装安装JDK的目录即可开始安装。</p><a id="more"></a><h5 id="配置JDK的环境变量"><a href="#配置JDK的环境变量" class="headerlink" title="配置JDK的环境变量"></a>配置JDK的环境变量</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">系统环境变量：</span><br><span class="line">JAVA_HOME：JDK安装的根目录</span><br><span class="line">Path：%JAVA_HOME%\bin;</span><br><span class="line">java -version:显示安装JDK的版本号，JDK的环境配置成功</span><br><span class="line"></span><br><span class="line">JDK java开发套件  javac.exe</span><br><span class="line">jre java的运行环境，没有编译源文件的执行程序（javac.exe）</span><br></pre></td></tr></table></figure><h5 id="编写一个测试案例"><a href="#编写一个测试案例" class="headerlink" title="编写一个测试案例"></a>编写一个测试案例</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">编译：javac 源文件.java</span><br><span class="line">执行：java 类名</span><br></pre></td></tr></table></figure><ol><li>在 F:\projects\eclipse-workspace 目录下新建 <code>Hello.java</code></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public class Hello &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">System.out.println(&quot;This is a java Application.&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>打开控制台</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\ttxxl&gt;F:</span><br><span class="line">F:\&gt;cd F:\projects\eclipse-workspace</span><br><span class="line">F:\projects\eclipse-workspace&gt;javac Hello.java</span><br><span class="line">F:\projects\eclipse-workspace&gt;java Hello</span><br><span class="line">This is a java Application.</span><br></pre></td></tr></table></figure><p>如果正常编译和执行Hello输出，代表JDK环境安装成功。</p><p>感兴趣的话可以点击下面的链接，关注我的微信公众号和我的知识星球。</p><blockquote><p><a href="https://www.ttxxly.top/images/qrcode_darklovy.jpg">https://www.ttxxly.top/images/qrcode_darklovy.jpg</a></p><p><a href="https://www.ttxxly.top/images/qrcode_ttxxly123.jpg">https://www.ttxxly.top/images/qrcode_ttxxly123.jpg</a></p><p><a href="https://www.ttxxly.top/images/ZSXQ_darklovy.png">https://www.ttxxly.top/images/ZSXQ_darklovy.png</a></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Java 语言特性</title>
      <link href="/2018/08/05/Java-%E8%AF%AD%E8%A8%80%E7%89%B9%E6%80%A7/"/>
      <url>/2018/08/05/Java-%E8%AF%AD%E8%A8%80%E7%89%B9%E6%80%A7/</url>
      
        <content type="html"><![CDATA[<p>本文简单的介绍了 Java 语言的特性。</p><a id="more"></a><h5 id="简单"><a href="#简单" class="headerlink" title="简单"></a>简单</h5><p>Java 语言的语法简单明了，容易掌握，而且是纯面向对象的语言。</p><ul><li>语法规则类似于 C++， C程序设计人员可以很容易地掌握 Java 语言的语法。</li><li>Java 语言对 C++ 进行了简化和提高。使用接口取代了多重继承、取消了指针、实现了垃圾自动回收，简化程序员的资源释放管理工作。</li><li>Java 提供了丰富的类库和 API 文档以及第三方开发包，还有大量的开源项目。</li></ul><h5 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h5><p>面向对象是 Java  语言的基础，也是 Java 语言的重要特性，它本身就是一种纯面向对象的程序设计语言。Java 提倡万物皆对象，语法汇总不能在类外面定义单独的数据和函数。Java 语言最外部的数据类型就是对象，所有的元素都要通过类和对象类访问。</p><h5 id="分布性"><a href="#分布性" class="headerlink" title="分布性"></a>分布性</h5><p>Java 的分布包括操作分布和数据分布，其中操作分布是指在多个不同的主机上布置相关操作，而数据分布是将数据分别存放在多个不同的主机上，这些主机是网路中的不同成员。Java可以凭借 URL（统一资源定位符）对象访问网络对象，访问方式与访问本地系统相同。</p><h5 id="可移植性"><a href="#可移植性" class="headerlink" title="可移植性"></a>可移植性</h5><p>Java 程序具有与体系结构无关的特性，可以很方便地一直到网络上的不同计算机中。同时，Java 的类库中也实现了针对不同平台的接口。使这些类库可以移植。</p><h5 id="解释型"><a href="#解释型" class="headerlink" title="解释型"></a>解释型</h5><p>运行 Java 程序需要解释器，任何移植了 Java 解释器的计算机或其他设备都可以用 Java 字节码进行解释执行，字节码独立于平台，它本身携带了许多编译时的信息，使得连接过程更加简单，开发过程更加迅速，更具探索性、</p><h5 id="安全性"><a href="#安全性" class="headerlink" title="安全性"></a>安全性</h5><p>Java 语言删除了类似 C 语言中的指针和内存释放等语法，有效地避免了非法操作内存、Java 程序代码要经过代码校验、指针校验等很多测试步骤才能够运行，所以未经允许的 Java 程序不可能出现损害系统平台的行为，而且使用 Java 可以编写防病毒和防修改的系统。</p><h5 id="健壮性"><a href="#健壮性" class="headerlink" title="健壮性"></a>健壮性</h5><p>Java 程序的设计目标之一，是编写多方面的、可靠的应用程序，Java 将检查程序在编译和运行时的错误，并消除错误、类型检查能帮助用户检查出许多在开发早期出现的错误。集成开发工具的出现也使编译和运行 Java 程序更加容易。</p><h5 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h5><p>多线程能够使应用程序在同一时间并行执行多项任务，而且相应的同步机制可以保证不同线程能够正确地共享数据，使用多线程，可以带来更好的交互能力和实时能力。</p><h5 id="高性能"><a href="#高性能" class="headerlink" title="高性能"></a>高性能</h5><p>Java 编译后的字节码实在解释器中运行的，所以它的速度较多数交互式应用程序提高了很多。另外，字节码可以程序运行时被翻译成特定平台的机器指令，从而进一步提高运行速度。</p><h5 id="动态"><a href="#动态" class="headerlink" title="动态"></a>动态</h5><p>Java 可以动态调整库中方法和增加变量，而客户端却不需要任何更改。在 Java 中进行动态调整是非常简单和直接的。</p><p>感兴趣的话可以点击下面的链接，关注我的微信公众号和我的知识星球。</p><blockquote><p><a href="https://www.ttxxly.top/images/qrcode_darklovy.jpg">https://www.ttxxly.top/images/qrcode_darklovy.jpg</a></p><p><a href="https://www.ttxxly.top/images/qrcode_ttxxly123.jpg">https://www.ttxxly.top/images/qrcode_ttxxly123.jpg</a></p><p><a href="https://www.ttxxly.top/images/ZSXQ_darklovy.png">https://www.ttxxly.top/images/ZSXQ_darklovy.png</a></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Java 简介</title>
      <link href="/2018/08/05/Java-%E7%AE%80%E4%BB%8B/"/>
      <url>/2018/08/05/Java-%E7%AE%80%E4%BB%8B/</url>
      
        <content type="html"><![CDATA[<p>Java是由Sun Microsystems公司于1995年5月推出的Java面向对象程序设计语言和Java平台的总称。由James Gosling和同事们共同研发，并在1995年正式推出。</p><a id="more"></a><p>Java分为三个体系：</p><ul><li>Java SE(Java2 Platform Standard Edition，java平台标准版)</li><li>Java EE (Java 2 Platform,Enterprise Edition，java平台企业版)</li><li>Java ME(Java 2 Platform Micro Edition，java平台微型版)。</li></ul><p>2005年6月，JavaOne大会召开，SUN公司公开Java SE 6。此时，Java的各种版本已经更名以取消其中的数字”2”：J2EE更名为Java EE, J2SE更名为Java SE，J2ME更名为Java ME。</p><h5 id="Java-应用领域"><a href="#Java-应用领域" class="headerlink" title="Java 应用领域"></a>Java 应用领域</h5><p>借助于 Java，程序开发人员可以自由地使用现有的硬件和软件系统平台。因为 Java 是独立于平台的，它还可以应用于计算机之外的领域，Java 程序可以在便携式计算机、电视、电话、手机和其他的大量电子设备上运行。</p><p>Java 的应用领域主要有以下几个方面：</p><ul><li>桌面应用系统开发</li><li>嵌入式系统开发</li><li>电子商务应用</li><li>企业级应用开发</li><li>交互式系统开发</li><li>多媒体系统开发</li><li>分布式系统开发</li><li>Web 应用系统开发</li></ul><p>Java 无处不在，其发展速度要快于在它之前的任何一种计算机语言。</p><h5 id="Java-版本"><a href="#Java-版本" class="headerlink" title="Java 版本"></a>Java 版本</h5><p>自从 Sun 公司推出 Java 以来，就力图使之无所不能。Java 发展至今，按照应用范围可分为 3 个版本。</p><ol><li>Java SE</li></ol><p>Java SE 是 Java 的标准版，主要用于桌面应用程序的开发，同时也是 Java 的基础，它包含 Java 语言基础，JDBC（Java 数据库连接性）操作、I/O（输入/输出、网络通信、多线程等技术。</p><ol><li>Java EE </li></ol><p>Java EE 是 Java 的企业版，主要用于开发企业级分布式的网络程序，如电子商务网站和ERP（企业资源规划）系统，其核心为 EJB（企业 Java 组件模型）。</p><ol><li>Java ME</li></ol><p>Java ME 主要用于嵌入式系统开发，如掌上电脑，手机等移动电子设备，现在大部分手机厂商所生产的手机都支持Java 技术。</p><p>感兴趣的话可以点击下面的链接，关注我的微信公众号和我的知识星球。</p><blockquote><p><a href="https://www.ttxxly.top/images/qrcode_darklovy.jpg">https://www.ttxxly.top/images/qrcode_darklovy.jpg</a></p><p><a href="https://www.ttxxly.top/images/qrcode_ttxxly123.jpg">https://www.ttxxly.top/images/qrcode_ttxxly123.jpg</a></p><p><a href="https://www.ttxxly.top/images/ZSXQ_darklovy.png">https://www.ttxxly.top/images/ZSXQ_darklovy.png</a></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>hexo的安装与配置</title>
      <link href="/2018/08/02/hexo%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/"/>
      <url>/2018/08/02/hexo%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<p><em>本文主要介绍在 <code>github pages</code> 和 <code>Coding pages</code> 上搭建 <code>Hexo</code> 博客以及相关配置优化等.</em></p><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">安装流程：</span><br><span class="line">1. 安装Node.js</span><br><span class="line">2. 安装Git → 安装Hexo</span><br><span class="line">3. 安装主题 </span><br><span class="line">4. 本地测试运行</span><br><span class="line">5. 在github与coding上创建pages仓库</span><br><span class="line">6. 部署到远程仓库中</span><br><span class="line">7. 自定义域名访问</span><br><span class="line">配置与优化</span><br><span class="line">1. 添加标签页面</span><br><span class="line">2. 添加分类页面</span><br><span class="line">3. 添加自定义页面</span><br><span class="line">4. 文章末尾追加版权信息</span><br><span class="line">5. 开启打赏功能</span><br><span class="line">6. 友情链接</span><br><span class="line">7. 自定义字体</span><br><span class="line">8. 自定义图标和侧栏头像</span><br><span class="line">9. 添加 Rss 订阅</span><br><span class="line">10. MathJax支持</span><br><span class="line">错误解决</span><br><span class="line">1. 关于网站图标不更新问题</span><br></pre></td></tr></table></figure><h4 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装<code>Hexo</code></h4><h5 id="Node-js、GIt安装"><a href="#Node-js、GIt安装" class="headerlink" title="Node.js、GIt安装"></a><code>Node.js</code>、<code>GIt</code>安装</h5><ul><li>参考 <a href="https://hexo.io/zh-cn/docs/index.html" target="_blank" rel="noopener">https://hexo.io/zh-cn/docs/index.html</a><h5 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h5></li></ul><p>打开 <code>git bash</code> 输入以下命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure><p>安装 <code>Hexo</code> 完成后，请执行下列命令，请特别的注意看注释。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hexo init &lt;folder&gt;  #folder指我们要安装的博客根目录 </span><br><span class="line">  #hexo init blog 指的是在当前文件夹下新建blog目录作为博客的根目录</span><br><span class="line">cd &lt;folder&gt;</span><br><span class="line">npm install         #安装所有的依赖包</span><br></pre></td></tr></table></figure><h5 id="安装主题"><a href="#安装主题" class="headerlink" title="安装主题"></a>安装主题</h5><ul><li>将主题文件拷贝至站点目录的 <code>themes</code> 目录下</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/iissnan/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure><ul><li><p>修改配置文件<br>打开 <strong>站点配置文件</strong>， Ctrl +F 搜索 <code>theme</code> 字段，并将其值更改为 next<br>如果显示的是繁体中文，那么在<strong>站点配置文件</strong>中设置 <code>language: zh-CN</code></p></li><li><p>本地预览</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo g # 等同于hexo generate，生成静态文件</span><br><span class="line">hexo s # 等同于hexo server，在本地服务器运行</span><br></pre></td></tr></table></figure></li><li><p>打开浏览器输入 <a href="http://localhost:4000" target="_blank" rel="noopener">http://localhost:4000</a>  能够访问说明部署成功。</p></li></ul><h5 id="注册-Github-并创建Pages"><a href="#注册-Github-并创建Pages" class="headerlink" title="注册 Github 并创建Pages"></a>注册 <code>Github</code> 并创建Pages</h5><ol><li><p>在 <a href="https://github.com/" target="_blank" rel="noopener">https://github.com/</a> 上面注册一个账号</p></li><li><p>新建仓库，仓库名为<code>你账号用户名.github.io</code></p></li><li><p>设置 SSH 远程连接</p><ul><li>设置Git的user name和email：(如果是第一次的话)</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;ttxxly&quot;</span><br><span class="line">git config --global user.email &quot;ttxxly@gmail.com&quot;</span><br></pre></td></tr></table></figure><ul><li>生成密钥</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;humingx@yeah.net&quot;</span><br></pre></td></tr></table></figure><p>连续3个回车。如果不需要密码的话。<br>最后得到了两个文件：<code>id_rsa</code>和<code>id_rsa.pub</code>。复制 <code>id_rsa.pub</code>内容到github上。</p></li></ol><h5 id="部署到-github"><a href="#部署到-github" class="headerlink" title="部署到 github"></a>部署到 <code>github</code></h5><p>在 博客的配置文件（不是主题配置文件） <code>_config.yml</code> 中 末尾添加</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/deployment.html</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line"><span class="attr">  type:</span> <span class="string">git</span></span><br><span class="line"><span class="attr">  repo:</span></span><br><span class="line"><span class="attr">    github:</span> <span class="string">git@github.com:ttxxly/ttxxly.github.io.git,master</span></span><br><span class="line"><span class="attr">    coding:</span> <span class="string">git@git.coding.net:ttxxly/ttxxly.coding.me.git,master</span></span><br></pre></td></tr></table></figure><p>再然后打开 <code>Git bash</code> 输入 <code>hexo d</code> 就是可以提交内容到GitHub上，然后就可以通过仓库名<code>ttxxly.github.io</code>来访问。</p><h5 id="自定义域名访问"><a href="#自定义域名访问" class="headerlink" title="自定义域名访问"></a>自定义域名访问</h5><ol><li>在 <code>blog\source</code>目录下新建 <code>CNAME</code>文件</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#### 在 CNAME 文件 中 填写自定义域名, 格式如下</span><br><span class="line">ttxxly.top</span><br></pre></td></tr></table></figure><h4 id="配置与优化"><a href="#配置与优化" class="headerlink" title="配置与优化"></a>配置与优化</h4><h5 id="添加标签页面"><a href="#添加标签页面" class="headerlink" title="添加标签页面"></a>添加标签页面</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">/*</span><br><span class="line">必看！！！！</span><br><span class="line">确认站点配置文件_config.yml中有： tag_dir： tags （有注释的去掉注释）</span><br><span class="line">确认主题配置文件_config.yml中有： tags: /tags</span><br><span class="line">*/</span><br><span class="line">hexo new page "tags"</span><br></pre></td></tr></table></figure><p>编辑站点中 <code>source/tags/index.md</code> 文件：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">title:</span> <span class="string">tags</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2017</span><span class="bullet">-3</span><span class="bullet">-16</span> <span class="number">14</span><span class="string">:08:51</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">"tags"</span></span><br></pre></td></tr></table></figure><p>如果站点启用多说或者Disqus，会在默认页面添加评论，关闭评论那么还需要添加:</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">comments：</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><h5 id="添加分类页面"><a href="#添加分类页面" class="headerlink" title="添加分类页面"></a>添加分类页面</h5><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">/*</span></span><br><span class="line"><span class="string">确认站点配置文件里有</span> <span class="attr">category_dir:</span> <span class="string">categories</span></span><br><span class="line"><span class="string">确认主题配置文件里有</span> <span class="attr">categories:</span> <span class="string">/categories</span></span><br><span class="line"><span class="string">*/</span></span><br><span class="line"><span class="string">hexo</span> <span class="string">new</span> <span class="string">page</span> <span class="string">"categories"</span></span><br></pre></td></tr></table></figure><p>编辑站点的 <code>source/categories/index.md</code> 文件：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">title:</span> <span class="string">categories</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2015</span><span class="bullet">-10</span><span class="bullet">-20</span> <span class="number">06</span><span class="string">:49:50</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">"categories"</span></span><br></pre></td></tr></table></figure><p>如果站点启用多说或者Disqus，会在默认页面添加评论，关闭评论那么还需要添加:</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">comments：</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><h5 id="添加自定义页面"><a href="#添加自定义页面" class="headerlink" title="添加自定义页面"></a>添加自定义页面</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page "title"</span><br></pre></td></tr></table></figure><ul><li>如果你不想在该页面显示评论，那么我们需要打开 <code>blog\source\logs\index.md</code> 在date的 <strong>下一行</strong>添加 <code>comments: false</code>(注意冒号后面有一个空格)</li><li>找到 <code>\next\_config.yml</code> 下的 <code>menu</code> ， 把 <code>title</code> 加进去。</li><li>然后在下面 <code>menu_icons</code> 中加入你想让其显示的图标<a href="http://fontawesome.io/icons/" target="_blank" rel="noopener">图标传送</a></li><li>在 <code>/themes/hexo-theme-next/languages/zh-Hans.yml</code> 文件中（这里默认你使用的是简体中文，若是其他语言更改相应的yml就行），在 <code>memu</code> 下加一句即可：</li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">title:</span> <span class="string">标题</span></span><br></pre></td></tr></table></figure><h5 id="文章末尾追加版权信息"><a href="#文章末尾追加版权信息" class="headerlink" title="文章末尾追加版权信息"></a>文章末尾追加版权信息</h5><p>打开 <code>themes/next/layout/_macro/reward.swig</code> ，在最上面添加如下代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">align</span>=<span class="string">"center"</span>&gt;</span></span><br><span class="line"> &#123;% if not is_index %&#125;</span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">b</span>&gt;</span>本文地址：<span class="tag">&lt;/<span class="name">b</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&#123;&#123; url_for(page.path) &#125;&#125;"</span> <span class="attr">title</span>=<span class="string">"&#123;&#123; page.title &#125;&#125;"</span>&gt;</span>&#123;&#123; url_for(page.path) &#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;<span class="name">b</span>&gt;</span>转载请注明出处，谢谢！<span class="tag">&lt;/<span class="name">b</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> &#123;% endif %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="开启打赏功能"><a href="#开启打赏功能" class="headerlink" title="开启打赏功能"></a>开启打赏功能</h5><p>在 <code>主题配置文件</code> 中：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">reward_comment:</span> <span class="string">坚持原创技术分享，您的支持将鼓励我继续创作！</span></span><br><span class="line"><span class="attr">wechatpay:</span> <span class="string">/images/wechat-reward.png</span></span><br><span class="line"><span class="attr">alipay:</span> <span class="string">/images/alipay-reward.jpg</span></span><br></pre></td></tr></table></figure><h5 id="友情链接"><a href="#友情链接" class="headerlink" title="友情链接"></a>友情链接</h5><p>在 <code>主题配置文件</code> 中</p><p>实例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># title</span><br><span class="line">links_title: Links</span><br><span class="line">links:</span><br><span class="line">  MacTalk: http://macshuo.com/</span><br><span class="line">  Title: http://example.com/</span><br></pre></td></tr></table></figure><h5 id="自定义字体"><a href="#自定义字体" class="headerlink" title="自定义字体"></a>自定义字体</h5><p><a href="http://theme-next.iissnan.com/theme-settings.html#fonts-customization" target="_blank" rel="noopener">http://theme-next.iissnan.com/theme-settings.html#fonts-customization</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">font:</span><br><span class="line">  enable: true</span><br><span class="line"></span><br><span class="line">  # 外链字体库地址，例如 //fonts.googleapis.com (默认值)</span><br><span class="line">  host:</span><br><span class="line"></span><br><span class="line">  # 全局字体，应用在 body 元素上</span><br><span class="line">  global:</span><br><span class="line">    external: true</span><br><span class="line">    family: Monda</span><br><span class="line"></span><br><span class="line">  # 标题字体 (h1, h2, h3, h4, h5, h6)</span><br><span class="line">  headings:</span><br><span class="line">    external: true</span><br><span class="line">    family: Roboto Slab</span><br><span class="line"></span><br><span class="line">  # 文章字体</span><br><span class="line">  posts:</span><br><span class="line">    external: true</span><br><span class="line">    family:</span><br><span class="line"></span><br><span class="line">  # Logo 字体</span><br><span class="line">  logo:</span><br><span class="line">    external: true</span><br><span class="line">    family: Lobster Two</span><br><span class="line">    size: 24</span><br><span class="line"></span><br><span class="line">  # 代码字体，应用于 code 以及代码块</span><br><span class="line">  codes:</span><br><span class="line">    external: true</span><br><span class="line">    family: PT Mono</span><br></pre></td></tr></table></figure><p><a href="http://theme-next.iissnan.com/faqs.html#custom-font" title="官方文档：自定义字体" target="_blank" rel="noopener">官方文档：自定义字体</a></p><p>在 <code>source/css/_variables/custom.styl</code> 文件中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">// 标题，修改成你期望的字体族</span><br><span class="line">$font-family-headings = Georgia, sans</span><br><span class="line"></span><br><span class="line">// 修改成你期望的字体族 如果不生效 请在同目录下的 base.style 下 修改成你期望的字体族</span><br><span class="line">$font-family-base = &quot;Microsoft YaHei&quot;, Verdana, sans-serif</span><br><span class="line"></span><br><span class="line">// 代码字体</span><br><span class="line">$code-font-family = &quot;Input Mono&quot;, &quot;PT Mono&quot;, Consolas, Monaco, Menlo, monospace</span><br><span class="line"></span><br><span class="line">// 正文字体的大小</span><br><span class="line">$font-size-base = 16px</span><br><span class="line"></span><br><span class="line">// 代码字体的大小</span><br><span class="line">$code-font-size = 13px</span><br></pre></td></tr></table></figure><p><em>注：上面的那种方式是更改首选字体，下面的方式会覆盖上面的那一种方式</em></p><h5 id="自定义图标和侧栏头像"><a href="#自定义图标和侧栏头像" class="headerlink" title="自定义图标和侧栏头像"></a>自定义图标和侧栏头像</h5><p>图标：在 <code>source</code> 目录下，放图标文件，命名为 <code>favicon.ico</code><br>侧栏头像： 编辑 <strong>站点配置文件</strong> <code>_config.yml</code> ，新增字段 <code>avatar</code>，值设置成头像的链接地址。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">其中，头像的链接地址可以是：</span><br><span class="line"></span><br><span class="line">完整的互联网 URL，例如：https://avatars1.githubusercontent.com/u/32269?v=3&amp;s=460</span><br><span class="line">站点内的地址，例如：</span><br><span class="line"></span><br><span class="line">/uploads/avatar.jpg 需要将你的头像图片放置在 站点的 source/uploads/（可能需要新建uploads目录）</span><br><span class="line">/images/avatar.jpg 需要将你的头像图片放置在 主题的 source/images/ 目录下。</span><br></pre></td></tr></table></figure><h5 id="添加RSS订阅"><a href="#添加RSS订阅" class="headerlink" title="添加RSS订阅"></a>添加RSS订阅</h5><p>安装订阅插件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-feed</span><br></pre></td></tr></table></figure><p>编辑网站根目录下的 _config.yml，添加以下代码开启</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># RSS订阅支持</span><br><span class="line">plugin:</span><br><span class="line">- hexo-generator-feed</span><br><span class="line"></span><br><span class="line"># Feed Atom</span><br><span class="line">feed:</span><br><span class="line">type: atom</span><br><span class="line">path: atom.xml</span><br><span class="line">limit: 20</span><br></pre></td></tr></table></figure><p>将订阅添加到菜单栏中</p><ul><li>找到 <code>\next\_config.yml</code> 下的 <code>menu</code> ， 把 <code>rss</code> 加进去。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">menu:</span><br><span class="line">  home: /</span><br><span class="line">  rss:</span><br></pre></td></tr></table></figure><ul><li>然后在下面 <code>menu_icons</code> 中加入你想让其显示的图标<a href="http://fontawesome.io/icons/" target="_blank" rel="noopener">图标传送</a></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">menu_icons:</span><br><span class="line">  logs: th-list</span><br><span class="line">  projects: ra</span><br><span class="line">  rss: rss</span><br></pre></td></tr></table></figure><ul><li>在 <code>/themes/hexo-theme-next/languages/zh-Hans.yml</code> 文件中（这里默认你使用的是简体中文，若是其他语言更改相应的yml就行），在 <code>memu</code> 下加一句即可：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">menu:</span><br><span class="line">  home: 首页</span><br><span class="line">  archives: 归档</span><br><span class="line">  categories: 分类</span><br><span class="line">  tags: 标签</span><br><span class="line">  about: 关于</span><br><span class="line">  search: 搜索</span><br><span class="line">  schedule: 日程表</span><br><span class="line">  sitemap: 站点地图</span><br><span class="line">  commonweal: 公益404</span><br><span class="line">  logs: 日志</span><br><span class="line">  projects: 项目</span><br><span class="line">  rss: 订阅</span><br></pre></td></tr></table></figure><h6 id="MathJax支持"><a href="#MathJax支持" class="headerlink" title="MathJax支持"></a>MathJax支持</h6><p><a href="https://github.com/hexojs/hexo-math" target="_blank" rel="noopener">https://github.com/hexojs/hexo-math</a></p><h4 id="错误解答"><a href="#错误解答" class="headerlink" title="错误解答"></a>错误解答</h4><h5 id="关于网站图标不更新问题"><a href="#关于网站图标不更新问题" class="headerlink" title="关于网站图标不更新问题"></a>关于网站图标不更新问题</h5><p>可以查看下GitHub网站上图标是否更新，因为git提交时忽略大小写的，可能文件没有更新，先将图标文件删除，在重新上传就可以了。</p><p>感兴趣的话可以点击下面的链接，关注我的微信公众号和我的知识星球。</p><blockquote><p><a href="https://www.ttxxly.top/images/qrcode_darklovy.jpg">https://www.ttxxly.top/images/qrcode_darklovy.jpg</a></p><p><a href="https://www.ttxxly.top/images/qrcode_ttxxly123.jpg">https://www.ttxxly.top/images/qrcode_ttxxly123.jpg</a></p><p><a href="https://www.ttxxly.top/images/ZSXQ_darklovy.png">https://www.ttxxly.top/images/ZSXQ_darklovy.png</a></p></blockquote>]]></content>
      
      
      
    </entry>
    
  
  
</search>
